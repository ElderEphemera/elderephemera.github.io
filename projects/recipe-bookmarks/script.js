// Generated by purs bundle 0.14.0
var PS = {};
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            // eslint-disable-next-line no-eq-null,eqeqeq
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msgIdent) {
          return function () {
            errback(new Error(msgIdent));
          };
        };
        xhr.onerror = onerror(requestFailedMessageIdent);
        xhr.ontimeout = onerror(timeoutErrorMessageIdent);
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.timeout = options.timeout;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
  exports["Semigroupoid"] = Control_Semigroupoid.Semigroupoid;
  exports["compose"] = Control_Semigroupoid.compose;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];                
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyN = function (f) {
      var go = function ($copy_n) {
          return function ($copy_acc) {
              var $tco_var_n = $copy_n;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(n, acc) {
                  if (n <= 0) {
                      $tco_done = true;
                      return acc;
                  };
                  if (Data_Boolean.otherwise) {
                      $tco_var_n = n - 1 | 0;
                      $copy_acc = f(acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Function (line 100, column 3 - line 102, column 37): " + [ n.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_n, $copy_acc);
              };
              return $tco_result;
          };
      };
      return go;
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["applyN"] = applyN;
  exports["on"] = on;
  exports["compose"] = Control_Category.compose;
  exports["identity"] = Control_Category.identity;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  "use strict";

  // module Data.Symbol

  exports.unsafeCoerce = function (arg) {
    return arg;
  };
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var Proxy3 = (function () {
      function Proxy3() {

      };
      Proxy3.value = new Proxy3();
      return Proxy3;
  })();
  var Proxy2 = (function () {
      function Proxy2() {

      };
      Proxy2.value = new Proxy2();
      return Proxy2;
  })();
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
  exports["Proxy2"] = Proxy2;
  exports["Proxy3"] = Proxy3;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var $foreign = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reifySymbol = function (s) {
      return function (f) {
          return $foreign.unsafeCoerce(function (dictIsSymbol) {
              return f(dictIsSymbol);
          })({
              reflectSymbol: function (v) {
                  return s;
              }
          })(Type_Proxy["Proxy"].value);
      };
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["reifySymbol"] = reifySymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };

  exports.unsafeDelete = function (label) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if (key !== label && {}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      return copy;
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
  exports["unsafeDelete"] = $foreign.unsafeDelete;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };
  var showProxy3 = new Show(function (v) {
      return "Proxy3";
  });
  var showProxy2 = new Show(function (v) {
      return "Proxy2";
  });
  var showProxy = new Show(function (v) {
      return "Proxy";
  });
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["ShowRecordFields"] = ShowRecordFields;
  exports["showRecordFields"] = showRecordFields;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showProxy"] = showProxy;
  exports["showProxy2"] = showProxy2;
  exports["showProxy3"] = showProxy3;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  var Data_Show = $PS["Data.Show"];                
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorProxy = new Functor(function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  });
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
  exports["functorProxy"] = functorProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Void"] = $PS["Data.Void"] || {};
  var exports = $PS["Data.Void"];
  var Data_Show = $PS["Data.Show"];                
  var Void = function (x) {
      return x;
  };
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  var showVoid = new Data_Show.Show(absurd);
  exports["absurd"] = absurd;
  exports["showVoid"] = showVoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Void = $PS["Data.Void"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var semigroupVoid = new Semigroup(function (v) {
      return Data_Void.absurd;
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupProxy3 = new Semigroup(function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  });
  var semigroupProxy2 = new Semigroup(function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  });
  var semigroupProxy = new Semigroup(function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["SemigroupRecord"] = SemigroupRecord;
  exports["appendRecord"] = appendRecord;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupVoid"] = semigroupVoid;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupProxy"] = semigroupProxy;
  exports["semigroupProxy2"] = semigroupProxy2;
  exports["semigroupProxy3"] = semigroupProxy3;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  var applyProxy = new Apply(function () {
      return Data_Functor.functorProxy;
  }, function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  });
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["lift4"] = lift4;
  exports["lift5"] = lift5;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
  exports["applyProxy"] = applyProxy;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeProxy = new Applicative(function () {
      return Control_Apply.applyProxy;
  }, function (v) {
      return Type_Proxy["Proxy"].value;
  });
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
  exports["applicativeProxy"] = applicativeProxy;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Functor = $PS["Data.Functor"];                
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
  exports["Alt"] = Control_Alt.Alt;
  exports["alt"] = Control_Alt.alt;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["guard"] = guard;
  exports["alternativeArray"] = alternativeArray;
  exports["Alt"] = Control_Alt.Alt;
  exports["alt"] = Control_Alt.alt;
  exports["Applicative"] = Control_Applicative.Applicative;
  exports["liftA1"] = Control_Applicative.liftA1;
  exports["pure"] = Control_Applicative.pure;
  exports["unless"] = Control_Applicative.unless;
  exports["when"] = Control_Applicative.when;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Plus"] = Control_Plus.Plus;
  exports["empty"] = Control_Plus.empty;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };
  var bindProxy = new Bind(function () {
      return Control_Apply.applyProxy;
  }, function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  });
  var bindFn = new Bind(function () {
      return Control_Apply.applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardProxy = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var discardProxy2 = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var discardProxy3 = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return bind(dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      return f;
                  });
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["ifM"] = ifM;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["bindProxy"] = bindProxy;
  exports["discardUnit"] = discardUnit;
  exports["discardProxy"] = discardProxy;
  exports["discardProxy2"] = discardProxy2;
  exports["discardProxy3"] = discardProxy3;
  exports["Applicative"] = Control_Applicative.Applicative;
  exports["liftA1"] = Control_Applicative.liftA1;
  exports["pure"] = Control_Applicative.pure;
  exports["unless"] = Control_Applicative.unless;
  exports["when"] = Control_Applicative.when;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function(exports) {
  "use strict";

  exports.arrayExtend = function(f) {
    return function(xs) {
      return xs.map(function (_, i, xs) {
        return f(xs.slice(i));
      });
    };
  };
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Extend"] = $PS["Control.Extend"] || {};
  var exports = $PS["Control.Extend"];
  var $foreign = $PS["Control.Extend"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Extend = function (Functor0, extend) {
      this.Functor0 = Functor0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Data_Functor.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extendArray = new Extend(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayExtend);
  var extend = function (dict) {
      return dict.extend;
  };
  var extendFlipped = function (dictExtend) {
      return function (w) {
          return function (f) {
              return extend(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
  };
  var composeCoKleisliFlipped = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f(extend(dictExtend)(g)(w));
              };
          };
      };
  };
  var composeCoKleisli = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g(extend(dictExtend)(f)(w));
              };
          };
      };
  };
  exports["Extend"] = Extend;
  exports["extend"] = extend;
  exports["extendFlipped"] = extendFlipped;
  exports["composeCoKleisli"] = composeCoKleisli;
  exports["composeCoKleisliFlipped"] = composeCoKleisliFlipped;
  exports["duplicate"] = duplicate;
  exports["extendFn"] = extendFn;
  exports["extendArray"] = extendArray;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var whenM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var monadProxy = new Monad(function () {
      return Control_Applicative.applicativeProxy;
  }, function () {
      return Control_Bind.bindProxy;
  });
  var monadFn = new Monad(function () {
      return Control_Applicative.applicativeFn;
  }, function () {
      return Control_Bind.bindFn;
  });
  var monadArray = new Monad(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Bind.bindArray;
  });
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["whenM"] = whenM;
  exports["unlessM"] = unlessM;
  exports["ap"] = ap;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
  exports["monadProxy"] = monadProxy;
  exports["Applicative"] = Control_Applicative.Applicative;
  exports["liftA1"] = Control_Applicative.liftA1;
  exports["pure"] = Control_Applicative.pure;
  exports["unless"] = Control_Applicative.unless;
  exports["when"] = Control_Applicative.when;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Bind"] = Control_Bind.Bind;
  exports["bind"] = Control_Bind.bind;
  exports["ifM"] = Control_Bind.ifM;
  exports["join"] = Control_Bind.join;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.MonadZero"] = $PS["Control.MonadZero"] || {};
  var exports = $PS["Control.MonadZero"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];                
  var MonadZeroIsDeprecated = {};
  var MonadZero = function (Alternative1, Monad0, MonadZeroIsDeprecated2) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
      this.MonadZeroIsDeprecated2 = MonadZeroIsDeprecated2;
  };
  var monadZeroIsDeprecated = function (dictWarn) {
      return MonadZeroIsDeprecated;
  };
  var monadZeroArray = new MonadZero(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  }, function () {
      return undefined;
  });
  exports["MonadZeroIsDeprecated"] = MonadZeroIsDeprecated;
  exports["MonadZero"] = MonadZero;
  exports["monadZeroIsDeprecated"] = monadZeroIsDeprecated;
  exports["monadZeroArray"] = monadZeroArray;
  exports["Alt"] = Control_Alt.Alt;
  exports["alt"] = Control_Alt.alt;
  exports["Alternative"] = Control_Alternative.Alternative;
  exports["guard"] = Control_Alternative.guard;
  exports["Applicative"] = Control_Applicative.Applicative;
  exports["liftA1"] = Control_Applicative.liftA1;
  exports["pure"] = Control_Applicative.pure;
  exports["unless"] = Control_Applicative.unless;
  exports["when"] = Control_Applicative.when;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Bind"] = Control_Bind.Bind;
  exports["bind"] = Control_Bind.bind;
  exports["ifM"] = Control_Bind.ifM;
  exports["join"] = Control_Bind.join;
  exports["Monad"] = Control_Monad.Monad;
  exports["ap"] = Control_Monad.ap;
  exports["liftM1"] = Control_Monad.liftM1;
  exports["Plus"] = Control_Plus.Plus;
  exports["empty"] = Control_Plus.empty;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);

  exports.topNumber = Number.POSITIVE_INFINITY;
  exports.bottomNumber = Number.NEGATIVE_INFINITY;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };

  exports.ordBooleanImpl = unsafeCompareImpl;
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.eqStringImpl);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var eqProxy3 = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqProxy2 = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqProxy = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var eq1Array = new Eq1(function (dictEq) {
      return eq(eqArray(dictEq));
  });
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  var notEq1 = function (dictEq1) {
      return function (dictEq) {
          return function (x) {
              return function (y) {
                  return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
              };
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["Eq1"] = Eq1;
  exports["eq1"] = eq1;
  exports["notEq1"] = notEq1;
  exports["EqRecord"] = EqRecord;
  exports["eqRecord"] = eqRecord;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqProxy"] = eqProxy;
  exports["eqProxy2"] = eqProxy2;
  exports["eqProxy3"] = eqProxy3;
  exports["eq1Array"] = eq1Array;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var showOrdering = new Data_Show.Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [ v.constructor.name ]);
  });
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [ v.constructor.name ]);
  };
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["eqOrdering"] = eqOrdering;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["showOrdering"] = showOrdering;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
      this.addRecord = addRecord;
      this.mulRecord = mulRecord;
      this.oneRecord = oneRecord;
      this.zeroRecord = zeroRecord;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, Data_Unit.unit);
  var semiringRecordNil = new SemiringRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var semiringProxy3 = new Semiring(function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  }, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  }, Type_Proxy.Proxy3.value, Type_Proxy.Proxy3.value);
  var semiringProxy2 = new Semiring(function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  }, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  }, Type_Proxy.Proxy2.value, Type_Proxy.Proxy2.value);
  var semiringProxy = new Semiring(function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  }, function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  }, Type_Proxy["Proxy"].value, Type_Proxy["Proxy"].value);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function (dictRowToList) {
      return function (dictSemiringRecord) {
          return new Semiring(addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value), mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value), oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value), zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value));
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringFn = function (dictSemiring) {
      return new Semiring(function (f) {
          return function (g) {
              return function (x) {
                  return add(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (f) {
          return function (g) {
              return function (x) {
                  return mul(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (v) {
          return one(dictSemiring);
      }, function (v) {
          return zero(dictSemiring);
      });
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return new SemiringRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(one(dictSemiring))(tail);
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(zero(dictSemiring))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["SemiringRecord"] = SemiringRecord;
  exports["addRecord"] = addRecord;
  exports["mulRecord"] = mulRecord;
  exports["oneRecord"] = oneRecord;
  exports["zeroRecord"] = zeroRecord;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringFn"] = semiringFn;
  exports["semiringUnit"] = semiringUnit;
  exports["semiringProxy"] = semiringProxy;
  exports["semiringProxy2"] = semiringProxy2;
  exports["semiringProxy3"] = semiringProxy3;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var RingRecord = function (SemiringRecord0, subRecord) {
      this.SemiringRecord0 = SemiringRecord0;
      this.subRecord = subRecord;
  };
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var subRecord = function (dict) {
      return dict.subRecord;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringUnit = new Ring(function () {
      return Data_Semiring.semiringUnit;
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var ringRecordNil = new RingRecord(function () {
      return Data_Semiring.semiringRecordNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var ringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictRingRecord) {
              return function (dictRing) {
                  return new RingRecord(function () {
                      return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = subRecord(dictRingRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  var ringRecord = function (dictRowToList) {
      return function (dictRingRecord) {
          return new Ring(function () {
              return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
          }, subRecord(dictRingRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var ringProxy3 = new Ring(function () {
      return Data_Semiring.semiringProxy3;
  }, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  });
  var ringProxy2 = new Ring(function () {
      return Data_Semiring.semiringProxy2;
  }, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  });
  var ringProxy = new Ring(function () {
      return Data_Semiring.semiringProxy;
  }, function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  });
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var ringFn = function (dictRing) {
      return new Ring(function () {
          return Data_Semiring.semiringFn(dictRing.Semiring0());
      }, function (f) {
          return function (g) {
              return function (x) {
                  return sub(dictRing)(f(x))(g(x));
              };
          };
      });
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["RingRecord"] = RingRecord;
  exports["subRecord"] = subRecord;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["ringFn"] = ringFn;
  exports["ringProxy"] = ringProxy;
  exports["ringProxy2"] = ringProxy2;
  exports["ringProxy3"] = ringProxy3;
  exports["ringRecord"] = ringRecord;
  exports["ringRecordNil"] = ringRecordNil;
  exports["ringRecordCons"] = ringRecordCons;
  exports["Semiring"] = Data_Semiring.Semiring;
  exports["SemiringRecord"] = Data_Semiring.SemiringRecord;
  exports["add"] = Data_Semiring.add;
  exports["mul"] = Data_Semiring.mul;
  exports["one"] = Data_Semiring.one;
  exports["zero"] = Data_Semiring.zero;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var OrdRecord = function (EqRecord0, compareRecord) {
      this.EqRecord0 = EqRecord0;
      this.compareRecord = compareRecord;
  };
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var Ord1 = function (Eq10, compare1) {
      this.Eq10 = Eq10;
      this.compare1 = compare1;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordRecordNil = new OrdRecord(function () {
      return Data_Eq.eqRowNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return Data_Ordering.EQ.value;
          };
      };
  });
  var ordProxy3 = new Ord(function () {
      return Data_Eq.eqProxy3;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordProxy2 = new Ord(function () {
      return Data_Eq.eqProxy2;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordProxy = new Ord(function () {
      return Data_Eq.eqProxy;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordOrdering = new Ord(function () {
      return Data_Ordering.eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at Data.Ord (line 121, column 1 - line 128, column 21): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return new Ord(function () {
              return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
          }, compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var compare1 = function (dict) {
      return dict.compare1;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $49 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($49) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  };
  var ord1Array = new Ord1(function () {
      return Data_Eq.eq1Array;
  }, function (dictOrd) {
      return compare(ordArray(dictOrd));
  });
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return new OrdRecord(function () {
                      return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                              var $55 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                              if ($55) {
                                  return left;
                              };
                              return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                          };
                      };
                  });
              };
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $59 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($59) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["Ord1"] = Ord1;
  exports["compare1"] = compare1;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["between"] = between;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["OrdRecord"] = OrdRecord;
  exports["compareRecord"] = compareRecord;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordVoid"] = ordVoid;
  exports["ordProxy"] = ordProxy;
  exports["ordProxy2"] = ordProxy2;
  exports["ordProxy3"] = ordProxy3;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["ord1Array"] = ord1Array;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
  exports["EQ"] = Data_Ordering.EQ;
  exports["GT"] = Data_Ordering.GT;
  exports["LT"] = Data_Ordering.LT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var BoundedRecord = function (OrdRecord0, bottomRecord, topRecord) {
      this.OrdRecord0 = OrdRecord0;
      this.bottomRecord = bottomRecord;
      this.topRecord = topRecord;
  };
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var topRecord = function (dict) {
      return dict.topRecord;
  };
  var top = function (dict) {
      return dict.top;
  };
  var boundedUnit = new Bounded(function () {
      return Data_Ord.ordUnit;
  }, Data_Unit.unit, Data_Unit.unit);
  var boundedRecordNil = new BoundedRecord(function () {
      return Data_Ord.ordRecordNil;
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var boundedProxy3 = new Bounded(function () {
      return Data_Ord.ordProxy3;
  }, Type_Proxy.Proxy3.value, Type_Proxy.Proxy3.value);
  var boundedProxy2 = new Bounded(function () {
      return Data_Ord.ordProxy2;
  }, Type_Proxy.Proxy2.value, Type_Proxy.Proxy2.value);
  var boundedProxy = new Bounded(function () {
      return Data_Ord.ordProxy;
  }, Type_Proxy["Proxy"].value, Type_Proxy["Proxy"].value);
  var boundedOrdering = new Bounded(function () {
      return Data_Ord.ordOrdering;
  }, Data_Ordering.LT.value, Data_Ordering.GT.value);
  var boundedNumber = new Bounded(function () {
      return Data_Ord.ordNumber;
  }, $foreign.bottomNumber, $foreign.topNumber);
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var boundedBoolean = new Bounded(function () {
      return Data_Ord.ordBoolean;
  }, false, true);
  var bottomRecord = function (dict) {
      return dict.bottomRecord;
  };
  var boundedRecord = function (dictRowToList) {
      return function (dictBoundedRecord) {
          return new Bounded(function () {
              return Data_Ord.ordRecord()(dictBoundedRecord.OrdRecord0());
          }, bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value), topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value));
      };
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  var boundedRecordCons = function (dictIsSymbol) {
      return function (dictBounded) {
          return function (dictCons) {
              return function (dictCons1) {
                  return function (dictBoundedRecord) {
                      return new BoundedRecord(function () {
                          return Data_Ord.ordRecordCons(dictBoundedRecord.OrdRecord0())()(dictIsSymbol)(dictBounded.Ord0());
                      }, function (v) {
                          return function (rowProxy) {
                              var tail = bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              return insert(bottom(dictBounded))(tail);
                          };
                      }, function (v) {
                          return function (rowProxy) {
                              var tail = topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              return insert(top(dictBounded))(tail);
                          };
                      });
                  };
              };
          };
      };
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["BoundedRecord"] = BoundedRecord;
  exports["bottomRecord"] = bottomRecord;
  exports["topRecord"] = topRecord;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedUnit"] = boundedUnit;
  exports["boundedNumber"] = boundedNumber;
  exports["boundedProxy"] = boundedProxy;
  exports["boundedProxy2"] = boundedProxy2;
  exports["boundedProxy3"] = boundedProxy3;
  exports["boundedRecordNil"] = boundedRecordNil;
  exports["boundedRecordCons"] = boundedRecordCons;
  exports["boundedRecord"] = boundedRecord;
  exports["EQ"] = Data_Ord.EQ;
  exports["GT"] = Data_Ord.GT;
  exports["LT"] = Data_Ord.LT;
  exports["Ord"] = Data_Ord.Ord;
  exports["OrdRecord"] = Data_Ord.OrdRecord;
  exports["compare"] = Data_Ord.compare;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Invariant"] = $PS["Data.Functor.Invariant"] || {};
  var exports = $PS["Data.Functor.Invariant"];
  var Data_Functor = $PS["Data.Functor"];                
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var invariantMultiplicative = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantEndo = new Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($36) {
                  return ab(v(ba($36)));
              };
          };
      };
  });
  var invariantDual = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantDisj = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantConj = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantAdditive = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var imapF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(f);
          };
      };
  };
  var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
  var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  var invariantAlternate = function (dictInvariant) {
      return new Invariant(function (f) {
          return function (g) {
              return function (v) {
                  return imap(dictInvariant)(f)(g)(v);
              };
          };
      });
  };
  exports["imap"] = imap;
  exports["Invariant"] = Invariant;
  exports["imapF"] = imapF;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;
  exports["invariantAdditive"] = invariantAdditive;
  exports["invariantConj"] = invariantConj;
  exports["invariantDisj"] = invariantDisj;
  exports["invariantDual"] = invariantDual;
  exports["invariantEndo"] = invariantEndo;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["invariantAlternate"] = invariantAlternate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var Constructor = function (x) {
      return x;
  };
  var Argument = function (x) {
      return x;
  };
  var to = function (dict) {
      return dict.to;
  };
  var showSum = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Inl) {
                  return "(Inl " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Inr) {
                  return "(Inr " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Generic.Rep (line 31, column 1 - line 33, column 42): " + [ v.constructor.name ]);
          });
      };
  };
  var showProduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var showNoArguments = new Data_Show.Show(function (v) {
      return "NoArguments";
  });
  var showConstructor = function (dictIsSymbol) {
      return function (dictShow) {
          return new Data_Show.Show(function (v) {
              return "(Constructor @" + (Data_Show.show(Data_Show.showString)(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value)) + (" " + (Data_Show.show(dictShow)(v) + ")")));
          });
      };
  };
  var showArgument = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Argument " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var repOf = function (dictGeneric) {
      return function (v) {
          return Type_Proxy["Proxy"].value;
      };
  };
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["repOf"] = repOf;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Constructor"] = Constructor;
  exports["Argument"] = Argument;
  exports["showNoArguments"] = showNoArguments;
  exports["showSum"] = showSum;
  exports["showProduct"] = showProduct;
  exports["showConstructor"] = showConstructor;
  exports["showArgument"] = showArgument;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var CommutativeRingRecord = function (RingRecord0) {
      this.RingRecord0 = RingRecord0;
  };
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  };
  var commutativeRingUnit = new CommutativeRing(function () {
      return Data_Ring.ringUnit;
  });
  var commutativeRingRecordNil = new CommutativeRingRecord(function () {
      return Data_Ring.ringRecordNil;
  });
  var commutativeRingRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCommutativeRingRecord) {
              return function (dictCommutativeRing) {
                  return new CommutativeRingRecord(function () {
                      return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                  });
              };
          };
      };
  };
  var commutativeRingRecord = function (dictRowToList) {
      return function (dictCommutativeRingRecord) {
          return new CommutativeRing(function () {
              return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
          });
      };
  };
  var commutativeRingProxy3 = new CommutativeRing(function () {
      return Data_Ring.ringProxy3;
  });
  var commutativeRingProxy2 = new CommutativeRing(function () {
      return Data_Ring.ringProxy2;
  });
  var commutativeRingProxy = new CommutativeRing(function () {
      return Data_Ring.ringProxy;
  });
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  var commutativeRingFn = function (dictCommutativeRing) {
      return new CommutativeRing(function () {
          return Data_Ring.ringFn(dictCommutativeRing.Ring0());
      });
  };
  exports["CommutativeRing"] = CommutativeRing;
  exports["CommutativeRingRecord"] = CommutativeRingRecord;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
  exports["commutativeRingUnit"] = commutativeRingUnit;
  exports["commutativeRingFn"] = commutativeRingFn;
  exports["commutativeRingRecord"] = commutativeRingRecord;
  exports["commutativeRingProxy"] = commutativeRingProxy;
  exports["commutativeRingProxy2"] = commutativeRingProxy2;
  exports["commutativeRingProxy3"] = commutativeRingProxy3;
  exports["commutativeRingRecordNil"] = commutativeRingRecordNil;
  exports["commutativeRingRecordCons"] = commutativeRingRecordCons;
  exports["Ring"] = Data_Ring.Ring;
  exports["RingRecord"] = Data_Ring.RingRecord;
  exports["Semiring"] = Data_Semiring.Semiring;
  exports["add"] = Data_Semiring.add;
  exports["mul"] = Data_Semiring.mul;
  exports["one"] = Data_Semiring.one;
  exports["zero"] = Data_Semiring.zero;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var lcm = function (dictEq) {
      return function (dictEuclideanRing) {
          return function (a) {
              return function (b) {
                  var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                  if ($8) {
                      return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                  };
                  return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
              };
          };
      };
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["lcm"] = lcm;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
  exports["CommutativeRing"] = Data_CommutativeRing.CommutativeRing;
  exports["Ring"] = Data_Ring.Ring;
  exports["sub"] = Data_Ring.sub;
  exports["Semiring"] = Data_Semiring.Semiring;
  exports["add"] = Data_Semiring.add;
  exports["mul"] = Data_Semiring.mul;
  exports["one"] = Data_Semiring.one;
  exports["zero"] = Data_Semiring.zero;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });
  var monoidOrdering = new Monoid(function () {
      return Data_Ordering.semigroupOrdering;
  }, Data_Ordering.EQ.value);
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["guard"] = guard;
  exports["MonoidRecord"] = MonoidRecord;
  exports["memptyRecord"] = memptyRecord;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidOrdering"] = monoidOrdering;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
  exports["Semigroup"] = Data_Semigroup.Semigroup;
  exports["SemigroupRecord"] = Data_Semigroup.SemigroupRecord;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var optional = function (dictAlt) {
      return function (dictApplicative) {
          return function (a) {
              return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Just.create)(a))(Control_Applicative.pure(dictApplicative)(Nothing.value));
          };
      };
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var genericMaybe = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Nothing) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Just) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Nothing.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new Just(x.value0);
      };
      throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [ x.constructor.name ]);
  });
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(v(v1));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqMaybe(dictEq));
  });
  var ord1Maybe = new Data_Ord.Ord1(function () {
      return eq1Maybe;
  }, function (dictOrd) {
      return Data_Ord.compare(ordMaybe(dictOrd));
  });
  var boundedMaybe = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordMaybe(dictBounded.Ord0());
      }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  }, function () {
      return undefined;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["optional"] = optional;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["eq1Maybe"] = eq1Maybe;
  exports["ordMaybe"] = ordMaybe;
  exports["ord1Maybe"] = ord1Maybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["showMaybe"] = showMaybe;
  exports["genericMaybe"] = genericMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];
  var textXML = "text/xml";
  var textPlain = "text/plain";
  var textHTML = "text/html";
  var textCSV = "text/csv";
  var textCSS = "text/css";
  var multipartFormData = "multipart/form-data";
  var imagePNG = "image/png";
  var imageJPEG = "image/jpeg";
  var imageGIF = "image/gif";
  var applicationXML = "application/xml";
  var applicationOctetStream = "application/octet-stream";
  var applicationJavascript = "application/javascript";
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
  exports["applicationJavascript"] = applicationJavascript;
  exports["applicationOctetStream"] = applicationOctetStream;
  exports["applicationXML"] = applicationXML;
  exports["imageGIF"] = imageGIF;
  exports["imageJPEG"] = imageJPEG;
  exports["imagePNG"] = imagePNG;
  exports["multipartFormData"] = multipartFormData;
  exports["textCSV"] = textCSV;
  exports["textHTML"] = textHTML;
  exports["textPlain"] = textPlain;
  exports["textXML"] = textXML;
  exports["textCSS"] = textCSS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = $$String.create;
  var json = Json.create;
  var formURLEncoded = FormURLEncoded.create;
  var formData = FormData.create;
  var document = Document.create;
  var blob = Blob.create;
  var arrayView = function (av) {
      return new ArrayView(function (f) {
          return f(av);
      });
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["arrayView"] = arrayView;
  exports["blob"] = blob;
  exports["document"] = document;
  exports["string"] = string;
  exports["formData"] = formData;
  exports["formURLEncoded"] = formURLEncoded;
  exports["json"] = json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];                
  var Newtype = function (Coercible0) {
      this.Coercible0 = Coercible0;
  };
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var underF2 = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var underF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var under2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap();
      };
  };
  var traverse = function (dictCoercible) {
      return function (dictNewtype) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var overF2 = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var overF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var over2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var newtypeMultiplicative = new Newtype(function () {
      return undefined;
  });
  var newtypeLast = new Newtype(function () {
      return undefined;
  });
  var newtypeFirst = new Newtype(function () {
      return undefined;
  });
  var newtypeEndo = new Newtype(function () {
      return undefined;
  });
  var newtypeDual = new Newtype(function () {
      return undefined;
  });
  var newtypeDisj = new Newtype(function () {
      return undefined;
  });
  var newtypeConj = new Newtype(function () {
      return undefined;
  });
  var newtypeAdditive = new Newtype(function () {
      return undefined;
  });
  var collect = function (dictCoercible) {
      return function (dictNewtype) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var ala = function (dictCoercible) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Safe_Coerce.coerce()(f(wrap()));
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["over"] = over;
  exports["overF"] = overF;
  exports["under"] = under;
  exports["underF"] = underF;
  exports["over2"] = over2;
  exports["overF2"] = overF2;
  exports["under2"] = under2;
  exports["underF2"] = underF2;
  exports["traverse"] = traverse;
  exports["collect"] = collect;
  exports["newtypeAdditive"] = newtypeAdditive;
  exports["newtypeMultiplicative"] = newtypeMultiplicative;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["newtypeDual"] = newtypeDual;
  exports["newtypeEndo"] = newtypeEndo;
  exports["newtypeFirst"] = newtypeFirst;
  exports["newtypeLast"] = newtypeLast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.MediaType"] = $PS["Data.MediaType"] || {};
  var exports = $PS["Data.MediaType"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var MediaType = function (x) {
      return x;
  };
  var showMediaType = new Data_Show.Show(function (v) {
      return "(MediaType " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var newtypeMediaType = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqMediaType = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordMediaType = new Data_Ord.Ord(function () {
      return eqMediaType;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
  exports["eqMediaType"] = eqMediaType;
  exports["ordMediaType"] = ordMediaType;
  exports["showMediaType"] = showMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_MediaType = $PS["Data.MediaType"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  };
  var showRequestHeader = new Data_Show.Show(function (v) {
      if (v instanceof Accept) {
          return "(Accept " + (Data_Show.show(Data_MediaType.showMediaType)(v.value0) + ")");
      };
      if (v instanceof ContentType) {
          return "(ContentType " + (Data_Show.show(Data_MediaType.showMediaType)(v.value0) + ")");
      };
      if (v instanceof RequestHeader) {
          return "(RequestHeader " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 16, column 1 - line 19, column 81): " + [ v.constructor.name ]);
  });
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  var eqRequestHeader = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Accept && y instanceof Accept) {
              return Data_Eq.eq(Data_MediaType.eqMediaType)(x.value0)(y.value0);
          };
          if (x instanceof ContentType && y instanceof ContentType) {
              return Data_Eq.eq(Data_MediaType.eqMediaType)(x.value0)(y.value0);
          };
          if (x instanceof RequestHeader && y instanceof RequestHeader) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          return false;
      };
  });
  var ordRequestHeader = new Data_Ord.Ord(function () {
      return eqRequestHeader;
  }, function (x) {
      return function (y) {
          if (x instanceof Accept && y instanceof Accept) {
              return Data_Ord.compare(Data_MediaType.ordMediaType)(x.value0)(y.value0);
          };
          if (x instanceof Accept) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Accept) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ContentType && y instanceof ContentType) {
              return Data_Ord.compare(Data_MediaType.ordMediaType)(x.value0)(y.value0);
          };
          if (x instanceof ContentType) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ContentType) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof RequestHeader && y instanceof RequestHeader) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          throw new Error("Failed pattern match at Affjax.RequestHeader (line 14, column 1 - line 14, column 54): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["name"] = name;
  exports["value"] = value;
  exports["eqRequestHeader"] = eqRequestHeader;
  exports["ordRequestHeader"] = ordRequestHeader;
  exports["showRequestHeader"] = showRequestHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
  var json = new Json(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  var document = new Document(Control_Category.identity(Control_Category.categoryFn));
  var blob = new Blob(Control_Category.identity(Control_Category.categoryFn));
  var arrayBuffer = new $$ArrayBuffer(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["arrayBuffer"] = arrayBuffer;
  exports["blob"] = blob;
  exports["document"] = document;
  exports["json"] = json;
  exports["string"] = string;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var value = function (v) {
      return v.value1;
  };
  var showResponseHeader = new Data_Show.Show(function (v) {
      return "(ResponseHeader " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
  });
  var name = function (v) {
      return v.value0;
  };
  var eqResponseHeader = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x.value0 === y.value0 && x.value1 === y.value1;
      };
  });
  var ordResponseHeader = new Data_Ord.Ord(function () {
      return eqResponseHeader;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
      };
  });
  exports["ResponseHeader"] = ResponseHeader;
  exports["name"] = name;
  exports["value"] = value;
  exports["eqResponseHeader"] = eqResponseHeader;
  exports["ordResponseHeader"] = ordResponseHeader;
  exports["showResponseHeader"] = showResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either (line 173, column 1 - line 175, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var note$prime = function (f) {
      return Data_Maybe["maybe'"](function ($105) {
          return Left.create(f($105));
      })(Right.create);
  };
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var genericEither = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Left) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof Right) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Left(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new Right(x.value0);
      };
      throw new Error("Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): " + [ x.constructor.name ]);
  });
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
  var fromRight$prime = function (v) {
      return function (v1) {
          if (v1 instanceof Right) {
              return v1.value0;
          };
          return v(Data_Unit.unit);
      };
  };
  var fromRight = function (v) {
      return function (v1) {
          if (v1 instanceof Right) {
              return v1.value0;
          };
          return v;
      };
  };
  var fromLeft$prime = function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return v1.value0;
          };
          return v(Data_Unit.unit);
      };
  };
  var fromLeft = function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return v1.value0;
          };
          return v;
      };
  };
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          return new Right(v(v1));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  if (x instanceof Left) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Left) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either (line 189, column 1 - line 189, column 64): " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var eq1Either = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqEither(dictEq)(dictEq1));
      });
  };
  var ord1Either = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Either(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
      });
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var choose = function (dictAlt) {
      return function (a) {
          return function (b) {
              return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
          };
      };
  };
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
      };
  };
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
          };
      });
  };
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["choose"] = choose;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["fromLeft"] = fromLeft;
  exports["fromLeft'"] = fromLeft$prime;
  exports["fromRight"] = fromRight;
  exports["fromRight'"] = fromRight$prime;
  exports["note"] = note;
  exports["note'"] = note$prime;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["genericEither"] = genericEither;
  exports["invariantEither"] = invariantEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["eq1Either"] = eq1Either;
  exports["ordEither"] = ordEither;
  exports["ord1Either"] = ord1Either;
  exports["boundedEither"] = boundedEither;
  exports["semigroupEither"] = semigroupEither;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["semigroupEffect"] = semigroupEffect;
  exports["monoidEffect"] = monoidEffect;
  exports["untilE"] = $foreign.untilE;
  exports["whileE"] = $foreign.whileE;
  exports["forE"] = $foreign.forE;
  exports["foreachE"] = $foreign.foreachE;
})(PS);
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.name = function (e) {
    return e.name || "Error";
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["stack"] = stack;
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["name"] = $foreign.name;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowMaybe = new MonadThrow(function () {
      return Data_Maybe.monadMaybe;
  }, Data_Function["const"](Data_Maybe.Nothing.value));
  var monadThrowEither = new MonadThrow(function () {
      return Data_Either.monadEither;
  }, Data_Either.Left.create);
  var monadThrowEffect = new MonadThrow(function () {
      return Effect.monadEffect;
  }, Effect_Exception.throwException);
  var monadErrorMaybe = new MonadError(function () {
      return monadThrowMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing) {
              return v1(Data_Unit.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var monadErrorEither = new MonadError(function () {
      return monadThrowEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Either.Left) {
              return v1(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var monadErrorEffect = new MonadError(function () {
      return monadThrowEffect;
  }, Data_Function.flip(Effect_Exception.catchException));
  var catchError = function (dict) {
      return dict.catchError;
  };
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var v = p(e);
                      if (v instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError.MonadThrow0())(e);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return handler(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [ v.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  var withResource = function (dictMonadError) {
      return function (acquire) {
          return function (release) {
              return function (kleisli) {
                  return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(acquire)(function (resource) {
                      return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())($$try(dictMonadError)(kleisli(resource)))(function (result) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(release(resource))(function () {
                              return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()))(result);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["catchJust"] = catchJust;
  exports["try"] = $$try;
  exports["withResource"] = withResource;
  exports["monadThrowEither"] = monadThrowEither;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadThrowMaybe"] = monadThrowMaybe;
  exports["monadErrorMaybe"] = monadErrorMaybe;
  exports["monadThrowEffect"] = monadThrowEffect;
  exports["monadErrorEffect"] = monadErrorEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Cont.Class"] = $PS["Control.Monad.Cont.Class"] || {};
  var exports = $PS["Control.Monad.Cont.Class"];
  var MonadCont = function (Monad0, callCC) {
      this.Monad0 = Monad0;
      this.callCC = callCC;
  };
  var callCC = function (dict) {
      return dict.callCC;
  };
  exports["MonadCont"] = MonadCont;
  exports["callCC"] = callCC;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];                
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var MonadReader = function (MonadAsk0, local) {
      this.MonadAsk0 = MonadAsk0;
      this.local = local;
  };
  var monadAskFun = new MonadAsk(function () {
      return Control_Monad.monadFn;
  }, Control_Category.identity(Control_Category.categoryFn));
  var monadReaderFun = new MonadReader(function () {
      return monadAskFun;
  }, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictMonadAsk) {
      return function (f) {
          return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
      };
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["MonadAsk"] = MonadAsk;
  exports["asks"] = asks;
  exports["MonadReader"] = MonadReader;
  exports["monadAskFun"] = monadAskFun;
  exports["monadReaderFun"] = monadReaderFun;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad"] = $PS["Control.Comonad"] || {};
  var exports = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Functor = $PS["Data.Functor"];                
  var Comonad = function (Extend0, extract) {
      this.Extend0 = Extend0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;
  exports["Extend"] = Control_Extend.Extend;
  exports["duplicate"] = Control_Extend.duplicate;
  exports["extend"] = Control_Extend.extend;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];
  var Data_Unit = $PS["Data.Unit"];                
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var lazyUnit = new Lazy(function (v) {
      return Data_Unit.unit;
  });
  var lazyFn = new Lazy(function (f) {
      return function (x) {
          return f(Data_Unit.unit)(x);
      };
  });
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["lazyFn"] = lazyFn;
  exports["lazyUnit"] = lazyUnit;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var HeytingAlgebraRecord = function (conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
      this.conjRecord = conjRecord;
      this.disjRecord = disjRecord;
      this.ffRecord = ffRecord;
      this.impliesRecord = impliesRecord;
      this.notRecord = notRecord;
      this.ttRecord = ttRecord;
  };
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var ttRecord = function (dict) {
      return dict.ttRecord;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var notRecord = function (dict) {
      return dict.notRecord;
  };
  var not = function (dict) {
      return dict.not;
  };
  var impliesRecord = function (dict) {
      return dict.impliesRecord;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return Data_Unit.unit;
  }, Data_Unit.unit);
  var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var heytingAlgebraProxy3 = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  }, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  }, Type_Proxy.Proxy3.value, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy3.value;
      };
  }, function (v) {
      return Type_Proxy.Proxy3.value;
  }, Type_Proxy.Proxy3.value);
  var heytingAlgebraProxy2 = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  }, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  }, Type_Proxy.Proxy2.value, function (v) {
      return function (v1) {
          return Type_Proxy.Proxy2.value;
      };
  }, function (v) {
      return Type_Proxy.Proxy2.value;
  }, Type_Proxy.Proxy2.value);
  var heytingAlgebraProxy = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  }, function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  }, Type_Proxy["Proxy"].value, function (v) {
      return function (v1) {
          return Type_Proxy["Proxy"].value;
      };
  }, function (v) {
      return Type_Proxy["Proxy"].value;
  }, Type_Proxy["Proxy"].value);
  var ffRecord = function (dict) {
      return dict.ffRecord;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disjRecord = function (dict) {
      return dict.disjRecord;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conjRecord = function (dict) {
      return dict.conjRecord;
  };
  var heytingAlgebraRecord = function (dictRowToList) {
      return function (dictHeytingAlgebraRecord) {
          return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value), disjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value), ffRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value), impliesRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value), notRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value), ttRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value));
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  var heytingAlgebraRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictHeytingAlgebraRecord) {
              return function (dictHeytingAlgebra) {
                  return new HeytingAlgebraRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (row) {
                          var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(ff(dictHeytingAlgebra))(tail);
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (row) {
                          var tail = notRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          var get = Record_Unsafe.unsafeGet(key);
                          return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                      };
                  }, function (v) {
                      return function (row) {
                          var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(tt(dictHeytingAlgebra))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["HeytingAlgebraRecord"] = HeytingAlgebraRecord;
  exports["ffRecord"] = ffRecord;
  exports["ttRecord"] = ttRecord;
  exports["impliesRecord"] = impliesRecord;
  exports["conjRecord"] = conjRecord;
  exports["disjRecord"] = disjRecord;
  exports["notRecord"] = notRecord;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraUnit"] = heytingAlgebraUnit;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
  exports["heytingAlgebraProxy"] = heytingAlgebraProxy;
  exports["heytingAlgebraProxy2"] = heytingAlgebraProxy2;
  exports["heytingAlgebraProxy3"] = heytingAlgebraProxy3;
  exports["heytingAlgebraRecord"] = heytingAlgebraRecord;
  exports["heytingAlgebraRecordNil"] = heytingAlgebraRecordNil;
  exports["heytingAlgebraRecordCons"] = heytingAlgebraRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.BooleanAlgebra"] = $PS["Data.BooleanAlgebra"] || {};
  var exports = $PS["Data.BooleanAlgebra"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];                
  var BooleanAlgebraRecord = function (HeytingAlgebraRecord0) {
      this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
  };
  var BooleanAlgebra = function (HeytingAlgebra0) {
      this.HeytingAlgebra0 = HeytingAlgebra0;
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraUnit;
  });
  var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
      return Data_HeytingAlgebra.heytingAlgebraRecordNil;
  });
  var booleanAlgebraRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictBooleanAlgebraRecord) {
              return function (dictBooleanAlgebra) {
                  return new BooleanAlgebraRecord(function () {
                      return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
                  });
              };
          };
      };
  };
  var booleanAlgebraRecord = function (dictRowToList) {
      return function (dictBooleanAlgebraRecord) {
          return new BooleanAlgebra(function () {
              return Data_HeytingAlgebra.heytingAlgebraRecord()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
          });
      };
  };
  var booleanAlgebraProxy3 = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraProxy3;
  });
  var booleanAlgebraProxy2 = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraProxy2;
  });
  var booleanAlgebraProxy = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraProxy;
  });
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraBoolean;
  });
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["BooleanAlgebraRecord"] = BooleanAlgebraRecord;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
  exports["booleanAlgebraRecord"] = booleanAlgebraRecord;
  exports["booleanAlgebraProxy"] = booleanAlgebraProxy;
  exports["booleanAlgebraProxy2"] = booleanAlgebraProxy2;
  exports["booleanAlgebraProxy3"] = booleanAlgebraProxy3;
  exports["booleanAlgebraRecordNil"] = booleanAlgebraRecordNil;
  exports["booleanAlgebraRecordCons"] = booleanAlgebraRecordCons;
  exports["HeytingAlgebra"] = Data_HeytingAlgebra.HeytingAlgebra;
  exports["HeytingAlgebraRecord"] = Data_HeytingAlgebra.HeytingAlgebraRecord;
  exports["conj"] = Data_HeytingAlgebra.conj;
  exports["disj"] = Data_HeytingAlgebra.disj;
  exports["ff"] = Data_HeytingAlgebra.ff;
  exports["implies"] = Data_HeytingAlgebra.implies;
  exports["not"] = Data_HeytingAlgebra.not;
  exports["tt"] = Data_HeytingAlgebra.tt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = $PS["Data.BooleanAlgebra"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];                
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Data_Ring.Ring(function () {
              return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var heytingAlgebraTuple = function (dictHeytingAlgebra) {
      return function (dictHeytingAlgebra1) {
          return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
          }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
      };
  };
  var genericTuple = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, x.value1);
  }, function (x) {
      return new Tuple(x.value0, x.value1);
  });
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Data_Unit.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Data_Unit.unit));
              }));
          });
      };
  };
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var eq1Tuple = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
      });
  };
  var ord1Tuple = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Tuple(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
      });
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var commutativeRingTuple = function (dictCommutativeRing) {
      return function (dictCommutativeRing1) {
          return new Data_CommutativeRing.CommutativeRing(function () {
              return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
          });
      };
  };
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Data_BooleanAlgebra.BooleanAlgebra(function () {
              return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
          });
      };
  };
  var applyTuple = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Control_Bind.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var v1 = f(v.value1);
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyTuple(dictMonoid.Semigroup0());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Control_Monad.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid.Semigroup0());
      });
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["swap"] = swap;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["eq1Tuple"] = eq1Tuple;
  exports["ordTuple"] = ordTuple;
  exports["ord1Tuple"] = ord1Tuple;
  exports["boundedTuple"] = boundedTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["commutativeRingTuple"] = commutativeRingTuple;
  exports["heytingAlgebraTuple"] = heytingAlgebraTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["genericTuple"] = genericTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["applyTuple"] = applyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  var bifunctorTuple = new Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifunctorEither = new Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v(v2.value0));
              };
              if (v2 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifunctorConst = new Bifunctor(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
  exports["bifunctorEither"] = bifunctorEither;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["bifunctorConst"] = bifunctorConst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return dictSemiring;
  };
  var semigroupIdenity = function (dictSemigroup) {
      return dictSemigroup;
  };
  var ringIdentity = function (dictRing) {
      return dictRing;
  };
  var ordIdentity = function (dictOrd) {
      return dictOrd;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidIdentity = function (dictMonoid) {
      return dictMonoid;
  };
  var lazyIdentity = function (dictLazy) {
      return dictLazy;
  };
  var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
      return dictHeytingAlgebra;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var euclideanRingIdentity = function (dictEuclideanRing) {
      return dictEuclideanRing;
  };
  var eqIdentity = function (dictEq) {
      return dictEq;
  };
  var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqIdentity(dictEq));
  });
  var ord1Identity = new Data_Ord.Ord1(function () {
      return eq1Identity;
  }, function (dictOrd) {
      return Data_Ord.compare(ordIdentity(dictOrd));
  });
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var commutativeRingIdentity = function (dictCommutativeRing) {
      return dictCommutativeRing;
  };
  var boundedIdentity = function (dictBounded) {
      return dictBounded;
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return dictBooleanAlgebra;
  };
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  var altIdentity = new Control_Alt.Alt(function () {
      return functorIdentity;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["heytingAlgebraIdentity"] = heytingAlgebraIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["euclideanRingIdentity"] = euclideanRingIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["commutativeRingIdentity"] = commutativeRingIdentity;
  exports["lazyIdentity"] = lazyIdentity;
  exports["showIdentity"] = showIdentity;
  exports["eq1Identity"] = eq1Identity;
  exports["ord1Identity"] = ord1Identity;
  exports["functorIdentity"] = functorIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["altIdentity"] = altIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.newWithSelf = function (f) {
    return function () {
      var ref = { value: null };
      ref.value = f(ref);
      return ref;
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify'"] = modify$prime;
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["newWithSelf"] = $foreign.newWithSelf;
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a,
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a,
                          b: b,
                          c: c
                      });
                  };
              };
          };
      };
  };
  var untilJust = function (dictMonadRec) {
      return function (m) {
          return tailRecM(dictMonadRec)(function (v) {
              return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(m)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return new Loop(Data_Unit.unit);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new Done(v1.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [ v1.constructor.name ]);
              });
          })(Data_Unit.unit);
      };
  };
  var whileJust = function (dictMonoid) {
      return function (dictMonadRec) {
          return function (m) {
              return tailRecM(dictMonadRec)(function (v) {
                  return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(m)(function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Done(v);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [ v1.constructor.name ]);
                  });
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($58) {
          return go(f($58));
      };
  };
  var monadRecMaybe = new MonadRec(function () {
      return Data_Maybe.monadMaybe;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return new Done(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                  return new Done(new Data_Maybe.Just(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      var runIdentity = function (v) {
          return v;
      };
      var $59 = tailRec(function ($61) {
          return runIdentity(f($61));
      });
      return function ($60) {
          return Data_Identity.Identity($59($60));
      };
  });
  var monadRecFunction = new MonadRec(function () {
      return Control_Monad.monadFn;
  }, function (f) {
      return function (a0) {
          return function (e) {
              return tailRec(function (a) {
                  return f(a)(e);
              })(a0);
          };
      };
  });
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v = Effect_Ref.read(r)();
                      if (v instanceof Loop) {
                          var e = f(v.value0)();
                          Effect_Ref.write(e)(r)();
                          return false;
                      };
                      if (v instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
      };
  });
  var functorStep = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Loop) {
              return new Loop(m.value0);
          };
          if (m instanceof Done) {
              return new Done(f(m.value0));
          };
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [ m.constructor.name ]);
      };
  });
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM3"] = tailRecM3;
  exports["forever"] = forever;
  exports["whileJust"] = whileJust;
  exports["untilJust"] = untilJust;
  exports["functorStep"] = functorStep;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEffect"] = monadRecEffect;
  exports["monadRecFunction"] = monadRecFunction;
  exports["monadRecEither"] = monadRecEither;
  exports["monadRecMaybe"] = monadRecMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify"] = modify;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Writer.Class"] = $PS["Control.Monad.Writer.Class"] || {};
  var exports = $PS["Control.Monad.Writer.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var MonadTell = function (Monad1, Semigroup0, tell) {
      this.Monad1 = Monad1;
      this.Semigroup0 = Semigroup0;
      this.tell = tell;
  };
  var MonadWriter = function (MonadTell1, Monoid0, listen, pass) {
      this.MonadTell1 = MonadTell1;
      this.Monoid0 = Monoid0;
      this.listen = listen;
      this.pass = pass;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  var listens = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
              });
          };
      };
  };
  var censor = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(m)(function (a) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())(new Data_Tuple.Tuple(a, f));
              }));
          };
      };
  };
  exports["listen"] = listen;
  exports["pass"] = pass;
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
  exports["MonadWriter"] = MonadWriter;
  exports["listens"] = listens;
  exports["censor"] = censor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.MonadPlus"] = $PS["Control.MonadPlus"] || {};
  var exports = $PS["Control.MonadPlus"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];                
  var MonadPlus = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  });
  exports["MonadPlus"] = MonadPlus;
  exports["monadPlusArray"] = monadPlusArray;
  exports["Alt"] = Control_Alt.Alt;
  exports["alt"] = Control_Alt.alt;
  exports["Alternative"] = Control_Alternative.Alternative;
  exports["guard"] = Control_Alternative.guard;
  exports["Applicative"] = Control_Applicative.Applicative;
  exports["liftA1"] = Control_Applicative.liftA1;
  exports["pure"] = Control_Applicative.pure;
  exports["unless"] = Control_Applicative.unless;
  exports["when"] = Control_Applicative.when;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Bind"] = Control_Bind.Bind;
  exports["bind"] = Control_Bind.bind;
  exports["ifM"] = Control_Bind.ifM;
  exports["join"] = Control_Bind.join;
  exports["Monad"] = Control_Monad.Monad;
  exports["ap"] = Control_Monad.ap;
  exports["liftM1"] = Control_Monad.liftM1;
  exports["MonadZero"] = Control_MonadZero.MonadZero;
  exports["Plus"] = Control_Plus.Plus;
  exports["empty"] = Control_Plus.empty;
  exports["Functor"] = Data_Functor.Functor;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];                
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 43, column 3 - line 43, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };
  var newtypeExceptT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function ($90) {
          return ExceptT($89($90));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var semigroupExceptT = function (dictMonad) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyExceptT(dictMonad))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var monadAskExceptT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadExceptT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderExceptT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskExceptT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadContExceptT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadExceptT(dictMonadCont.Monad0());
      }, function (f) {
          return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var v = f(function (a) {
                  return ExceptT(c(new Data_Either.Right(a)));
              });
              return v;
          }));
      });
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadExceptT(dictMonadEffect.Monad0());
      }, (function () {
          var $95 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
          var $96 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($97) {
              return $95($96($97));
          };
      })());
  };
  var monadRecExceptT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadExceptT(dictMonadRec.Monad0());
      }, function (f) {
          var $98 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
              var v = f(a);
              return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v)(function (m$prime) {
                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                      if (m$prime instanceof Data_Either.Left) {
                          return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                      };
                      if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                          return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                      };
                      if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                          return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 75, column 14 - line 78, column 43): " + [ m$prime.constructor.name ]);
                  })());
              });
          });
          return function ($99) {
              return ExceptT($98($99));
          };
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadTellExceptT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadExceptT(dictMonadTell.Monad1());
      }, dictMonadTell.Semigroup0, (function () {
          var $100 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad1());
          var $101 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function ($102) {
              return $100($101($102));
          };
      })());
  };
  var monadWriterExceptT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellExceptT(dictMonadWriter.MonadTell1());
      }, dictMonadWriter.Monoid0, mapExceptT(function (m) {
          return Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapExceptT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(m)(function (a) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())((function () {
                  if (a instanceof Data_Either.Left) {
                      return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
                  };
                  if (a instanceof Data_Either.Right) {
                      return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 137, column 10 - line 139, column 45): " + [ a.constructor.name ]);
              })());
          }));
      }));
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                  var v1 = k(a);
                  return v1;
              })((function () {
                  var $105 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($106) {
                      return $105(Data_Either.Right.create($106));
                  };
              })()));
          };
      });
  };
  var monoidExceptT = function (dictMonad) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupExceptT(dictMonad)(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(applicativeExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return applicativeExceptT(dictMonad);
          }, function () {
              return plusExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  var monadPlusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadPlus.MonadPlus(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          });
      };
  };
  var monadZeroExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          }, function () {
              return undefined;
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["newtypeExceptT"] = newtypeExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadRecExceptT"] = monadRecExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadPlusExceptT"] = monadPlusExceptT;
  exports["monadZeroExceptT"] = monadZeroExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadContExceptT"] = monadContExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadAskExceptT"] = monadAskExceptT;
  exports["monadReaderExceptT"] = monadReaderExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
  exports["monadTellExceptT"] = monadTellExceptT;
  exports["monadWriterExceptT"] = monadWriterExceptT;
  exports["semigroupExceptT"] = semigroupExceptT;
  exports["monoidExceptT"] = monoidExceptT;
  exports["MonadError"] = Control_Monad_Error_Class.MonadError;
  exports["MonadThrow"] = Control_Monad_Error_Class.MonadThrow;
  exports["catchError"] = Control_Monad_Error_Class.catchError;
  exports["throwError"] = Control_Monad_Error_Class.throwError;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT((function () {
          var $2 = Data_Newtype.unwrap();
          return function ($3) {
              return Data_Identity.Identity(f($2($3)));
          };
      })());
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
  exports["withExcept"] = withExcept;
  exports["MonadError"] = Control_Monad_Error_Class.MonadError;
  exports["catchError"] = Control_Monad_Error_Class.catchError;
  exports["catchJust"] = Control_Monad_Error_Class.catchJust;
  exports["throwError"] = Control_Monad_Error_Class.throwError;
  exports["ExceptT"] = Control_Monad_Except_Trans.ExceptT;
  exports["MonadTrans"] = Control_Monad_Except_Trans.MonadTrans;
  exports["except"] = Control_Monad_Except_Trans.except;
  exports["lift"] = Control_Monad_Except_Trans.lift;
  exports["mapExceptT"] = Control_Monad_Except_Trans.mapExceptT;
  exports["runExceptT"] = Control_Monad_Except_Trans.runExceptT;
  exports["withExceptT"] = Control_Monad_Except_Trans.withExceptT;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  exports.stringifyWithIndent = function (i) {
    return function (j) {
      return JSON.stringify(j, null, i);
    };
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };

  exports._compare = function _compare(EQ, GT, LT, a, b) {
    if (a == null) {
      if (b == null) return EQ;
      else return LT;
    } else if (typeof a === "boolean") {
      if (typeof b === "boolean") {
        // boolean / boolean
        if (a === b) return EQ;
        else if (a === false) return LT;
        else return GT;
      } else if (b == null) return GT;
      else return LT;
    } else if (typeof a === "number") {
      if (typeof b === "number") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else return LT;
    } else if (typeof a === "string") {
      if (typeof b === "string") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else return LT;
    } else if (isArray(a)) {
      if (isArray(b)) {
        for (var i = 0; i < Math.min(a.length, b.length); i++) {
          var ca = _compare(EQ, GT, LT, a[i], b[i]);
          if (ca !== EQ) return ca;
        }
        if (a.length === b.length) return EQ;
        else if (a.length < b.length) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else return LT;
    } else {
      if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else if (isArray(b)) return GT;
      else {
        var akeys = Object.keys(a);
        var bkeys = Object.keys(b);
        if (akeys.length < bkeys.length) return LT;
        else if (akeys.length > bkeys.length) return GT;
        var keys = akeys.concat(bkeys).sort();
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          if (a[k] === undefined) return LT;
          else if (b[k] === undefined) return GT;
          var ck = _compare(EQ, GT, LT, a[k], b[k]);
          if (ck !== EQ) return ck;
        }
        return EQ;
      }
    }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._foldSCObject = function (m, z, f, fromMaybe) {
    var acc = z;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        var maybeR = f(acc)(k)(m[k]);
        var r = fromMaybe(null)(maybeR);
        if (r === null) return acc;
        else acc = r;
      }
    }
    return acc;
  };

  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        ++s;
      }
    }
    return s;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  exports._lookupST = function (no, yes, k, m) {
    return function () {
      return k in m ? yes(m[k]) : no;
    };
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.run = function (f) {
    return f();
  };

  exports["while"] = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
      };
    };
  };

  exports["for"] = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadST;
  }, function (f) {
      return function (a) {
          var isLooping = function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return true;
              };
              return false;
          };
          var fromDone = function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 69, column 32 - line 69, column 46): " + [ v.constructor.name ]);
          };
          return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (r) {
              return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function (v) {
                  if (v instanceof Control_Monad_Rec_Class.Loop) {
                      return Control_Bind.bind(bindST)(f(v.value0))(function (e) {
                          return Data_Functor["void"](functorST)($foreign.write(e)(r));
                      });
                  };
                  if (v instanceof Control_Monad_Rec_Class.Done) {
                      return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 61, column 18 - line 65, column 28): " + [ v.constructor.name ]);
              })))(function () {
                  return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
              });
          });
      };
  });
  exports["modify'"] = modify$prime;
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["monadRecST"] = monadRecST;
  exports["run"] = $foreign.run;
  exports["while"] = $foreign["while"];
  exports["for"] = $foreign["for"];
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findMapImpl = function (nothing) {
    return function (isJust) {
      return function (f) {
        return function (xs) {
          for (var i = 0; i < xs.length; i++) {
            var result = f(xs[i]);
            if (isJust(result)) return result;
          }
          return nothing;
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  exports.scanl = function (f) {
    return function (b) {
      return function (xs) {
        var len = xs.length;
        var acc = b;
        var out = new Array(len);
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
          out[i] = acc;
        }
        return out;
      };
    };
  };

  exports.scanr = function (f) {
    return function (b) {
      return function (xs) {
        var len = xs.length;
        var acc = b;
        var out = new Array(len);
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
          out[i] = acc;
        }
        return out;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };

  exports.all = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (!p(xs[i])) return false;
      }
      return true;
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (i) {
        return function (xs) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.popImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function () {
          return xs.length > 0 ? just(xs.pop()) : nothing;
        };
      };
    };
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.shiftImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function () {
          return xs.length > 0 ? just(xs.shift()) : nothing;
        };
      };
    };
  };

  exports.unshiftAll = function (as) {
    return function (xs) {
      return function () {
        return xs.unshift.apply(xs, as);
      };
    };
  };

  exports.splice = function (i) {
    return function (howMany) {
      return function (bs) {
        return function (xs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }

  exports.freeze = copyImpl;

  exports.thaw = copyImpl;

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          return function () {
            if (xs.length < 2) return xs;

            mergeFromTo(compare, fromOrdering, xs, xs.slice(0), 0, xs.length);

            return xs;
          };
        };
      };
    };
  })();

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var unshift = function (a) {
      return $foreign.unshiftAll([ a ]);
  };
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array.ST (line 113, column 31 - line 116, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return sortBy(Data_Ord.compare(dictOrd));
  };
  var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var run = function (st) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modify = function (i) {
      return function (f) {
          return function (xs) {
              return function __do() {
                  var entry = peek(i)(xs)();
                  if (entry instanceof Data_Maybe.Just) {
                      return $foreign.poke(i)(f(entry.value0))(xs)();
                  };
                  if (entry instanceof Data_Maybe.Nothing) {
                      return false;
                  };
                  throw new Error("Failed pattern match at Data.Array.ST (line 198, column 3 - line 200, column 26): " + [ entry.constructor.name ]);
              };
          };
      };
  };
  var empty = function (dictWarn) {
      return $foreign["new"];
  };
  exports["run"] = run;
  exports["withArray"] = withArray;
  exports["empty"] = empty;
  exports["peek"] = peek;
  exports["modify"] = modify;
  exports["pop"] = pop;
  exports["push"] = push;
  exports["shift"] = shift;
  exports["unshift"] = unshift;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["pushAll"] = $foreign.pushAll;
  exports["unshiftAll"] = $foreign.unshiftAll;
  exports["splice"] = $foreign.splice;
  exports["freeze"] = $foreign.freeze;
  exports["thaw"] = $foreign.thaw;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
  exports["toAssocArray"] = $foreign.toAssocArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };
  var pushAll = pushWhile(Data_Function["const"](true));
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  var exhausted = (function () {
      var $13 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
      return function ($14) {
          return $13(peek($14));
      };
  })();
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["exhausted"] = exhausted;
  exports["pushWhile"] = pushWhile;
  exports["pushAll"] = pushAll;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Coproduct"] = $PS["Data.Functor.Coproduct"] || {};
  var exports = $PS["Data.Functor.Coproduct"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Coproduct = function (x) {
      return x;
  };
  var showCoproduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Data_Either.Left) {
                  return "(left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Data_Either.Right) {
                  return "(right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Functor.Coproduct (line 63, column 1 - line 65, column 60): " + [ v.constructor.name ]);
          });
      };
  };
  var right = function (ga) {
      return new Data_Either.Right(ga);
  };
  var newtypeCoproduct = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var left = function (fa) {
      return new Data_Either.Left(fa);
  };
  var functorCoproduct = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
              };
          });
      };
  };
  var eq1Coproduct = function (dictEq1) {
      return function (dictEq11) {
          return new Data_Eq.Eq1(function (dictEq) {
              return function (v) {
                  return function (v1) {
                      if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                          return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0);
                      };
                      if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                          return Data_Eq.eq1(dictEq11)(dictEq)(v.value0)(v1.value0);
                      };
                      return false;
                  };
              };
          });
      };
  };
  var eqCoproduct = function (dictEq1) {
      return function (dictEq11) {
          return function (dictEq) {
              return new Data_Eq.Eq(Data_Eq.eq1(eq1Coproduct(dictEq1)(dictEq11))(dictEq));
          };
      };
  };
  var ord1Coproduct = function (dictOrd1) {
      return function (dictOrd11) {
          return new Data_Ord.Ord1(function () {
              return eq1Coproduct(dictOrd1.Eq10())(dictOrd11.Eq10());
          }, function (dictOrd) {
              return function (v) {
                  return function (v1) {
                      if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                          return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                      };
                      if (v instanceof Data_Either.Left) {
                          return Data_Ordering.LT.value;
                      };
                      if (v1 instanceof Data_Either.Left) {
                          return Data_Ordering.GT.value;
                      };
                      if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                          return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value0)(v1.value0);
                      };
                      throw new Error("Failed pattern match at Data.Functor.Coproduct (line 57, column 5 - line 61, column 43): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          });
      };
  };
  var ordCoproduct = function (dictOrd1) {
      return function (dictOrd11) {
          return function (dictOrd) {
              return new Data_Ord.Ord(function () {
                  return eqCoproduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }, Data_Ord.compare1(ord1Coproduct(dictOrd1)(dictOrd11))(dictOrd));
          };
      };
  };
  var coproduct = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Data_Either.Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Functor.Coproduct (line 27, column 1 - line 27, column 78): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var extendCoproduct = function (dictExtend) {
      return function (dictExtend1) {
          return new Control_Extend.Extend(function () {
              return functorCoproduct(dictExtend.Functor0())(dictExtend1.Functor0());
          }, function (f) {
              var $61 = coproduct((function () {
                  var $63 = Control_Extend.extend(dictExtend)(function ($65) {
                      return f(Coproduct(Data_Either.Left.create($65)));
                  });
                  return function ($64) {
                      return Data_Either.Left.create($63($64));
                  };
              })())((function () {
                  var $66 = Control_Extend.extend(dictExtend1)(function ($68) {
                      return f(Coproduct(Data_Either.Right.create($68)));
                  });
                  return function ($67) {
                      return Data_Either.Right.create($66($67));
                  };
              })());
              return function ($62) {
                  return Coproduct($61($62));
              };
          });
      };
  };
  var comonadCoproduct = function (dictComonad) {
      return function (dictComonad1) {
          return new Control_Comonad.Comonad(function () {
              return extendCoproduct(dictComonad.Extend0())(dictComonad1.Extend0());
          }, coproduct(Control_Comonad.extract(dictComonad))(Control_Comonad.extract(dictComonad1)));
      };
  };
  var bihoistCoproduct = function (natF) {
      return function (natG) {
          return function (v) {
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(natF)(natG)(v);
          };
      };
  };
  exports["Coproduct"] = Coproduct;
  exports["left"] = left;
  exports["right"] = right;
  exports["coproduct"] = coproduct;
  exports["bihoistCoproduct"] = bihoistCoproduct;
  exports["newtypeCoproduct"] = newtypeCoproduct;
  exports["eqCoproduct"] = eqCoproduct;
  exports["eq1Coproduct"] = eq1Coproduct;
  exports["ordCoproduct"] = ordCoproduct;
  exports["ord1Coproduct"] = ord1Coproduct;
  exports["showCoproduct"] = showCoproduct;
  exports["functorCoproduct"] = functorCoproduct;
  exports["extendCoproduct"] = extendCoproduct;
  exports["comonadCoproduct"] = comonadCoproduct;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var ordFirst = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1First = Data_Maybe.ord1Maybe;
  var newtypeFirst = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var monadFirst = Data_Maybe.monadMaybe;
  var invariantFirst = Data_Maybe.invariantMaybe;
  var functorFirst = Data_Maybe.functorMaybe;
  var extendFirst = Data_Maybe.extendMaybe;
  var eqFirst = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1First = Data_Maybe.eq1Maybe;
  var boundedFirst = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindFirst = Data_Maybe.bindMaybe;
  var applyFirst = Data_Maybe.applyMaybe;
  var applicativeFirst = Data_Maybe.applicativeMaybe;
  var altFirst = new Control_Alt.Alt(function () {
      return functorFirst;
  }, Data_Semigroup.append(semigroupFirst));
  var plusFirst = new Control_Plus.Plus(function () {
      return altFirst;
  }, Data_Monoid.mempty(monoidFirst));
  var alternativeFirst = new Control_Alternative.Alternative(function () {
      return applicativeFirst;
  }, function () {
      return plusFirst;
  });
  var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
      return alternativeFirst;
  }, function () {
      return monadFirst;
  }, function () {
      return undefined;
  });
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["eqFirst"] = eqFirst;
  exports["eq1First"] = eq1First;
  exports["ordFirst"] = ordFirst;
  exports["ord1First"] = ord1First;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
  exports["altFirst"] = altFirst;
  exports["plusFirst"] = plusFirst;
  exports["alternativeFirst"] = alternativeFirst;
  exports["monadZeroFirst"] = monadZeroFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];                
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return dictOrd;
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var functorConj = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqConj = function (dictEq) {
      return dictEq;
  };
  var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqConj(dictEq));
  });
  var ord1Conj = new Data_Ord.Ord1(function () {
      return eq1Conj;
  }, function (dictOrd) {
      return Data_Ord.compare(ordConj(dictOrd));
  });
  var boundedConj = function (dictBounded) {
      return dictBounded;
  };
  var applyConj = new Control_Apply.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Control_Bind.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Control_Applicative.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Control_Monad.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["eqConj"] = eqConj;
  exports["eq1Conj"] = eq1Conj;
  exports["ordConj"] = ordConj;
  exports["ord1Conj"] = ord1Conj;
  exports["boundedConj"] = boundedConj;
  exports["showConj"] = showConj;
  exports["functorConj"] = functorConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];                
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return dictOrd;
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var functorDisj = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqDisj = function (dictEq) {
      return dictEq;
  };
  var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqDisj(dictEq));
  });
  var ord1Disj = new Data_Ord.Ord1(function () {
      return eq1Disj;
  }, function (dictOrd) {
      return Data_Ord.compare(ordDisj(dictOrd));
  });
  var boundedDisj = function (dictBounded) {
      return dictBounded;
  };
  var applyDisj = new Control_Apply.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Control_Bind.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Control_Applicative.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Control_Monad.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["eqDisj"] = eqDisj;
  exports["eq1Disj"] = eq1Disj;
  exports["ordDisj"] = ordDisj;
  exports["ord1Disj"] = ord1Disj;
  exports["boundedDisj"] = boundedDisj;
  exports["showDisj"] = showDisj;
  exports["functorDisj"] = functorDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Dual"] = $PS["Data.Monoid.Dual"] || {};
  var exports = $PS["Data.Monoid.Dual"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return dictOrd;
  };
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid.Semigroup0());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var functorDual = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqDual = function (dictEq) {
      return dictEq;
  };
  var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqDual(dictEq));
  });
  var ord1Dual = new Data_Ord.Ord1(function () {
      return eq1Dual;
  }, function (dictOrd) {
      return Data_Ord.compare(ordDual(dictOrd));
  });
  var boundedDual = function (dictBounded) {
      return dictBounded;
  };
  var applyDual = new Control_Apply.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Control_Bind.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Control_Applicative.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Control_Monad.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["eqDual"] = eqDual;
  exports["eq1Dual"] = eq1Dual;
  exports["ordDual"] = ordDual;
  exports["ord1Dual"] = ord1Dual;
  exports["boundedDual"] = boundedDual;
  exports["showDual"] = showDual;
  exports["functorDual"] = functorDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Endo"] = $PS["Data.Monoid.Endo"] || {};
  var exports = $PS["Data.Monoid.Endo"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Endo = function (x) {
      return x;
  };
  var showEndo = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupEndo = function (dictSemigroupoid) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
      });
  };
  var ordEndo = function (dictOrd) {
      return dictOrd;
  };
  var monoidEndo = function (dictCategory) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEndo(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  var eqEndo = function (dictEq) {
      return dictEq;
  };
  var boundedEndo = function (dictBounded) {
      return dictBounded;
  };
  exports["Endo"] = Endo;
  exports["eqEndo"] = eqEndo;
  exports["ordEndo"] = ordEndo;
  exports["boundedEndo"] = boundedEndo;
  exports["showEndo"] = showEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = $PS["Data.Monoid.Endo"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var indexr = function (dictFoldable) {
      return function (idx) {
          var go = function (a) {
              return function (cursor) {
                  if (cursor.elem instanceof Data_Maybe.Just) {
                      return cursor;
                  };
                  var $150 = cursor.pos === idx;
                  if ($150) {
                      return {
                          elem: new Data_Maybe.Just(a),
                          pos: cursor.pos
                      };
                  };
                  return {
                      pos: cursor.pos + 1 | 0,
                      elem: cursor.elem
                  };
              };
          };
          var $307 = foldr(dictFoldable)(go)({
              elem: Data_Maybe.Nothing.value,
              pos: 0
          });
          return function ($308) {
              return (function (v) {
                  return v.elem;
              })($307($308));
          };
      };
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var oneOfMap = function (dictFoldable) {
      return function (dictPlus) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $309 = Control_Alt.alt(dictPlus.Alt0());
                  return function ($310) {
                      return $309(f($310));
                  };
              })())(Control_Plus.empty(dictPlus));
          };
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var indexl = function (dictFoldable) {
      return function (idx) {
          var go = function (cursor) {
              return function (a) {
                  if (cursor.elem instanceof Data_Maybe.Just) {
                      return cursor;
                  };
                  var $153 = cursor.pos === idx;
                  if ($153) {
                      return {
                          elem: new Data_Maybe.Just(a),
                          pos: cursor.pos
                      };
                  };
                  return {
                      pos: cursor.pos + 1 | 0,
                      elem: cursor.elem
                  };
              };
          };
          var $313 = foldl(dictFoldable)(go)({
              elem: Data_Maybe.Nothing.value,
              pos: 0
          });
          return function ($314) {
              return (function (v) {
                  return v.elem;
              })($313($314));
          };
      };
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $160 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($160) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $164 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($164) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 454, column 3 - line 454, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableTuple = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableIdentity = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableEither = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Either.Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return z;
              };
              if (v1 instanceof Data_Either.Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return z;
              };
              if (v1 instanceof Data_Either.Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConst = new Foldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return Data_Monoid.mempty(dictMonoid);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableApp = function (dictFoldable) {
      return new Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return foldMap(dictFoldable)(dictMonoid)(f)(v);
              };
          };
      }, function (f) {
          return function (i) {
              return function (v) {
                  return foldl(dictFoldable)(f)(i)(v);
              };
          };
      }, function (f) {
          return function (i) {
              return function (v) {
                  return foldr(dictFoldable)(f)(i)(v);
              };
          };
      });
  };
  var foldableCompose = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Foldable(function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return foldMap(dictFoldable)(dictMonoid)(foldMap(dictFoldable1)(dictMonoid)(f))(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return foldl(dictFoldable)(foldl(dictFoldable1)(f))(i)(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return foldr(dictFoldable)(Data_Function.flip(foldr(dictFoldable1)(f)))(i)(v);
                  };
              };
          });
      };
  };
  var foldableCoproduct = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Foldable(function (dictMonoid) {
              return function (f) {
                  return Data_Functor_Coproduct.coproduct(foldMap(dictFoldable)(dictMonoid)(f))(foldMap(dictFoldable1)(dictMonoid)(f));
              };
          }, function (f) {
              return function (z) {
                  return Data_Functor_Coproduct.coproduct(foldl(dictFoldable)(f)(z))(foldl(dictFoldable1)(f)(z));
              };
          }, function (f) {
              return function (z) {
                  return Data_Functor_Coproduct.coproduct(foldr(dictFoldable)(f)(z))(foldr(dictFoldable1)(f)(z));
              };
          });
      };
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableProduct = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Foldable(function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(foldMap(dictFoldable)(dictMonoid)(f)(v.value0))(foldMap(dictFoldable1)(dictMonoid)(f)(v.value1));
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return foldl(dictFoldable1)(f)(foldl(dictFoldable)(f)(z)(v.value0))(v.value1);
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return foldr(dictFoldable)(f)(foldr(dictFoldable1)(f)(z)(v.value1))(v.value0);
                  };
              };
          });
      };
  };
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                      var $315 = Data_Function.flip(c);
                      return function ($316) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($315($316)));
                      };
                  })())(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($317) {
                      return Data_Monoid_Endo.Endo(c($317));
                  })(xs))(u);
              };
          };
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              var $318 = Data_Newtype.unwrap();
              var $319 = foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                  var $300 = Data_Eq.eq(dictEq)(a)(v.value0);
                  if ($300) {
                      return new Data_Maybe.Just(v.value1);
                  };
                  return Data_Maybe.Nothing.value;
              });
              return function ($320) {
                  return $318($319($320));
              };
          };
      };
  };
  var surroundMap = function (dictFoldable) {
      return function (dictSemigroup) {
          return function (d) {
              return function (t) {
                  return function (f) {
                      var joined = function (a) {
                          return function (m) {
                              return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                          };
                      };
                      return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                  };
              };
          };
      };
  };
  var surround = function (dictFoldable) {
      return function (dictSemigroup) {
          return function (d) {
              return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
          };
      };
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (b0) {
                  return foldl(dictFoldable)(function (b) {
                      return function (a) {
                          return Control_Bind.bind(dictMonad.Bind1())(b)(Data_Function.flip(f)(a));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(b0));
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var findMap = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return p(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $321 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $322 = Data_Eq.eq(dictEq);
          return function ($323) {
              return $321($322($323));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $324 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $325 = elem(dictFoldable)(dictEq)(x);
              return function ($326) {
                  return $324($325($326));
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldrDefault"] = foldrDefault;
  exports["foldlDefault"] = foldlDefault;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["oneOf"] = oneOf;
  exports["oneOfMap"] = oneOfMap;
  exports["intercalate"] = intercalate;
  exports["surroundMap"] = surroundMap;
  exports["surround"] = surround;
  exports["and"] = and;
  exports["or"] = or;
  exports["all"] = all;
  exports["any"] = any;
  exports["sum"] = sum;
  exports["product"] = product;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["indexl"] = indexl;
  exports["indexr"] = indexr;
  exports["find"] = find;
  exports["findMap"] = findMap;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["lookup"] = lookup;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;
  exports["foldableEither"] = foldableEither;
  exports["foldableTuple"] = foldableTuple;
  exports["foldableIdentity"] = foldableIdentity;
  exports["foldableConst"] = foldableConst;
  exports["foldableProduct"] = foldableProduct;
  exports["foldableCoproduct"] = foldableCoproduct;
  exports["foldableCompose"] = foldableCompose;
  exports["foldableApp"] = foldableApp;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Const"] = $PS["Data.Const"] || {};
  var exports = $PS["Data.Const"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Const = function (x) {
      return x;
  };
  var showConst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Const " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConst = function (dictSemiring) {
      return dictSemiring;
  };
  var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var semigroupConst = function (dictSemigroup) {
      return dictSemigroup;
  };
  var ringConst = function (dictRing) {
      return dictRing;
  };
  var ordConst = function (dictOrd) {
      return dictOrd;
  };
  var newtypeConst = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidConst = function (dictMonoid) {
      return dictMonoid;
  };
  var heytingAlgebraConst = function (dictHeytingAlgebra) {
      return dictHeytingAlgebra;
  };
  var functorConst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
  var euclideanRingConst = function (dictEuclideanRing) {
      return dictEuclideanRing;
  };
  var eqConst = function (dictEq) {
      return dictEq;
  };
  var eq1Const = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqConst(dictEq));
      });
  };
  var ord1Const = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Const(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordConst(dictOrd));
      });
  };
  var commutativeRingConst = function (dictCommutativeRing) {
      return dictCommutativeRing;
  };
  var boundedConst = function (dictBounded) {
      return dictBounded;
  };
  var booleanAlgebraConst = function (dictBooleanAlgebra) {
      return dictBooleanAlgebra;
  };
  var applyConst = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyConst(dictMonoid.Semigroup0());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["newtypeConst"] = newtypeConst;
  exports["eqConst"] = eqConst;
  exports["eq1Const"] = eq1Const;
  exports["ordConst"] = ordConst;
  exports["ord1Const"] = ord1Const;
  exports["boundedConst"] = boundedConst;
  exports["showConst"] = showConst;
  exports["semigroupoidConst"] = semigroupoidConst;
  exports["semigroupConst"] = semigroupConst;
  exports["monoidConst"] = monoidConst;
  exports["semiringConst"] = semiringConst;
  exports["ringConst"] = ringConst;
  exports["euclideanRingConst"] = euclideanRingConst;
  exports["commutativeRingConst"] = commutativeRingConst;
  exports["heytingAlgebraConst"] = heytingAlgebraConst;
  exports["booleanAlgebraConst"] = booleanAlgebraConst;
  exports["functorConst"] = functorConst;
  exports["invariantConst"] = invariantConst;
  exports["applyConst"] = applyConst;
  exports["applicativeConst"] = applicativeConst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.App"] = $PS["Data.Functor.App"] || {};
  var exports = $PS["Data.Functor.App"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var App = function (x) {
      return x;
  };
  var showApp = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(App " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupApp = function (dictApply) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
              };
          });
      };
  };
  var plusApp = function (dictPlus) {
      return dictPlus;
  };
  var newtypeApp = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidApp = function (dictApplicative) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var monadPlusApp = function (dictMonadPlus) {
      return dictMonadPlus;
  };
  var monadApp = function (dictMonad) {
      return dictMonad;
  };
  var lazyApp = function (dictLazy) {
      return dictLazy;
  };
  var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
  var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
  var hoistApp = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorApp = function (dictFunctor) {
      return dictFunctor;
  };
  var extendApp = function (dictExtend) {
      return dictExtend;
  };
  var eqApp = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
              };
          });
      };
  };
  var ordApp = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
          }, function (x) {
              return function (y) {
                  return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
              };
          });
      };
  };
  var eq1App = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return Data_Eq.eq(eqApp(dictEq1)(dictEq));
      });
  };
  var ord1App = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1App(dictOrd1.Eq10());
      }, function (dictOrd) {
          return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
      });
  };
  var comonadApp = function (dictComonad) {
      return dictComonad;
  };
  var bindApp = function (dictBind) {
      return dictBind;
  };
  var applyApp = function (dictApply) {
      return dictApply;
  };
  var applicativeApp = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeApp = function (dictAlternative) {
      return dictAlternative;
  };
  var monadZeroApp = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeApp(dictMonadZero.Alternative1());
      }, function () {
          return monadApp(dictMonadZero.Monad0());
      }, function () {
          return undefined;
      });
  };
  var altApp = function (dictAlt) {
      return dictAlt;
  };
  exports["App"] = App;
  exports["hoistApp"] = hoistApp;
  exports["hoistLiftApp"] = hoistLiftApp;
  exports["hoistLowerApp"] = hoistLowerApp;
  exports["newtypeApp"] = newtypeApp;
  exports["eqApp"] = eqApp;
  exports["eq1App"] = eq1App;
  exports["ordApp"] = ordApp;
  exports["ord1App"] = ord1App;
  exports["showApp"] = showApp;
  exports["semigroupApp"] = semigroupApp;
  exports["monoidApp"] = monoidApp;
  exports["monadZeroApp"] = monadZeroApp;
  exports["functorApp"] = functorApp;
  exports["applyApp"] = applyApp;
  exports["applicativeApp"] = applicativeApp;
  exports["bindApp"] = bindApp;
  exports["monadApp"] = monadApp;
  exports["altApp"] = altApp;
  exports["plusApp"] = plusApp;
  exports["alternativeApp"] = alternativeApp;
  exports["monadPlusApp"] = monadPlusApp;
  exports["lazyApp"] = lazyApp;
  exports["extendApp"] = extendApp;
  exports["comonadApp"] = comonadApp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Compose"] = $PS["Data.Functor.Compose"] || {};
  var exports = $PS["Data.Functor.Compose"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_App = $PS["Data.Functor.App"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var Compose = function (x) {
      return x;
  };
  var showCompose = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var newtypeCompose = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorCompose = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
              };
          });
      };
  };
  var eqCompose = function (dictEq1) {
      return function (dictEq11) {
          return function (dictEq) {
              return new Data_Eq.Eq(function (v) {
                  return function (v1) {
                      return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                  };
              });
          };
      };
  };
  var ordCompose = function (dictOrd1) {
      return function (dictOrd11) {
          return function (dictOrd) {
              return new Data_Ord.Ord(function () {
                  return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }, function (v) {
                  return function (v1) {
                      return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                  };
              });
          };
      };
  };
  var eq1Compose = function (dictEq1) {
      return function (dictEq11) {
          return new Data_Eq.Eq1(function (dictEq) {
              return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
          });
      };
  };
  var ord1Compose = function (dictOrd1) {
      return function (dictOrd11) {
          return new Data_Ord.Ord1(function () {
              return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
          }, function (dictOrd) {
              return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
          });
      };
  };
  var bihoistCompose = function (dictFunctor) {
      return function (natF) {
          return function (natG) {
              return function (v) {
                  return natF(Data_Functor.map(dictFunctor)(natG)(v));
              };
          };
      };
  };
  var applyCompose = function (dictApply) {
      return function (dictApply1) {
          return new Control_Apply.Apply(function () {
              return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
          }, function (v) {
              return function (v1) {
                  return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
              };
          });
      };
  };
  var applicativeCompose = function (dictApplicative) {
      return function (dictApplicative1) {
          return new Control_Applicative.Applicative(function () {
              return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }, (function () {
              var $51 = Control_Applicative.pure(dictApplicative);
              var $52 = Control_Applicative.pure(dictApplicative1);
              return function ($53) {
                  return Compose($51($52($53)));
              };
          })());
      };
  };
  var altCompose = function (dictAlt) {
      return function (dictFunctor) {
          return new Control_Alt.Alt(function () {
              return functorCompose(dictAlt.Functor0())(dictFunctor);
          }, function (v) {
              return function (v1) {
                  return Compose(Control_Alt.alt(dictAlt)(v)(v1));
              };
          });
      };
  };
  var plusCompose = function (dictPlus) {
      return function (dictFunctor) {
          return new Control_Plus.Plus(function () {
              return altCompose(dictPlus.Alt0())(dictFunctor);
          }, Control_Plus.empty(dictPlus));
      };
  };
  var alternativeCompose = function (dictAlternative) {
      return function (dictApplicative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
          }, function () {
              return plusCompose(dictAlternative.Plus1())((dictApplicative.Apply0()).Functor0());
          });
      };
  };
  exports["Compose"] = Compose;
  exports["bihoistCompose"] = bihoistCompose;
  exports["newtypeCompose"] = newtypeCompose;
  exports["eqCompose"] = eqCompose;
  exports["eq1Compose"] = eq1Compose;
  exports["ordCompose"] = ordCompose;
  exports["ord1Compose"] = ord1Compose;
  exports["showCompose"] = showCompose;
  exports["functorCompose"] = functorCompose;
  exports["applyCompose"] = applyCompose;
  exports["applicativeCompose"] = applicativeCompose;
  exports["altCompose"] = altCompose;
  exports["plusCompose"] = plusCompose;
  exports["alternativeCompose"] = alternativeCompose;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Product"] = $PS["Data.Functor.Product"] || {};
  var exports = $PS["Data.Functor.Product"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Product = function (x) {
      return x;
  };
  var showProduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var product = function (fa) {
      return function (ga) {
          return new Data_Tuple.Tuple(fa, ga);
      };
  };
  var newtypeProduct = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorProduct = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
              };
          });
      };
  };
  var eq1Product = function (dictEq1) {
      return function (dictEq11) {
          return new Data_Eq.Eq1(function (dictEq) {
              return function (v) {
                  return function (v1) {
                      return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq11)(dictEq)(v.value1)(v1.value1);
                  };
              };
          });
      };
  };
  var eqProduct = function (dictEq1) {
      return function (dictEq11) {
          return function (dictEq) {
              return new Data_Eq.Eq(Data_Eq.eq1(eq1Product(dictEq1)(dictEq11))(dictEq));
          };
      };
  };
  var ord1Product = function (dictOrd1) {
      return function (dictOrd11) {
          return new Data_Ord.Ord1(function () {
              return eq1Product(dictOrd1.Eq10())(dictOrd11.Eq10());
          }, function (dictOrd) {
              return function (v) {
                  return function (v1) {
                      var v2 = Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                      if (v2 instanceof Data_Ordering.EQ) {
                          return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value1)(v1.value1);
                      };
                      return v2;
                  };
              };
          });
      };
  };
  var ordProduct = function (dictOrd1) {
      return function (dictOrd11) {
          return function (dictOrd) {
              return new Data_Ord.Ord(function () {
                  return eqProduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }, Data_Ord.compare1(ord1Product(dictOrd1)(dictOrd11))(dictOrd));
          };
      };
  };
  var bihoistProduct = function (natF) {
      return function (natG) {
          return function (v) {
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(natF)(natG)(v);
          };
      };
  };
  var applyProduct = function (dictApply) {
      return function (dictApply1) {
          return new Control_Apply.Apply(function () {
              return functorProduct(dictApply.Functor0())(dictApply1.Functor0());
          }, function (v) {
              return function (v1) {
                  return product(Control_Apply.apply(dictApply)(v.value0)(v1.value0))(Control_Apply.apply(dictApply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var bindProduct = function (dictBind) {
      return function (dictBind1) {
          return new Control_Bind.Bind(function () {
              return applyProduct(dictBind.Apply0())(dictBind1.Apply0());
          }, function (v) {
              return function (f) {
                  return product(Control_Bind.bind(dictBind)(v.value0)((function () {
                      var $67 = Data_Newtype.unwrap();
                      return function ($68) {
                          return Data_Tuple.fst($67(f($68)));
                      };
                  })()))(Control_Bind.bind(dictBind1)(v.value1)((function () {
                      var $69 = Data_Newtype.unwrap();
                      return function ($70) {
                          return Data_Tuple.snd($69(f($70)));
                      };
                  })()));
              };
          });
      };
  };
  var applicativeProduct = function (dictApplicative) {
      return function (dictApplicative1) {
          return new Control_Applicative.Applicative(function () {
              return applyProduct(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }, function (a) {
              return product(Control_Applicative.pure(dictApplicative)(a))(Control_Applicative.pure(dictApplicative1)(a));
          });
      };
  };
  var monadProduct = function (dictMonad) {
      return function (dictMonad1) {
          return new Control_Monad.Monad(function () {
              return applicativeProduct(dictMonad.Applicative0())(dictMonad1.Applicative0());
          }, function () {
              return bindProduct(dictMonad.Bind1())(dictMonad1.Bind1());
          });
      };
  };
  exports["Product"] = Product;
  exports["product"] = product;
  exports["bihoistProduct"] = bihoistProduct;
  exports["newtypeProduct"] = newtypeProduct;
  exports["eqProduct"] = eqProduct;
  exports["eq1Product"] = eq1Product;
  exports["ordProduct"] = ordProduct;
  exports["ord1Product"] = ord1Product;
  exports["showProduct"] = showProduct;
  exports["functorProduct"] = functorProduct;
  exports["applyProduct"] = applyProduct;
  exports["applicativeProduct"] = applicativeProduct;
  exports["bindProduct"] = bindProduct;
  exports["monadProduct"] = monadProduct;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe.Last"] = $PS["Data.Maybe.Last"] || {};
  var exports = $PS["Data.Maybe.Last"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordLast = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1Last = Data_Maybe.ord1Maybe;
  var newtypeLast = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var monadLast = Data_Maybe.monadMaybe;
  var invariantLast = Data_Maybe.invariantMaybe;
  var functorLast = Data_Maybe.functorMaybe;
  var extendLast = Data_Maybe.extendMaybe;
  var eqLast = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1Last = Data_Maybe.eq1Maybe;
  var boundedLast = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindLast = Data_Maybe.bindMaybe;
  var applyLast = Data_Maybe.applyMaybe;
  var applicativeLast = Data_Maybe.applicativeMaybe;
  var altLast = new Control_Alt.Alt(function () {
      return functorLast;
  }, Data_Semigroup.append(semigroupLast));
  var plusLast = new Control_Plus.Plus(function () {
      return altLast;
  }, Data_Monoid.mempty(monoidLast));
  var alternativeLast = new Control_Alternative.Alternative(function () {
      return applicativeLast;
  }, function () {
      return plusLast;
  });
  var monadZeroLast = new Control_MonadZero.MonadZero(function () {
      return alternativeLast;
  }, function () {
      return monadLast;
  }, function () {
      return undefined;
  });
  exports["Last"] = Last;
  exports["newtypeLast"] = newtypeLast;
  exports["eqLast"] = eqLast;
  exports["eq1Last"] = eq1Last;
  exports["ordLast"] = ordLast;
  exports["ord1Last"] = ord1Last;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["invariantLast"] = invariantLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;
  exports["altLast"] = altLast;
  exports["plusLast"] = plusLast;
  exports["alternativeLast"] = alternativeLast;
  exports["monadZeroLast"] = monadZeroLast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Additive"] = $PS["Data.Monoid.Additive"] || {};
  var exports = $PS["Data.Monoid.Additive"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];                
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return dictOrd;
  };
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Data_Semiring.zero(dictSemiring));
  };
  var functorAdditive = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqAdditive = function (dictEq) {
      return dictEq;
  };
  var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqAdditive(dictEq));
  });
  var ord1Additive = new Data_Ord.Ord1(function () {
      return eq1Additive;
  }, function (dictOrd) {
      return Data_Ord.compare(ordAdditive(dictOrd));
  });
  var boundedAdditive = function (dictBounded) {
      return dictBounded;
  };
  var applyAdditive = new Control_Apply.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Control_Bind.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Control_Applicative.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Control_Monad.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["eqAdditive"] = eqAdditive;
  exports["eq1Additive"] = eq1Additive;
  exports["ordAdditive"] = ordAdditive;
  exports["ord1Additive"] = ord1Additive;
  exports["boundedAdditive"] = boundedAdditive;
  exports["showAdditive"] = showAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Multiplicative"] = $PS["Data.Monoid.Multiplicative"] || {};
  var exports = $PS["Data.Monoid.Multiplicative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];                
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return dictOrd;
  };
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Data_Semiring.one(dictSemiring));
  };
  var functorMultiplicative = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return dictEq;
  };
  var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqMultiplicative(dictEq));
  });
  var ord1Multiplicative = new Data_Ord.Ord1(function () {
      return eq1Multiplicative;
  }, function (dictOrd) {
      return Data_Ord.compare(ordMultiplicative(dictOrd));
  });
  var boundedMultiplicative = function (dictBounded) {
      return dictBounded;
  };
  var applyMultiplicative = new Control_Apply.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Control_Bind.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Control_Monad.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["eq1Multiplicative"] = eq1Multiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["ord1Multiplicative"] = ord1Multiplicative;
  exports["boundedMultiplicative"] = boundedMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Traversable.Accum.Internal"] = $PS["Data.Traversable.Accum.Internal"] || {};
  var exports = $PS["Data.Traversable.Accum.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                
  var StateR = function (x) {
      return x;
  };
  var StateL = function (x) {
      return x;
  };
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var functorStateR = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateR(k)(s);
              return {
                  accum: v.accum,
                  value: f(v.value)
              };
          };
      };
  });
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateL(k)(s);
              return {
                  accum: v.accum,
                  value: f(v.value)
              };
          };
      };
  });
  var applyStateR = new Control_Apply.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateR(x)(s);
              var v1 = stateR(f)(v.accum);
              return {
                  accum: v1.accum,
                  value: v1.value(v.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                  accum: v1.accum,
                  value: v.value(v1.value)
              };
          };
      };
  });
  var applicativeStateR = new Control_Applicative.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s,
              value: a
          };
      };
  });
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s,
              value: a
          };
      };
  });
  exports["StateL"] = StateL;
  exports["stateL"] = stateL;
  exports["StateR"] = StateR;
  exports["stateR"] = stateR;
  exports["functorStateL"] = functorStateL;
  exports["applyStateL"] = applyStateL;
  exports["applicativeStateL"] = applicativeStateL;
  exports["functorStateR"] = functorStateR;
  exports["applyStateR"] = applyStateR;
  exports["applicativeStateR"] = applicativeStateR;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Const = $PS["Data.Const"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_App = $PS["Data.Functor.App"];
  var Data_Functor_Compose = $PS["Data.Functor.Compose"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_Functor_Product = $PS["Data.Functor.Product"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = $PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = $PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = $PS["Data.Traversable.Accum.Internal"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableTuple = new Traversable(function () {
      return Data_Foldable.foldableTuple;
  }, function () {
      return Data_Tuple.functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableIdentity = new Traversable(function () {
      return Data_Foldable.foldableIdentity;
  }, function () {
      return Data_Identity.functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Identity.Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Identity.Identity)(f(v));
          };
      };
  });
  var traversableEither = new Traversable(function () {
      return Data_Foldable.foldableEither;
  }, function () {
      return Data_Either.functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v.value0));
          };
          if (v instanceof Data_Either.Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConst = new Traversable(function () {
      return Data_Foldable.foldableConst;
  }, function () {
      return Data_Const.functorConst;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Applicative.pure(dictApplicative)(v);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictApplicative)(v1);
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableCompose = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Traversable(function () {
              return Data_Foldable.foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }, function () {
              return Data_Functor_Compose.functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
          }, function (dictApplicative) {
              return traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Compose.Compose)(traverse(dictTraversable)(dictApplicative)(traverse(dictTraversable1)(dictApplicative)(f))(v));
                  };
              };
          });
      };
  };
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableApp = function (dictTraversable) {
      return new Traversable(function () {
          return Data_Foldable.foldableApp(dictTraversable.Foldable1());
      }, function () {
          return Data_Functor_App.functorApp(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_App.App)(sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_App.App)(traverse(dictTraversable)(dictApplicative)(f)(v));
              };
          };
      });
  };
  var traversableCoproduct = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Traversable(function () {
              return Data_Foldable.foldableCoproduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }, function () {
              return Data_Functor_Coproduct.functorCoproduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
          }, function (dictApplicative) {
              return Data_Functor_Coproduct.coproduct((function () {
                  var $141 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($144) {
                      return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($144));
                  });
                  var $142 = sequence(dictTraversable)(dictApplicative);
                  return function ($143) {
                      return $141($142($143));
                  };
              })())((function () {
                  var $145 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($148) {
                      return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($148));
                  });
                  var $146 = sequence(dictTraversable1)(dictApplicative);
                  return function ($147) {
                      return $145($146($147));
                  };
              })());
          }, function (dictApplicative) {
              return function (f) {
                  return Data_Functor_Coproduct.coproduct((function () {
                      var $149 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($152) {
                          return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($152));
                      });
                      var $150 = traverse(dictTraversable)(dictApplicative)(f);
                      return function ($151) {
                          return $149($150($151));
                      };
                  })())((function () {
                      var $153 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($156) {
                          return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($156));
                      });
                      var $154 = traverse(dictTraversable1)(dictApplicative)(f);
                      return function ($155) {
                          return $153($154($155));
                      };
                  })());
              };
          });
      };
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableProduct = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Traversable(function () {
              return Data_Foldable.foldableProduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }, function () {
              return Data_Functor_Product.functorProduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
          }, function (dictApplicative) {
              return function (v) {
                  return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(sequence(dictTraversable)(dictApplicative)(v.value0))(sequence(dictTraversable1)(dictApplicative)(v.value1));
              };
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(traverse(dictTraversable)(dictApplicative)(f)(v.value0))(traverse(dictTraversable1)(dictApplicative)(f)(v.value1));
                  };
              };
          });
      };
  };
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
              };
          };
      };
  };
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime,
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime,
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traverseDefault"] = traverseDefault;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["scanl"] = scanl;
  exports["scanr"] = scanr;
  exports["mapAccumL"] = mapAccumL;
  exports["mapAccumR"] = mapAccumR;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;
  exports["traversableEither"] = traversableEither;
  exports["traversableTuple"] = traversableTuple;
  exports["traversableIdentity"] = traversableIdentity;
  exports["traversableConst"] = traversableConst;
  exports["traversableProduct"] = traversableProduct;
  exports["traversableCoproduct"] = traversableCoproduct;
  exports["traversableCompose"] = traversableCompose;
  exports["traversableApp"] = traversableApp;
  exports["Foldable"] = Data_Foldable.Foldable;
  exports["all"] = Data_Foldable.all;
  exports["and"] = Data_Foldable.and;
  exports["any"] = Data_Foldable.any;
  exports["elem"] = Data_Foldable.elem;
  exports["find"] = Data_Foldable.find;
  exports["fold"] = Data_Foldable.fold;
  exports["foldMap"] = Data_Foldable.foldMap;
  exports["foldMapDefaultL"] = Data_Foldable.foldMapDefaultL;
  exports["foldMapDefaultR"] = Data_Foldable.foldMapDefaultR;
  exports["foldl"] = Data_Foldable.foldl;
  exports["foldlDefault"] = Data_Foldable.foldlDefault;
  exports["foldr"] = Data_Foldable.foldr;
  exports["foldrDefault"] = Data_Foldable.foldrDefault;
  exports["for_"] = Data_Foldable.for_;
  exports["intercalate"] = Data_Foldable.intercalate;
  exports["maximum"] = Data_Foldable.maximum;
  exports["maximumBy"] = Data_Foldable.maximumBy;
  exports["minimum"] = Data_Foldable.minimum;
  exports["minimumBy"] = Data_Foldable.minimumBy;
  exports["notElem"] = Data_Foldable.notElem;
  exports["oneOf"] = Data_Foldable.oneOf;
  exports["or"] = Data_Foldable.or;
  exports["sequence_"] = Data_Foldable.sequence_;
  exports["sum"] = Data_Foldable.sum;
  exports["traverse_"] = Data_Foldable.traverse_;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord.Max"] = $PS["Data.Ord.Max"] || {};
  var exports = $PS["Data.Ord.Max"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Max = function (x) {
      return x;
  };
  var showMax = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Max " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMax = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.max(dictOrd)(v)(v1);
          };
      });
  };
  var newtypeMax = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidMax = function (dictBounded) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMax(dictBounded.Ord0());
      }, Data_Bounded.bottom(dictBounded));
  };
  var eqMax = function (dictEq) {
      return dictEq;
  };
  var ordMax = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMax(dictOrd.Eq0());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  exports["Max"] = Max;
  exports["newtypeMax"] = newtypeMax;
  exports["eqMax"] = eqMax;
  exports["ordMax"] = ordMax;
  exports["semigroupMax"] = semigroupMax;
  exports["monoidMax"] = monoidMax;
  exports["showMax"] = showMax;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord.Min"] = $PS["Data.Ord.Min"] || {};
  var exports = $PS["Data.Ord.Min"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Min = function (x) {
      return x;
  };
  var showMin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Min " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMin = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.min(dictOrd)(v)(v1);
          };
      });
  };
  var newtypeMin = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidMin = function (dictBounded) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMin(dictBounded.Ord0());
      }, Data_Bounded.top(dictBounded));
  };
  var eqMin = function (dictEq) {
      return dictEq;
  };
  var ordMin = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMin(dictOrd.Eq0());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  exports["Min"] = Min;
  exports["newtypeMin"] = newtypeMin;
  exports["eqMin"] = eqMin;
  exports["ordMin"] = ordMin;
  exports["semigroupMin"] = semigroupMin;
  exports["monoidMin"] = monoidMin;
  exports["showMin"] = showMin;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord_Max = $PS["Data.Ord.Max"];
  var Data_Ord_Min = $PS["Data.Ord.Min"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var JoinWith = function (x) {
      return x;
  };
  var Foldable1 = function (Foldable0, foldMap1, foldl1, foldr1) {
      this.Foldable0 = Foldable0;
      this.foldMap1 = foldMap1;
      this.foldl1 = foldl1;
      this.foldr1 = foldr1;
  };
  var FoldRight1 = (function () {
      function FoldRight1(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FoldRight1.create = function (value0) {
          return function (value1) {
              return new FoldRight1(value0, value1);
          };
      };
      return FoldRight1;
  })();
  var Act = function (x) {
      return x;
  };
  var semigroupJoinWith = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return JoinWith(function (j) {
                  return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
              });
          };
      });
  };
  var semigroupAct = function (dictApply) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Apply.applySecond(dictApply)(v)(v1);
          };
      });
  };
  var runFoldRight1 = function (v) {
      return v.value0(v.value1);
  };
  var mkFoldRight1 = FoldRight1.create(Data_Function["const"]);
  var joinee = function (v) {
      return v;
  };
  var getAct = function (v) {
      return v;
  };
  var foldr1 = function (dict) {
      return dict.foldr1;
  };
  var foldl1 = function (dict) {
      return dict.foldl1;
  };
  var maximumBy = function (dictFoldable1) {
      return function (cmp) {
          return foldl1(dictFoldable1)(function (x) {
              return function (y) {
                  var $74 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
                  if ($74) {
                      return x;
                  };
                  return y;
              };
          });
      };
  };
  var minimumBy = function (dictFoldable1) {
      return function (cmp) {
          return foldl1(dictFoldable1)(function (x) {
              return function (y) {
                  var $75 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.LT.value);
                  if ($75) {
                      return x;
                  };
                  return y;
              };
          });
      };
  };
  var foldableTuple = new Foldable1(function () {
      return Data_Foldable.foldableTuple;
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (v) {
      return function (v1) {
          return v1.value1;
      };
  }, function (v) {
      return function (v1) {
          return v1.value1;
      };
  });
  var foldableMultiplicative = new Foldable1(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (v) {
      return function (v1) {
          return v1;
      };
  }, function (v) {
      return function (v1) {
          return v1;
      };
  });
  var foldableIdentity = new Foldable1(function () {
      return Data_Foldable.foldableIdentity;
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (v) {
      return function (v1) {
          return v1;
      };
  }, function (v) {
      return function (v1) {
          return v1;
      };
  });
  var foldableDual = new Foldable1(function () {
      return Data_Foldable.foldableDual;
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (v) {
      return function (v1) {
          return v1;
      };
  }, function (v) {
      return function (v1) {
          return v1;
      };
  });
  var foldRight1Semigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new FoldRight1(function (a) {
              return function (f) {
                  return v.value0(f(v.value1)(v1.value0(a)(f)))(f);
              };
          }, v1.value1);
      };
  });
  var foldMap1DefaultR = function (dictFoldable1) {
      return function (dictFunctor) {
          return function (dictSemigroup) {
              return function (f) {
                  var $112 = foldr1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
                  var $113 = Data_Functor.map(dictFunctor)(f);
                  return function ($114) {
                      return $112($113($114));
                  };
              };
          };
      };
  };
  var foldMap1DefaultL = function (dictFoldable1) {
      return function (dictFunctor) {
          return function (dictSemigroup) {
              return function (f) {
                  var $115 = foldl1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
                  var $116 = Data_Functor.map(dictFunctor)(f);
                  return function ($117) {
                      return $115($116($117));
                  };
              };
          };
      };
  };
  var foldMap1Default = function (dictWarn) {
      return function (dictFoldable1) {
          return function (dictFunctor) {
              return function (dictSemigroup) {
                  return foldMap1DefaultL(dictFoldable1)(dictFunctor)(dictSemigroup);
              };
          };
      };
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var foldl1Default = function (dictFoldable1) {
      var $118 = Data_Function.flip((function () {
          var $120 = Data_Newtype.alaF()()()()(Data_Monoid_Dual.Dual)(foldMap1(dictFoldable1)(Data_Monoid_Dual.semigroupDual(foldRight1Semigroup)))(mkFoldRight1);
          return function ($121) {
              return runFoldRight1($120($121));
          };
      })());
      return function ($119) {
          return $118(Data_Function.flip($119));
      };
  };
  var foldr1Default = function (dictFoldable1) {
      return Data_Function.flip((function () {
          var $122 = foldMap1(dictFoldable1)(foldRight1Semigroup)(mkFoldRight1);
          return function ($123) {
              return runFoldRight1($122($123));
          };
      })());
  };
  var intercalateMap = function (dictFoldable1) {
      return function (dictSemigroup) {
          return function (j) {
              return function (f) {
                  return function (foldable) {
                      return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($124) {
                          return JoinWith(Data_Function["const"](f($124)));
                      })(foldable))(j);
                  };
              };
          };
      };
  };
  var intercalate = function (dictFoldable1) {
      return function (dictSemigroup) {
          return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala()()()(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala()()()(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
  };
  var traverse1_ = function (dictFoldable1) {
      return function (dictApply) {
          return function (f) {
              return function (t) {
                  return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($125) {
                      return Act(f($125));
                  })(t)));
              };
          };
      };
  };
  var for1_ = function (dictFoldable1) {
      return function (dictApply) {
          return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
      };
  };
  var sequence1_ = function (dictFoldable1) {
      return function (dictApply) {
          return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var fold1 = function (dictFoldable1) {
      return function (dictSemigroup) {
          return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1"] = foldMap1;
  exports["fold1"] = fold1;
  exports["foldr1"] = foldr1;
  exports["foldl1"] = foldl1;
  exports["traverse1_"] = traverse1_;
  exports["for1_"] = for1_;
  exports["sequence1_"] = sequence1_;
  exports["foldr1Default"] = foldr1Default;
  exports["foldl1Default"] = foldl1Default;
  exports["foldMap1DefaultR"] = foldMap1DefaultR;
  exports["foldMap1DefaultL"] = foldMap1DefaultL;
  exports["foldMap1Default"] = foldMap1Default;
  exports["intercalate"] = intercalate;
  exports["intercalateMap"] = intercalateMap;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["foldableDual"] = foldableDual;
  exports["foldableMultiplicative"] = foldableMultiplicative;
  exports["foldableTuple"] = foldableTuple;
  exports["foldableIdentity"] = foldableIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup.Traversable"] = $PS["Data.Semigroup.Traversable"] || {};
  var exports = $PS["Data.Semigroup.Traversable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = $PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
      this.Foldable10 = Foldable10;
      this.Traversable1 = Traversable1;
      this.sequence1 = sequence1;
      this.traverse1 = traverse1;
  };
  var traverse1 = function (dict) {
      return dict.traverse1;
  };
  var traversableTuple = new Traversable1(function () {
      return Data_Semigroup_Foldable.foldableTuple;
  }, function () {
      return Data_Traversable.traversableTuple;
  }, function (dictApply) {
      return function (v) {
          return Data_Functor.map(dictApply.Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var traversableIdentity = new Traversable1(function () {
      return Data_Semigroup_Foldable.foldableIdentity;
  }, function () {
      return Data_Traversable.traversableIdentity;
  }, function (dictApply) {
      return function (v) {
          return Data_Functor.map(dictApply.Functor0())(Data_Identity.Identity)(v);
      };
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Identity.Identity)(f(v));
          };
      };
  });
  var sequence1Default = function (dictTraversable1) {
      return function (dictApply) {
          return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableDual = new Traversable1(function () {
      return Data_Semigroup_Foldable.foldableDual;
  }, function () {
      return Data_Traversable.traversableDual;
  }, function (dictApply) {
      return sequence1Default(traversableDual)(dictApply);
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableMultiplicative = new Traversable1(function () {
      return Data_Semigroup_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Traversable.traversableMultiplicative;
  }, function (dictApply) {
      return sequence1Default(traversableMultiplicative)(dictApply);
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var sequence1 = function (dict) {
      return dict.sequence1;
  };
  var traverse1Default = function (dictTraversable1) {
      return function (dictApply) {
          return function (f) {
              return function (ta) {
                  return sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(f)(ta));
              };
          };
      };
  };
  exports["sequence1"] = sequence1;
  exports["traverse1"] = traverse1;
  exports["Traversable1"] = Traversable1;
  exports["traverse1Default"] = traverse1Default;
  exports["sequence1Default"] = sequence1Default;
  exports["traversableDual"] = traversableDual;
  exports["traversableMultiplicative"] = traversableMultiplicative;
  exports["traversableTuple"] = traversableTuple;
  exports["traversableIdentity"] = traversableIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Maybe = new Unfoldable1(function (f) {
      return function (b) {
          return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
      };
  });
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate1 = function (dictUnfoldable1) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  if (i <= 0) {
                      return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [ i.constructor.name ]);
              };
              return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
          };
      };
  };
  var replicate1A = function (dictApply) {
      return function (dictUnfoldable1) {
          return function (dictTraversable1) {
              return function (n) {
                  return function (m) {
                      return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable1) {
      return replicate1(dictUnfoldable1)(1);
  };
  var range = function (dictUnfoldable1) {
      return function (start) {
          return function (end) {
              var go = function (delta) {
                  return function (i) {
                      var i$prime = i + delta | 0;
                      return new Data_Tuple.Tuple(i, (function () {
                          var $8 = i === end;
                          if ($8) {
                              return Data_Maybe.Nothing.value;
                          };
                          return new Data_Maybe.Just(i$prime);
                      })());
                  };
              };
              var delta = (function () {
                  var $9 = end >= start;
                  if ($9) {
                      return 1;
                  };
                  return -1 | 0;
              })();
              return unfoldr1(dictUnfoldable1)(go(delta))(start);
          };
      };
  };
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["replicate1"] = replicate1;
  exports["replicate1A"] = replicate1A;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["unfoldable1Array"] = unfoldable1Array;
  exports["unfoldable1Maybe"] = unfoldable1Maybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];
  var Data_Unit = $PS["Data.Unit"];                
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableMaybe = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Maybe;
  }, function (f) {
      return function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
      };
  });
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $7 = i <= 0;
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
  };
  var fromMaybe = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["none"] = none;
  exports["fromMaybe"] = fromMaybe;
  exports["unfoldableArray"] = unfoldableArray;
  exports["unfoldableMaybe"] = unfoldableMaybe;
  exports["Unfoldable1"] = Data_Unfoldable1.Unfoldable1;
  exports["range"] = Data_Unfoldable1.range;
  exports["replicate1"] = Data_Unfoldable1.replicate1;
  exports["replicate1A"] = Data_Unfoldable1.replicate1A;
  exports["singleton"] = Data_Unfoldable1.singleton;
  exports["unfoldr1"] = Data_Unfoldable1.unfoldr1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAtIndices = function (dictFoldable) {
      return function (us) {
          return function (xs) {
              return Data_Array_ST.withArray(function (res) {
                  return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                      return Data_Array_ST.poke(v.value0)(v.value1)(res);
                  })(us);
              })(xs)();
          };
      };
  };
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 158, column 3 - line 160, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var take = function (n) {
      return function (xs) {
          var $67 = n < 1;
          if ($67) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var splitAt = function (i) {
      return function (xs) {
          if (i <= 0) {
              return {
                  before: [  ],
                  after: xs
              };
          };
          return {
              before: $foreign.slice(0)(i)(xs),
              after: $foreign.slice(i)($foreign.length(xs))(xs)
          };
      };
  };
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubByEq = function (eq) {
      return function (xs) {
          return (function __do() {
              var arr = Data_Array_ST["new"]();
              Control_Monad_ST_Internal.foreach(xs)(function (x) {
                  return function __do() {
                      var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                          var $99 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          var $100 = $foreign.any(function (v) {
                              return eq(v)(x);
                          });
                          return function ($101) {
                              return $99($100($101));
                          };
                      })())(Data_Array_ST.unsafeFreeze(arr))();
                      return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                  };
              })();
              return Data_Array_ST.unsafeFreeze(arr)();
          })();
      };
  };
  var nubEq = function (dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
  };
  var modifyAtIndices = function (dictFoldable) {
      return function (is) {
          return function (f) {
              return function (xs) {
                  return Data_Array_ST.withArray(function (res) {
                      return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                          return Data_Array_ST.modify(i)(f)(res);
                      })(is);
                  })(xs)();
              };
          };
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var intersperse = function (a) {
      return function (arr) {
          var v = $foreign.length(arr);
          if (v < 2) {
              return arr;
          };
          if (Data_Boolean.otherwise) {
              return Data_Array_ST.run((function () {
                  var unsafeGetElem = function (idx) {
                      return unsafeIndex()(arr)(idx);
                  };
                  return function __do() {
                      var out = Data_Array_ST["new"]();
                      Data_Array_ST.push(unsafeGetElem(0))(out)();
                      Control_Monad_ST_Internal["for"](1)(v)(function (idx) {
                          return function __do() {
                              Data_Array_ST.push(a)(out)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(unsafeGetElem(idx))(out))();
                          };
                      })();
                      return out;
                  };
              })());
          };
          throw new Error("Failed pattern match at Data.Array (line 613, column 21 - line 622, column 19): " + [ v.constructor.name ]);
      };
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $74 = p(v.value0);
                      if ($74) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 966, column 5 - line 968, column 25): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array (line 953, column 3 - line 959, column 30): " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var unzip = function (xs) {
      return (function __do() {
          var fsts = Data_Array_ST["new"]();
          var snds = Data_Array_ST["new"]();
          var iter = Data_Array_ST_Iterator.iterator(function (v) {
              return index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)(function (v) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
              };
          })();
          var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
          var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
          return new Data_Tuple.Tuple(fsts$prime, snds$prime);
      })();
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $102 = (function (dictPartial) {
                                  var $104 = Data_Maybe.fromJust();
                                  return function ($105) {
                                      return $104(last($105));
                                  };
                              })();
                              return function ($103) {
                                  return Data_Tuple.snd($102($103));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST["new"]();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST["new"]();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var groupAllBy = function (cmp) {
      var $106 = groupBy(function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.EQ.value);
          };
      });
      var $107 = sortBy(cmp);
      return function ($108) {
          return $106($107($108));
      };
  };
  var groupAll = function (dictOrd) {
      return groupAllBy(Data_Ord.compare(dictOrd));
  };
  var group$prime = function (dictWarn) {
      return function (dictOrd) {
          return groupAll(dictOrd);
      };
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var foldRecM = function (dictMonadRec) {
      return function (f) {
          return function (b) {
              return function (array) {
                  var go = function (res) {
                      return function (i) {
                          if (i >= $foreign.length(array)) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (res$prime) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                      a: res$prime,
                                      b: i + 1 | 0
                                  }));
                              });
                          };
                          throw new Error("Failed pattern match at Data.Array (line 1269, column 3 - line 1273, column 42): " + [ res.constructor.name, i.constructor.name ]);
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(b)(0);
              };
          };
      };
  };
  var foldMap = function (dictMonoid) {
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid);
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (b) {
              return $foreign.unconsImpl(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(b);
              })(function (a) {
                  return function (as) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(b)(a))(function (b$prime) {
                          return foldM(dictMonad)(f)(b$prime)(as);
                      });
                  };
              });
          };
      };
  };
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  var findMap = $foreign.findMapImpl(Data_Maybe.Nothing.value)(Data_Maybe.isJust);
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var find = function (f) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var notElem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isNothing(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var dropEnd = function (n) {
      return function (xs) {
          return take($foreign.length(xs) - n | 0)(xs);
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var takeEnd = function (n) {
      return function (xs) {
          return drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(foldl(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return foldr($$delete(dictEq));
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var filterA = function (dictApplicative) {
      return function (p) {
          var $111 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
              if (v.value1) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          }));
          var $112 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
          });
          return function ($113) {
              return $111($112($113));
          };
      };
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var v = f(x);
                  if (v instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return updateAt(i)(v.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array (line 591, column 10 - line 593, column 32): " + [ v.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["find"] = find;
  exports["findMap"] = findMap;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["modifyAtIndices"] = modifyAtIndices;
  exports["alterAt"] = alterAt;
  exports["intersperse"] = intersperse;
  exports["concatMap"] = concatMap;
  exports["splitAt"] = splitAt;
  exports["filterA"] = filterA;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["intercalate"] = intercalate;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["take"] = take;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropEnd"] = dropEnd;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["groupAll"] = groupAll;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["groupAllBy"] = groupAllBy;
  exports["nub"] = nub;
  exports["nubEq"] = nubEq;
  exports["nubBy"] = nubBy;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["foldM"] = foldM;
  exports["foldRecM"] = foldRecM;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
  exports["scanl"] = $foreign.scanl;
  exports["scanr"] = $foreign.scanr;
  exports["slice"] = $foreign.slice;
  exports["zipWith"] = $foreign.zipWith;
  exports["any"] = $foreign.any;
  exports["all"] = $foreign.all;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Const = $PS["Data.Const"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_App = $PS["Data.Functor.App"];
  var Data_Functor_Compose = $PS["Data.Functor.Compose"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_Functor_Product = $PS["Data.Functor.Product"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = $PS["Data.Monoid.Multiplicative"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var mapDefault = function (dictFunctorWithIndex) {
      return function (f) {
          return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
      };
  };
  var functorWithIndexTuple = new FunctorWithIndex(function () {
      return Data_Tuple.functorTuple;
  }, function (f) {
      return Data_Functor.map(Data_Tuple.functorTuple)(f(Data_Unit.unit));
  });
  var functorWithIndexProduct = function (dictFunctorWithIndex) {
      return function (dictFunctorWithIndex1) {
          return new FunctorWithIndex(function () {
              return Data_Functor_Product.functorProduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }, function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(mapWithIndex(dictFunctorWithIndex)(function ($27) {
                      return f(Data_Either.Left.create($27));
                  }))(mapWithIndex(dictFunctorWithIndex1)(function ($28) {
                      return f(Data_Either.Right.create($28));
                  }))(v);
              };
          });
      };
  };
  var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
  });
  var functorWithIndexMaybe = new FunctorWithIndex(function () {
      return Data_Maybe.functorMaybe;
  }, function (f) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
  });
  var functorWithIndexLast = new FunctorWithIndex(function () {
      return Data_Maybe_Last.functorLast;
  }, function (f) {
      return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
  });
  var functorWithIndexIdentity = new FunctorWithIndex(function () {
      return Data_Identity.functorIdentity;
  }, function (f) {
      return function (v) {
          return f(Data_Unit.unit)(v);
      };
  });
  var functorWithIndexFirst = new FunctorWithIndex(function () {
      return Data_Maybe_First.functorFirst;
  }, function (f) {
      return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
  });
  var functorWithIndexEither = new FunctorWithIndex(function () {
      return Data_Either.functorEither;
  }, function (f) {
      return Data_Functor.map(Data_Either.functorEither)(f(Data_Unit.unit));
  });
  var functorWithIndexDual = new FunctorWithIndex(function () {
      return Data_Monoid_Dual.functorDual;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
  });
  var functorWithIndexDisj = new FunctorWithIndex(function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
  });
  var functorWithIndexCoproduct = function (dictFunctorWithIndex) {
      return function (dictFunctorWithIndex1) {
          return new FunctorWithIndex(function () {
              return Data_Functor_Coproduct.functorCoproduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }, function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(mapWithIndex(dictFunctorWithIndex)(function ($29) {
                      return f(Data_Either.Left.create($29));
                  }))(mapWithIndex(dictFunctorWithIndex1)(function ($30) {
                      return f(Data_Either.Right.create($30));
                  }))(v);
              };
          });
      };
  };
  var functorWithIndexConst = new FunctorWithIndex(function () {
      return Data_Const.functorConst;
  }, function (v) {
      return function (v1) {
          return v1;
      };
  });
  var functorWithIndexConj = new FunctorWithIndex(function () {
      return Data_Monoid_Conj.functorConj;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
  });
  var functorWithIndexCompose = function (dictFunctorWithIndex) {
      return function (dictFunctorWithIndex1) {
          return new FunctorWithIndex(function () {
              return Data_Functor_Compose.functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }, function (f) {
              return function (v) {
                  return Data_Functor_Compose.Compose(mapWithIndex(dictFunctorWithIndex)((function () {
                      var $31 = mapWithIndex(dictFunctorWithIndex1);
                      var $32 = Data_Tuple.curry(f);
                      return function ($33) {
                          return $31($32($33));
                      };
                  })())(v));
              };
          });
      };
  };
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  var functorWithIndexApp = function (dictFunctorWithIndex) {
      return new FunctorWithIndex(function () {
          return Data_Functor_App.functorApp(dictFunctorWithIndex.Functor0());
      }, function (f) {
          return function (v) {
              return Data_Functor_App.App(mapWithIndex(dictFunctorWithIndex)(f)(v));
          };
      });
  };
  var functorWithIndexAdditive = new FunctorWithIndex(function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
  });
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["mapDefault"] = mapDefault;
  exports["functorWithIndexArray"] = functorWithIndexArray;
  exports["functorWithIndexMaybe"] = functorWithIndexMaybe;
  exports["functorWithIndexFirst"] = functorWithIndexFirst;
  exports["functorWithIndexLast"] = functorWithIndexLast;
  exports["functorWithIndexAdditive"] = functorWithIndexAdditive;
  exports["functorWithIndexDual"] = functorWithIndexDual;
  exports["functorWithIndexConj"] = functorWithIndexConj;
  exports["functorWithIndexDisj"] = functorWithIndexDisj;
  exports["functorWithIndexMultiplicative"] = functorWithIndexMultiplicative;
  exports["functorWithIndexEither"] = functorWithIndexEither;
  exports["functorWithIndexTuple"] = functorWithIndexTuple;
  exports["functorWithIndexIdentity"] = functorWithIndexIdentity;
  exports["functorWithIndexConst"] = functorWithIndexConst;
  exports["functorWithIndexProduct"] = functorWithIndexProduct;
  exports["functorWithIndexCoproduct"] = functorWithIndexCoproduct;
  exports["functorWithIndexCompose"] = functorWithIndexCompose;
  exports["functorWithIndexApp"] = functorWithIndexApp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = $PS["Data.Monoid.Endo"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var traverseWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  var $160 = Control_Apply.applySecond(dictApplicative.Apply0());
                  var $161 = f(i);
                  return function ($162) {
                      return $160($161($162));
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var forWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
      };
  };
  var foldrDefault = function (dictFoldableWithIndex) {
      return function (f) {
          return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
      };
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldlDefault = function (dictFoldableWithIndex) {
      return function (f) {
          return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
      };
  };
  var foldableWithIndexTuple = new FoldableWithIndex(function () {
      return Data_Foldable.foldableTuple;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(Data_Unit.unit)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(v.value1)(z);
          };
      };
  });
  var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
  });
  var foldableWithIndexMaybe = new FoldableWithIndex(function () {
      return Data_Foldable.foldableMaybe;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
  });
  var foldableWithIndexLast = new FoldableWithIndex(function () {
      return Data_Foldable.foldableLast;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
  });
  var foldableWithIndexIdentity = new FoldableWithIndex(function () {
      return Data_Foldable.foldableIdentity;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(Data_Unit.unit)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(v)(z);
          };
      };
  });
  var foldableWithIndexFirst = new FoldableWithIndex(function () {
      return Data_Foldable.foldableFirst;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
  });
  var foldableWithIndexEither = new FoldableWithIndex(function () {
      return Data_Foldable.foldableEither;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Either.Right) {
                  return f(Data_Unit.unit)(v.value0);
              };
              throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return z;
              };
              if (v1 instanceof Data_Either.Right) {
                  return v(Data_Unit.unit)(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return z;
              };
              if (v1 instanceof Data_Either.Right) {
                  return v(Data_Unit.unit)(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableWithIndexDual = new FoldableWithIndex(function () {
      return Data_Foldable.foldableDual;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
  });
  var foldableWithIndexDisj = new FoldableWithIndex(function () {
      return Data_Foldable.foldableDisj;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
  });
  var foldableWithIndexConst = new FoldableWithIndex(function () {
      return Data_Foldable.foldableConst;
  }, function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return Data_Monoid.mempty(dictMonoid);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  });
  var foldableWithIndexConj = new FoldableWithIndex(function () {
      return Data_Foldable.foldableConj;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
  });
  var foldableWithIndexAdditive = new FoldableWithIndex(function () {
      return Data_Foldable.foldableAdditive;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
  });
  var foldWithIndexM = function (dictFoldableWithIndex) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                      return function (ma) {
                          return function (b) {
                              return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                          };
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $163 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $164 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($165) {
              return $163($164($165));
          };
      };
  }, function (f) {
      return function (z) {
          var $166 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $167 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($168) {
              return $166($167($168));
          };
      };
  });
  var foldMapWithIndexDefaultL = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (acc) {
                      return function (x) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  var foldableWithIndexApp = function (dictFoldableWithIndex) {
      return new FoldableWithIndex(function () {
          return Data_Foldable.foldableApp(dictFoldableWithIndex.Foldable0());
      }, function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(f)(v);
              };
          };
      }, function (f) {
          return function (z) {
              return function (v) {
                  return foldlWithIndex(dictFoldableWithIndex)(f)(z)(v);
              };
          };
      }, function (f) {
          return function (z) {
              return function (v) {
                  return foldrWithIndex(dictFoldableWithIndex)(f)(z)(v);
              };
          };
      });
  };
  var foldableWithIndexCompose = function (dictFoldableWithIndex) {
      return function (dictFoldableWithIndex1) {
          return new FoldableWithIndex(function () {
              return Data_Foldable.foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }, function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)((function () {
                          var $169 = foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
                          var $170 = Data_Tuple.curry(f);
                          return function ($171) {
                              return $169($170($171));
                          };
                      })())(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return foldlWithIndex(dictFoldableWithIndex)((function () {
                          var $172 = foldlWithIndex(dictFoldableWithIndex1);
                          var $173 = Data_Tuple.curry(f);
                          return function ($174) {
                              return $172($173($174));
                          };
                      })())(i)(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return foldrWithIndex(dictFoldableWithIndex)(function (a) {
                          return Data_Function.flip(foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                      })(i)(v);
                  };
              };
          });
      };
  };
  var foldableWithIndexCoproduct = function (dictFoldableWithIndex) {
      return function (dictFoldableWithIndex1) {
          return new FoldableWithIndex(function () {
              return Data_Foldable.foldableCoproduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }, function (dictMonoid) {
              return function (f) {
                  return Data_Functor_Coproduct.coproduct(foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($175) {
                      return f(Data_Either.Left.create($175));
                  }))(foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function ($176) {
                      return f(Data_Either.Right.create($176));
                  }));
              };
          }, function (f) {
              return function (z) {
                  return Data_Functor_Coproduct.coproduct(foldlWithIndex(dictFoldableWithIndex)(function ($177) {
                      return f(Data_Either.Left.create($177));
                  })(z))(foldlWithIndex(dictFoldableWithIndex1)(function ($178) {
                      return f(Data_Either.Right.create($178));
                  })(z));
              };
          }, function (f) {
              return function (z) {
                  return Data_Functor_Coproduct.coproduct(foldrWithIndex(dictFoldableWithIndex)(function ($179) {
                      return f(Data_Either.Left.create($179));
                  })(z))(foldrWithIndex(dictFoldableWithIndex1)(function ($180) {
                      return f(Data_Either.Right.create($180));
                  })(z));
              };
          });
      };
  };
  var foldableWithIndexProduct = function (dictFoldableWithIndex) {
      return function (dictFoldableWithIndex1) {
          return new FoldableWithIndex(function () {
              return Data_Foldable.foldableProduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }, function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($181) {
                          return f(Data_Either.Left.create($181));
                      })(v.value0))(foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function ($182) {
                          return f(Data_Either.Right.create($182));
                      })(v.value1));
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return foldlWithIndex(dictFoldableWithIndex1)(function ($183) {
                          return f(Data_Either.Right.create($183));
                      })(foldlWithIndex(dictFoldableWithIndex)(function ($184) {
                          return f(Data_Either.Left.create($184));
                      })(z)(v.value0))(v.value1);
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return foldrWithIndex(dictFoldableWithIndex)(function ($185) {
                          return f(Data_Either.Left.create($185));
                      })(foldrWithIndex(dictFoldableWithIndex1)(function ($186) {
                          return f(Data_Either.Right.create($186));
                      })(z)(v.value1))(v.value0);
                  };
              };
          });
      };
  };
  var foldlWithIndexDefault = function (dictFoldableWithIndex) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
                      var $187 = Data_Function.flip(c(i));
                      return function ($188) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($187($188)));
                      };
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrWithIndexDefault = function (dictFoldableWithIndex) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
                      var $189 = c(i);
                      return function ($190) {
                          return Data_Monoid_Endo.Endo($189($190));
                      };
                  })(xs))(u);
              };
          };
      };
  };
  var surroundMapWithIndex = function (dictFoldableWithIndex) {
      return function (dictSemigroup) {
          return function (d) {
              return function (t) {
                  return function (f) {
                      var joined = function (i) {
                          return function (a) {
                              return function (m) {
                                  return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                              };
                          };
                      };
                      return Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                  };
              };
          };
      };
  };
  var foldMapDefault = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
          };
      };
  };
  var findWithIndex = function (dictFoldableWithIndex) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                          return new Data_Maybe.Just({
                              index: v,
                              value: v2
                          });
                      };
                      return v1;
                  };
              };
          };
          return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
      };
  };
  var findMapWithIndex = function (dictFoldableWithIndex) {
      return function (f) {
          var go = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return f(v)(v2);
                      };
                      return v1;
                  };
              };
          };
          return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
      };
  };
  var anyWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              var $191 = Data_Newtype.unwrap();
              var $192 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
                  var $194 = t(i);
                  return function ($195) {
                      return Data_Monoid_Disj.Disj($194($195));
                  };
              });
              return function ($193) {
                  return $191($192($193));
              };
          };
      };
  };
  var allWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              var $196 = Data_Newtype.unwrap();
              var $197 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                  var $199 = t(i);
                  return function ($200) {
                      return Data_Monoid_Conj.Conj($199($200));
                  };
              });
              return function ($198) {
                  return $196($197($198));
              };
          };
      };
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["foldrWithIndexDefault"] = foldrWithIndexDefault;
  exports["foldlWithIndexDefault"] = foldlWithIndexDefault;
  exports["foldMapWithIndexDefaultR"] = foldMapWithIndexDefaultR;
  exports["foldMapWithIndexDefaultL"] = foldMapWithIndexDefaultL;
  exports["foldWithIndexM"] = foldWithIndexM;
  exports["traverseWithIndex_"] = traverseWithIndex_;
  exports["forWithIndex_"] = forWithIndex_;
  exports["surroundMapWithIndex"] = surroundMapWithIndex;
  exports["allWithIndex"] = allWithIndex;
  exports["anyWithIndex"] = anyWithIndex;
  exports["findWithIndex"] = findWithIndex;
  exports["findMapWithIndex"] = findMapWithIndex;
  exports["foldrDefault"] = foldrDefault;
  exports["foldlDefault"] = foldlDefault;
  exports["foldMapDefault"] = foldMapDefault;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
  exports["foldableWithIndexMaybe"] = foldableWithIndexMaybe;
  exports["foldableWithIndexFirst"] = foldableWithIndexFirst;
  exports["foldableWithIndexLast"] = foldableWithIndexLast;
  exports["foldableWithIndexAdditive"] = foldableWithIndexAdditive;
  exports["foldableWithIndexDual"] = foldableWithIndexDual;
  exports["foldableWithIndexDisj"] = foldableWithIndexDisj;
  exports["foldableWithIndexConj"] = foldableWithIndexConj;
  exports["foldableWithIndexMultiplicative"] = foldableWithIndexMultiplicative;
  exports["foldableWithIndexEither"] = foldableWithIndexEither;
  exports["foldableWithIndexTuple"] = foldableWithIndexTuple;
  exports["foldableWithIndexIdentity"] = foldableWithIndexIdentity;
  exports["foldableWithIndexConst"] = foldableWithIndexConst;
  exports["foldableWithIndexProduct"] = foldableWithIndexProduct;
  exports["foldableWithIndexCoproduct"] = foldableWithIndexCoproduct;
  exports["foldableWithIndexCompose"] = foldableWithIndexCompose;
  exports["foldableWithIndexApp"] = foldableWithIndexApp;
})(PS);
(function(exports) {
  "use strict";

  // module Data.Function.Uncurried

  exports.mkFn0 = function (fn) {
    return function () {
      return fn();
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  var runFn1 = function (f) {
      return f;
  };
  var mkFn1 = function (f) {
      return f;
  };
  exports["mkFn1"] = mkFn1;
  exports["runFn1"] = runFn1;
  exports["mkFn0"] = $foreign.mkFn0;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["runFn0"] = $foreign.runFn0;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn9"] = $foreign.runFn9;
  exports["runFn10"] = $foreign.runFn10;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_App = $PS["Data.Functor.App"];
  var Data_Functor_Compose = $PS["Data.Functor.Compose"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_Functor_Product = $PS["Data.Functor.Product"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Traversable_Accum = $PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = $PS["Data.Traversable.Accum.Internal"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $63 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $64 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($65) {
                  return $63($64($65));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traverseDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
          };
      };
  };
  var traversableWithIndexTuple = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexTuple;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexTuple;
  }, function () {
      return Data_Traversable.traversableTuple;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
          };
      };
  });
  var traversableWithIndexProduct = function (dictTraversableWithIndex) {
      return function (dictTraversableWithIndex1) {
          return new TraversableWithIndex(function () {
              return Data_FoldableWithIndex.foldableWithIndexProduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          }, function () {
              return Data_FunctorWithIndex.functorWithIndexProduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          }, function () {
              return Data_Traversable.traversableProduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($66) {
                          return f(Data_Either.Left.create($66));
                      })(v.value0))(traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function ($67) {
                          return f(Data_Either.Right.create($67));
                      })(v.value1));
                  };
              };
          });
      };
  };
  var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexMultiplicative;
  }, function () {
      return Data_Traversable.traversableMultiplicative;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexMaybe = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexMaybe;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexMaybe;
  }, function () {
      return Data_Traversable.traversableMaybe;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexLast = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexLast;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexLast;
  }, function () {
      return Data_Traversable.traversableLast;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexIdentity = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexIdentity;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexIdentity;
  }, function () {
      return Data_Traversable.traversableIdentity;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Identity.Identity)(f(Data_Unit.unit)(v));
          };
      };
  });
  var traversableWithIndexFirst = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexFirst;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexFirst;
  }, function () {
      return Data_Traversable.traversableFirst;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexEither = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexEither;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexEither;
  }, function () {
      return Data_Traversable.traversableEither;
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create)(v(Data_Unit.unit)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.TraversableWithIndex (line 95, column 1 - line 97, column 53): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableWithIndexDual = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexDual;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexDual;
  }, function () {
      return Data_Traversable.traversableDual;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexDisj = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexDisj;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexDisj;
  }, function () {
      return Data_Traversable.traversableDisj;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexCoproduct = function (dictTraversableWithIndex) {
      return function (dictTraversableWithIndex1) {
          return new TraversableWithIndex(function () {
              return Data_FoldableWithIndex.foldableWithIndexCoproduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          }, function () {
              return Data_FunctorWithIndex.functorWithIndexCoproduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          }, function () {
              return Data_Traversable.traversableCoproduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }, function (dictApplicative) {
              return function (f) {
                  return Data_Functor_Coproduct.coproduct((function () {
                      var $68 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($71) {
                          return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($71));
                      });
                      var $69 = traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($72) {
                          return f(Data_Either.Left.create($72));
                      });
                      return function ($70) {
                          return $68($69($70));
                      };
                  })())((function () {
                      var $73 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($76) {
                          return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($76));
                      });
                      var $74 = traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function ($77) {
                          return f(Data_Either.Right.create($77));
                      });
                      return function ($75) {
                          return $73($74($75));
                      };
                  })());
              };
          });
      };
  };
  var traversableWithIndexConst = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexConst;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexConst;
  }, function () {
      return Data_Traversable.traversableConst;
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictApplicative)(v1);
          };
      };
  });
  var traversableWithIndexConj = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexConj;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexConj;
  }, function () {
      return Data_Traversable.traversableConj;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexCompose = function (dictTraversableWithIndex) {
      return function (dictTraversableWithIndex1) {
          return new TraversableWithIndex(function () {
              return Data_FoldableWithIndex.foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          }, function () {
              return Data_FunctorWithIndex.functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          }, function () {
              return Data_Traversable.traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Compose.Compose)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)((function () {
                          var $78 = traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
                          var $79 = Data_Tuple.curry(f);
                          return function ($80) {
                              return $78($79($80));
                          };
                      })())(v));
                  };
              };
          });
      };
  };
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  var traversableWithIndexApp = function (dictTraversableWithIndex) {
      return new TraversableWithIndex(function () {
          return Data_FoldableWithIndex.foldableWithIndexApp(dictTraversableWithIndex.FoldableWithIndex1());
      }, function () {
          return Data_FunctorWithIndex.functorWithIndexApp(dictTraversableWithIndex.FunctorWithIndex0());
      }, function () {
          return Data_Traversable.traversableApp(dictTraversableWithIndex.Traversable2());
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_App.App)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(f)(v));
              };
          };
      });
  };
  var traversableWithIndexAdditive = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexAdditive;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexAdditive;
  }, function () {
      return Data_Traversable.traversableAdditive;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var mapAccumRWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
                      return function (a) {
                          return function (s) {
                              return f(i)(s)(a);
                          };
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanrWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
                      return function (b) {
                          return function (a) {
                              var b$prime = f(i)(a)(b);
                              return {
                                  accum: b$prime,
                                  value: b$prime
                              };
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var mapAccumLWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
                      return function (a) {
                          return function (s) {
                              return f(i)(s)(a);
                          };
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanlWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
                      return function (b) {
                          return function (a) {
                              var b$prime = f(i)(b)(a);
                              return {
                                  accum: b$prime,
                                  value: b$prime
                              };
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var forWithIndex = function (dictApplicative) {
      return function (dictTraversableWithIndex) {
          return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
      };
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traverseWithIndexDefault"] = traverseWithIndexDefault;
  exports["forWithIndex"] = forWithIndex;
  exports["scanlWithIndex"] = scanlWithIndex;
  exports["mapAccumLWithIndex"] = mapAccumLWithIndex;
  exports["scanrWithIndex"] = scanrWithIndex;
  exports["mapAccumRWithIndex"] = mapAccumRWithIndex;
  exports["traverseDefault"] = traverseDefault;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
  exports["traversableWithIndexMaybe"] = traversableWithIndexMaybe;
  exports["traversableWithIndexFirst"] = traversableWithIndexFirst;
  exports["traversableWithIndexLast"] = traversableWithIndexLast;
  exports["traversableWithIndexAdditive"] = traversableWithIndexAdditive;
  exports["traversableWithIndexDual"] = traversableWithIndexDual;
  exports["traversableWithIndexConj"] = traversableWithIndexConj;
  exports["traversableWithIndexDisj"] = traversableWithIndexDisj;
  exports["traversableWithIndexMultiplicative"] = traversableWithIndexMultiplicative;
  exports["traversableWithIndexEither"] = traversableWithIndexEither;
  exports["traversableWithIndexTuple"] = traversableWithIndexTuple;
  exports["traversableWithIndexIdentity"] = traversableWithIndexIdentity;
  exports["traversableWithIndexConst"] = traversableWithIndexConst;
  exports["traversableWithIndexProduct"] = traversableWithIndexProduct;
  exports["traversableWithIndexCoproduct"] = traversableWithIndexCoproduct;
  exports["traversableWithIndexCompose"] = traversableWithIndexCompose;
  exports["traversableWithIndexApp"] = traversableWithIndexApp;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (k) {
        return function (m) {
          return function () {
            return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["peek"] = peek;
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      var $36 = Data_Array.toUnfoldable(dictUnfoldable);
      var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($38) {
          return $36($37($38));
      };
  };
  var toAscUnfoldable = function (dictUnfoldable) {
      var $39 = Data_Array.toUnfoldable(dictUnfoldable);
      var $40 = Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst);
      var $41 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($42) {
          return $39($40($41($42)));
      };
  };
  var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
  var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
  var thawST = $foreign["_copyST"];
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var showObject = function (dictShow) {
      return new Data_Show.Show(function (m) {
          return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
      });
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isSubmap = function (dictEq) {
      return function (m1) {
          return function (m2) {
              var f = function (k) {
                  return function (v) {
                      return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
                  };
              };
              return $foreign.all(f)(m1);
          };
      };
  };
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fromHomogeneous = function (dictHomogeneous) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var fromFoldableWith = function (dictFoldable) {
      return function (f) {
          return function (l) {
              return $foreign.runST(function __do() {
                  var s = Foreign_Object_ST["new"]();
                  Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v) {
                      return function __do() {
                          var v$prime = $foreign["_lookupST"](v.value1, f(v.value1), v.value0, s)();
                          return Foreign_Object_ST.poke(v.value0)(v$prime)(s)();
                      };
                  })();
                  return s;
              });
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var freezeST = $foreign["_copyST"];
  var foldMaybe = function (f) {
      return function (z) {
          return function (m) {
              return $foreign["_foldSCObject"](m, z, f, Data_Maybe.fromMaybe);
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
              return function (k) {
                  return function (v) {
                      return Foreign_Object_ST.poke(k)(v)(s$prime);
                  };
              };
          })(s)(m);
      });
  };
  var unions = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
  };
  var unionWith = function (f) {
      return function (m1) {
          return function (m2) {
              return mutate(function (s1) {
                  return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                      return function (k) {
                          return function (v1) {
                              return Foreign_Object_ST.poke(k)($foreign["_lookup"](v1, function (v2) {
                                  return f(v1)(v2);
                              }, k, m2))(s2);
                          };
                      };
                  })(s1)(m1);
              })(m2);
          };
      };
  };
  var semigroupObject = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(unionWith(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidObject = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupObject(dictSemigroup);
      }, $foreign.empty);
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function ($44) {
          return $43(Data_Function["const"]($44));
      };
  });
  var filterWithKey = function (predicate) {
      return function (m) {
          var go = (function () {
              var step = function (acc) {
                  return function (k) {
                      return function (v) {
                          var $33 = predicate(k)(v);
                          if ($33) {
                              return Foreign_Object_ST.poke(k)(v)(acc);
                          };
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
                      };
                  };
              };
              return function __do() {
                  var m$prime = Foreign_Object_ST["new"]();
                  return foldM(Control_Monad_ST_Internal.monadST)(step)(m$prime)(m)();
              };
          })();
          return $foreign.runST(go);
      };
  };
  var filterKeys = function (predicate) {
      return filterWithKey(function ($45) {
          return Data_Function["const"](predicate($45));
      });
  };
  var filter = function (predicate) {
      return filterWithKey(Data_Function["const"](predicate));
  };
  var eqObject = function (dictEq) {
      return new Data_Eq.Eq(function (m1) {
          return function (m2) {
              return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
          };
      });
  };
  var ordObject = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqObject(dictOrd.Eq0());
      }, function (m1) {
          return function (m2) {
              return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
          };
      });
  };
  var eq1Object = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqObject(dictEq));
  });
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  var pop = function (k) {
      return function (m) {
          return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
              return new Data_Tuple.Tuple(a, $$delete(k)(m));
          });
      };
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object (line 209, column 15 - line 211, column 25): " + [ v.constructor.name ]);
          };
      };
  };
  var update = function (f) {
      return function (k) {
          return function (m) {
              return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
      };
  };
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toAscUnfoldable"] = toAscUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromHomogeneous"] = fromHomogeneous;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["mapWithKey"] = mapWithKey;
  exports["filterWithKey"] = filterWithKey;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["unions"] = unions;
  exports["isSubmap"] = isSubmap;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldM"] = foldM;
  exports["foldMaybe"] = foldMaybe;
  exports["thawST"] = thawST;
  exports["freezeST"] = freezeST;
  exports["functorObject"] = functorObject;
  exports["functorWithIndexObject"] = functorWithIndexObject;
  exports["foldableObject"] = foldableObject;
  exports["foldableWithIndexObject"] = foldableWithIndexObject;
  exports["traversableObject"] = traversableObject;
  exports["traversableWithIndexObject"] = traversableWithIndexObject;
  exports["eqObject"] = eqObject;
  exports["eq1Object"] = eq1Object;
  exports["ordObject"] = ordObject;
  exports["showObject"] = showObject;
  exports["semigroupObject"] = semigroupObject;
  exports["monoidObject"] = monoidObject;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
  exports["keys"] = $foreign.keys;
  exports["all"] = $foreign.all;
  exports["runST"] = $foreign.runST;
  exports["toArrayWithKey"] = $foreign.toArrayWithKey;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var jsonZero = $foreign.fromNumber(0.0);
  var jsonTrue = $foreign.fromBoolean(true);
  var jsonSingletonObject = function (key) {
      return function (val) {
          return $foreign.fromObject(Foreign_Object.singleton(key)(val));
      };
  };
  var jsonSingletonArray = function (j) {
      return $foreign.fromArray([ j ]);
  };
  var jsonFalse = $foreign.fromBoolean(false);
  var jsonEmptyString = $foreign.fromString("");
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  var jsonEmptyArray = $foreign.fromArray([  ]);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var ordJson = new Data_Ord.Ord(function () {
      return eqJson;
  }, function (a) {
      return function (b) {
          return $foreign["_compare"](Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
      };
  });
  var eqJson = new Data_Eq.Eq(function (j1) {
      return function (j2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
      };
  });
  var eqJNull = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var ordJNull = new Data_Ord.Ord(function () {
      return eqJNull;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isString = isJsonType(caseJsonString);
  var toString = toJsonType(caseJsonString);
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };
  var isObject = isJsonType(caseJsonObject);
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNumber = isJsonType(caseJsonNumber);
  var toNumber = toJsonType(caseJsonNumber);
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);
  var toNull = toJsonType(caseJsonNull);
  var caseJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isBoolean = isJsonType(caseJsonBoolean);
  var toBoolean = toJsonType(caseJsonBoolean);
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };
  var isArray = isJsonType(caseJsonArray);
  var toArray = toJsonType(caseJsonArray);
  var caseJson = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (json) {
                              return $foreign["_caseJson"](a, b, c, d, e, f, json);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["caseJson"] = caseJson;
  exports["caseJsonNull"] = caseJsonNull;
  exports["caseJsonBoolean"] = caseJsonBoolean;
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonArray"] = caseJsonArray;
  exports["caseJsonObject"] = caseJsonObject;
  exports["isNull"] = isNull;
  exports["isBoolean"] = isBoolean;
  exports["isNumber"] = isNumber;
  exports["isString"] = isString;
  exports["isArray"] = isArray;
  exports["isObject"] = isObject;
  exports["toNull"] = toNull;
  exports["toBoolean"] = toBoolean;
  exports["toNumber"] = toNumber;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["jsonTrue"] = jsonTrue;
  exports["jsonFalse"] = jsonFalse;
  exports["jsonZero"] = jsonZero;
  exports["jsonEmptyString"] = jsonEmptyString;
  exports["jsonEmptyArray"] = jsonEmptyArray;
  exports["jsonSingletonArray"] = jsonSingletonArray;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["jsonSingletonObject"] = jsonSingletonObject;
  exports["eqJson"] = eqJson;
  exports["ordJson"] = ordJson;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
  exports["stringifyWithIndent"] = $foreign.stringifyWithIndent;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  exports._localeCompare = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (s1) {
          return function (s2) {
            var result = s1.localeCompare(s2);
            return result < 0 ? lt : result > 0 ? gt : eq;
          };
        };
      };
    };
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var $$null = function (s) {
      return s === "";
  };
  var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["null"] = $$null;
  exports["localeCompare"] = localeCompare;
  exports["replace"] = $foreign.replace;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // A helper which transforms the result ofencodeURIComponent to be compliant
  // with RFC3896, as described in the MDN documentation here:
  //
  // https://web.archive.org/web/20201206001047/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
  function toRFC3896(input) {
    return input.replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  }

  exports._encodeURIComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)));
    } catch (err) {
      return fail(err);
    }
  };

  exports._encodeFormURLComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)).replace(/%20/g, "+"));
    } catch (err) {
      return fail(err);
    }
  };

  function _decodeURIComponent(fail, succeed, input) {
    try {
      return succeed(decodeURIComponent(input));
    } catch (err) {
      return fail(err);
    }
  }

  exports._decodeURIComponent = _decodeURIComponent;

  exports._decodeFormURLComponent = function encode(fail, succeed, input) {
    return _decodeURIComponent(fail, succeed, input.replace(/\+/g, " "));
  };
})(PS["JSURI"] = PS["JSURI"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["JSURI"] = $PS["JSURI"] || {};
  var exports = $PS["JSURI"];
  var $foreign = $PS["JSURI"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var $$encodeURIComponent = Data_Function_Uncurried.runFn3($foreign["_encodeURIComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var encodeFormURLComponent = Data_Function_Uncurried.runFn3($foreign["_encodeFormURLComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var $$decodeURIComponent = Data_Function_Uncurried.runFn3($foreign["_decodeURIComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var decodeFormURLComponent = Data_Function_Uncurried.runFn3($foreign["_decodeFormURLComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["encodeURIComponent"] = $$encodeURIComponent;
  exports["encodeFormURLComponent"] = encodeFormURLComponent;
  exports["decodeURIComponent"] = $$decodeURIComponent;
  exports["decodeFormURLComponent"] = decodeFormURLComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var JSURI = $PS["JSURI"];                
  var FormURLEncoded = function (x) {
      return x;
  };
  var toArray = function (v) {
      return v;
  };
  var showFormUrlEncoded = new Data_Show.Show(function (v) {
      return "(FormURLEncoded " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(Data_Maybe.showMaybe(Data_Show.showString))))(v) + ")");
  });
  var semigroupFormUrlEncoded = Data_Semigroup.semigroupArray;
  var ordFormUrlEncoded = Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(Data_Maybe.ordMaybe(Data_Ord.ordString)));
  var newtypeFormUrlEncoded = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidFormUrlEncoded = Data_Monoid.monoidArray;
  var fromArray = FormURLEncoded;
  var eqFormUrlEncoded = Data_Eq.eqArray(Data_Tuple.eqTuple(Data_Eq.eqString)(Data_Maybe.eqMaybe(Data_Eq.eqString)));
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return JSURI["encodeURIComponent"](v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                  return function (val) {
                      return key + ("=" + val);
                  };
              })(JSURI["encodeURIComponent"](v.value0)))(JSURI["encodeURIComponent"](v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 108): " + [ v.constructor.name ]);
      };
      var $16 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"));
      var $17 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart);
      return function ($18) {
          return $16($17(toArray($18)));
      };
  })();
  var decode = (function () {
      var decodePart = (function () {
          var $19 = Data_String_Common.split("=");
          return function ($20) {
              return (function (v) {
                  if (v.length === 2) {
                      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                          return function (val) {
                              return Data_Tuple.Tuple.create(key)(new Data_Maybe.Just(val));
                          };
                      })(JSURI["decodeURIComponent"](v[0])))(JSURI["decodeURIComponent"](v[1]));
                  };
                  if (v.length === 1) {
                      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(JSURI["decodeURIComponent"](v[0])))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value));
                  };
                  return Data_Maybe.Nothing.value;
              })($19($20));
          };
      })();
      var $21 = Data_Functor.map(Data_Maybe.functorMaybe)(FormURLEncoded);
      var $22 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(decodePart);
      var $23 = Data_String_Common.split("&");
      return function ($24) {
          return $21($22($23($24)));
      };
  })();
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["encode"] = encode;
  exports["decode"] = decode;
  exports["newtypeFormUrlEncoded"] = newtypeFormUrlEncoded;
  exports["eqFormUrlEncoded"] = eqFormUrlEncoded;
  exports["ordFormUrlEncoded"] = ordFormUrlEncoded;
  exports["semigroupFormUrlEncoded"] = semigroupFormUrlEncoded;
  exports["monoidFormUrlEncoded"] = monoidFormUrlEncoded;
  exports["showFormUrlEncoded"] = showFormUrlEncoded;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var CustomMethod = function (x) {
      return x;
  };
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [ v.constructor.name ]);
  });
  var showCustomMethod = new Data_Show.Show(function (v) {
      return "(CustomMethod " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  var parse = function (handleMethod) {
      return function (handleUnknown) {
          return function (s) {
              var v = Data_String_Common.toUpper(s);
              if (v === "OPTIONS") {
                  return handleMethod(OPTIONS.value);
              };
              if (v === "GET") {
                  return handleMethod(GET.value);
              };
              if (v === "HEAD") {
                  return handleMethod(HEAD.value);
              };
              if (v === "POST") {
                  return handleMethod(POST.value);
              };
              if (v === "PUT") {
                  return handleMethod(PUT.value);
              };
              if (v === "DELETE") {
                  return handleMethod(DELETE.value);
              };
              if (v === "TRACE") {
                  return handleMethod(TRACE.value);
              };
              if (v === "CONNECT") {
                  return handleMethod(CONNECT.value);
              };
              if (v === "PROPFIND") {
                  return handleMethod(PROPFIND.value);
              };
              if (v === "PROPPATCH") {
                  return handleMethod(PROPPATCH.value);
              };
              if (v === "MKCOL") {
                  return handleMethod(MKCOL.value);
              };
              if (v === "COPY") {
                  return handleMethod(COPY.value);
              };
              if (v === "MOVE") {
                  return handleMethod(MOVE.value);
              };
              if (v === "LOCK") {
                  return handleMethod(LOCK.value);
              };
              if (v === "UNLOCK") {
                  return handleMethod(UNLOCK.value);
              };
              if (v === "PATCH") {
                  return handleMethod(PATCH.value);
              };
              return handleUnknown(v);
          };
      };
  };
  var fromString = parse(Data_Either.Left.create)(function ($28) {
      return Data_Either.Right.create(CustomMethod($28));
  });
  var eqMethod = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof OPTIONS && y instanceof OPTIONS) {
              return true;
          };
          if (x instanceof GET && y instanceof GET) {
              return true;
          };
          if (x instanceof HEAD && y instanceof HEAD) {
              return true;
          };
          if (x instanceof POST && y instanceof POST) {
              return true;
          };
          if (x instanceof PUT && y instanceof PUT) {
              return true;
          };
          if (x instanceof DELETE && y instanceof DELETE) {
              return true;
          };
          if (x instanceof TRACE && y instanceof TRACE) {
              return true;
          };
          if (x instanceof CONNECT && y instanceof CONNECT) {
              return true;
          };
          if (x instanceof PROPFIND && y instanceof PROPFIND) {
              return true;
          };
          if (x instanceof PROPPATCH && y instanceof PROPPATCH) {
              return true;
          };
          if (x instanceof MKCOL && y instanceof MKCOL) {
              return true;
          };
          if (x instanceof COPY && y instanceof COPY) {
              return true;
          };
          if (x instanceof MOVE && y instanceof MOVE) {
              return true;
          };
          if (x instanceof LOCK && y instanceof LOCK) {
              return true;
          };
          if (x instanceof UNLOCK && y instanceof UNLOCK) {
              return true;
          };
          if (x instanceof PATCH && y instanceof PATCH) {
              return true;
          };
          return false;
      };
  });
  var ordMethod = new Data_Ord.Ord(function () {
      return eqMethod;
  }, function (x) {
      return function (y) {
          if (x instanceof OPTIONS && y instanceof OPTIONS) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof OPTIONS) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof OPTIONS) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof GET && y instanceof GET) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof GET) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof GET) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HEAD && y instanceof HEAD) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HEAD) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HEAD) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof POST && y instanceof POST) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof POST) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof POST) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PUT && y instanceof PUT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PUT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PUT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DELETE && y instanceof DELETE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof DELETE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof DELETE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TRACE && y instanceof TRACE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof TRACE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TRACE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CONNECT && y instanceof CONNECT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CONNECT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CONNECT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PROPFIND && y instanceof PROPFIND) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PROPFIND) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PROPFIND) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PROPPATCH && y instanceof PROPPATCH) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PROPPATCH) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PROPPATCH) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof MKCOL && y instanceof MKCOL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof MKCOL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof MKCOL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof COPY && y instanceof COPY) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof COPY) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof COPY) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof MOVE && y instanceof MOVE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof MOVE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof MOVE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof LOCK && y instanceof LOCK) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof LOCK) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof LOCK) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof UNLOCK && y instanceof UNLOCK) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof UNLOCK) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof UNLOCK) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PATCH && y instanceof PATCH) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.HTTP.Method (line 41, column 1 - line 41, column 40): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqCustomMethod = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCustomMethod = new Data_Ord.Ord(function () {
      return eqCustomMethod;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["unCustomMethod"] = unCustomMethod;
  exports["fromString"] = fromString;
  exports["print"] = print;
  exports["eqMethod"] = eqMethod;
  exports["ordMethod"] = ordMethod;
  exports["showMethod"] = showMethod;
  exports["eqCustomMethod"] = eqCustomMethod;
  exports["ordCustomMethod"] = ordCustomMethod;
  exports["showCustomMethod"] = showCustomMethod;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var unfoldable1NonEmpty = function (dictUnfoldable) {
      return new Data_Unfoldable1.Unfoldable1(function (f) {
          return function (b) {
              return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
          };
      });
  };
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var oneOf = function (dictAlternative) {
      return function (v) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var functorWithIndex = function (dictFunctorWithIndex) {
      return new Data_FunctorWithIndex.FunctorWithIndex(function () {
          return functorNonEmpty(dictFunctorWithIndex.Functor0());
      }, function (f) {
          return function (v) {
              return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($151) {
                  return f(Data_Maybe.Just.create($151));
              })(v.value1));
          };
      });
  };
  var fromNonEmpty = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var foldableWithIndexNonEmpty = function (dictFoldableWithIndex) {
      return new Data_FoldableWithIndex.FoldableWithIndex(function () {
          return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
      }, function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($152) {
                      return f(Data_Maybe.Just.create($152));
                  })(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($153) {
                      return f(Data_Maybe.Just.create($153));
                  })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($154) {
                      return f(Data_Maybe.Just.create($154));
                  })(b)(v.value1));
              };
          };
      });
  };
  var traversableNonEmpty = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableNonEmpty(dictTraversable.Foldable1());
      }, function () {
          return functorNonEmpty(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var traversableWithIndexNonEmpty = function (dictTraversableWithIndex) {
      return new Data_TraversableWithIndex.TraversableWithIndex(function () {
          return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
      }, function () {
          return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
      }, function () {
          return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($155) {
                      return f(Data_Maybe.Just.create($155));
                  })(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      }, function (f) {
          return function (v) {
              return Data_Maybe.maybe(v.value0)(f(v.value0))(Data_Foldable.foldr(dictFoldable)(function (a1) {
                  var $156 = Data_Maybe.maybe(a1)(f(a1));
                  return function ($157) {
                      return Data_Maybe.Just.create($156($157));
                  };
              })(Data_Maybe.Nothing.value)(v.value1));
          };
      });
  };
  var foldl1 = function (dictFoldable) {
      return function (dictWarn) {
          return Data_Semigroup_Foldable.foldl1(foldable1NonEmpty(dictFoldable));
      };
  };
  var eqNonEmpty = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordNonEmpty = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
              };
          });
      };
  };
  var eq1NonEmpty = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
      });
  };
  var ord1NonEmpty = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1NonEmpty(dictOrd1.Eq10());
      }, function (dictOrd) {
          return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldl1"] = foldl1;
  exports["fromNonEmpty"] = fromNonEmpty;
  exports["oneOf"] = oneOf;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["showNonEmpty"] = showNonEmpty;
  exports["eqNonEmpty"] = eqNonEmpty;
  exports["eq1NonEmpty"] = eq1NonEmpty;
  exports["ordNonEmpty"] = ordNonEmpty;
  exports["ord1NonEmpty"] = ord1NonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["functorWithIndex"] = functorWithIndex;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["foldableWithIndexNonEmpty"] = foldableWithIndexNonEmpty;
  exports["traversableNonEmpty"] = traversableNonEmpty;
  exports["traversableWithIndexNonEmpty"] = traversableWithIndexNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
  exports["unfoldable1NonEmpty"] = unfoldable1NonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var newtypeNonEmptyList = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var nelCons = function (a) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
      };
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableList;
  }, function (dictMonoid) {
      return function (f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
              return function (acc) {
                  var $208 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  var $209 = f(i);
                  return function ($210) {
                      return $208($209($210));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      return function (acc) {
          var $211 = Data_Foldable.foldl(foldableList)(function (v) {
              return function (a) {
                  return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
              };
          })(new Data_Tuple.Tuple(0, acc));
          return function ($212) {
              return Data_Tuple.snd($211($212));
          };
      };
  }, function (f) {
      return function (b) {
          return function (xs) {
              var v = (function () {
                  var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                      return function (a) {
                          return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                      };
                  });
                  return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
              })();
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                  };
              })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
      };
  });
  var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableNonEmptyList;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)((function () {
                  var $213 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($214) {
                      return f($213($214));
                  };
              })())(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                  var $215 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($216) {
                      return f($215($216));
                  };
              })())(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                  var $217 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($218) {
                      return f($217($218));
                  };
              })())(b)(v);
          };
      };
  });
  var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorList;
  }, function (f) {
      return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
          return function (x) {
              return function (acc) {
                  return new Cons(f(i)(x), acc);
              };
          };
      })(Nil.value);
  });
  var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorNonEmptyList;
  }, function (fn) {
      return function (v) {
          return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))((function () {
              var $219 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function ($220) {
                  return fn($219($220));
              };
          })())(v));
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          var $221 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
          var $222 = Data_Foldable.foldl(foldableList)(function (acc) {
              var $224 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
              return function ($225) {
                  return $224(f($225));
              };
          })(Control_Applicative.pure(dictApplicative)(Nil.value));
          return function ($223) {
              return $221($222($223));
          };
      };
  });
  var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
  var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexList;
  }, function () {
      return functorWithIndexList;
  }, function () {
      return traversableList;
  }, function (dictApplicative) {
      return function (f) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $226 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(rev);
          var $227 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
              return function (acc) {
                  var $229 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                  var $230 = f(i);
                  return function ($231) {
                      return $229($230($231));
                  };
              };
          })(Control_Applicative.pure(dictApplicative)(Nil.value));
          return function ($228) {
              return $226($227($228));
          };
      };
  });
  var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexNonEmptyList;
  }, function () {
      return functorWithIndexNonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)((function () {
                  var $232 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($233) {
                      return f($232($233));
                  };
              })())(v));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
  var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
  var extendNonEmptyList = new Control_Extend.Extend(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          var go = function (a) {
              return function (v1) {
                  return {
                      val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                      acc: new Cons(a, v1.acc)
                  };
              };
          };
          return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
              val: Nil.value,
              acc: Nil.value
          })(v.value1)).val);
      };
  });
  var extendList = new Control_Extend.Extend(function () {
      return functorList;
  }, function (f) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              var go = function (a$prime) {
                  return function (v1) {
                      var acc$prime = new Cons(a$prime, v1.acc);
                      return {
                          val: new Cons(f(acc$prime), v1.val),
                          acc: acc$prime
                      };
                  };
              };
              return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                  val: Nil.value,
                  acc: Nil.value
              })(v.value1)).val);
          };
          throw new Error("Failed pattern match at Data.List.Types (line 183, column 1 - line 190, column 42): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_v2) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, v2) {
                              if (!v2) {
                                  $tco_done = true;
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  $tco_done = true;
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                  return;
                              };
                              $tco_done = true;
                              return false;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                          };
                          return $tco_result;
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      };
  });
  var eq1NonEmptyList = Data_NonEmpty.eq1NonEmpty(eq1List);
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var eqNonEmptyList = function (dictEq) {
      return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(xs)(ys);
          };
      };
  });
  var ord1NonEmptyList = Data_NonEmpty.ord1NonEmpty(ord1List);
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  };
  var ordNonEmptyList = function (dictOrd) {
      return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
  };
  var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
      return extendNonEmptyList;
  }, function (v) {
      return v.value0;
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindNonEmptyList = new Control_Bind.Bind(function () {
      return applyNonEmptyList;
  }, function (v) {
      return function (f) {
          var v1 = f(v.value0);
          return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($234) {
              return toList(f($234));
          })));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var altNonEmptyList = new Control_Alt.Alt(function () {
      return functorNonEmptyList;
  }, Data_Semigroup.append(semigroupNonEmptyList));
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  }, function () {
      return undefined;
  });
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $235 = Data_NonEmpty.singleton(plusList);
      return function ($236) {
          return NonEmptyList($235($236));
      };
  })());
  var monadNonEmptyList = new Control_Monad.Monad(function () {
      return applicativeNonEmptyList;
  }, function () {
      return bindNonEmptyList;
  });
  var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1NonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApply) {
      return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
                  var $237 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
                  return function ($238) {
                      return $237(f($238));
                  };
              })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
              });
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["nelCons"] = nelCons;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["functorWithIndexList"] = functorWithIndexList;
  exports["foldableList"] = foldableList;
  exports["foldableWithIndexList"] = foldableWithIndexList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["traversableWithIndexList"] = traversableWithIndexList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
  exports["extendList"] = extendList;
  exports["newtypeNonEmptyList"] = newtypeNonEmptyList;
  exports["eqNonEmptyList"] = eqNonEmptyList;
  exports["ordNonEmptyList"] = ordNonEmptyList;
  exports["eq1NonEmptyList"] = eq1NonEmptyList;
  exports["ord1NonEmptyList"] = ord1NonEmptyList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["bindNonEmptyList"] = bindNonEmptyList;
  exports["monadNonEmptyList"] = monadNonEmptyList;
  exports["altNonEmptyList"] = altNonEmptyList;
  exports["extendNonEmptyList"] = extendNonEmptyList;
  exports["comonadNonEmptyList"] = comonadNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
  exports["foldable1NonEmptyList"] = foldable1NonEmptyList;
  exports["unfoldable1NonEmptyList"] = unfoldable1NonEmptyList;
  exports["functorWithIndexNonEmptyList"] = functorWithIndexNonEmptyList;
  exports["foldableWithIndexNonEmptyList"] = foldableWithIndexNonEmptyList;
  exports["traversableWithIndexNonEmptyList"] = traversableWithIndexNonEmptyList;
  exports["traversable1NonEmptyList"] = traversable1NonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Internal"] = $PS["Data.List.Internal"] || {};
  var exports = $PS["Data.List.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Two(value0, value1, value2);
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Three(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return new TwoLeft(value0, value1);
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return new TwoRight(value0, value1);
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ThreeLeft(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ThreeMiddle(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ThreeRight(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new KickUp(value0, value1, value2);
              };
          };
      };
      return KickUp;
  })();
  var fromZipper = function ($copy_v) {
      return function ($copy_tree) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, tree) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return tree;
              };
              if (v instanceof Data_List_Types.Cons) {
                  if (v.value0 instanceof TwoLeft) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Two(tree, v.value0.value0, v.value0.value1);
                      return;
                  };
                  if (v.value0 instanceof TwoRight) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Two(v.value0.value0, v.value0.value1, tree);
                      return;
                  };
                  if (v.value0 instanceof ThreeLeft) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3);
                      return;
                  };
                  if (v.value0 instanceof ThreeMiddle) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Three(v.value0.value0, v.value0.value1, tree, v.value0.value2, v.value0.value3);
                      return;
                  };
                  if (v.value0 instanceof ThreeRight) {
                      $tco_var_v = v.value1;
                      $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, tree);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Internal (line 25, column 3 - line 30, column 76): " + [ v.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.List.Internal (line 22, column 1 - line 22, column 63): " + [ v.constructor.name, tree.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_tree);
          };
          return $tco_result;
      };
  };
  var insertAndLookupBy = function (comp) {
      return function (k) {
          return function (orig) {
              var up = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v1.value0, v1.value1, v1.value2);
                          };
                          if (v instanceof Data_List_Types.Cons) {
                              if (v.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v.value0.value0, v.value0.value1));
                              };
                              if (v.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(v.value1)(new Three(v.value0.value0, v.value0.value1, v1.value0, v1.value1, v1.value2));
                              };
                              if (v.value0 instanceof ThreeLeft) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2), v.value0.value0, new Two(v.value0.value1, v.value0.value2, v.value0.value3));
                                  return;
                              };
                              if (v.value0 instanceof ThreeMiddle) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v1.value0), v1.value1, new Two(v1.value2, v.value0.value2, v.value0.value3));
                                  return;
                              };
                              if (v.value0 instanceof ThreeRight) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2), v.value0.value3, new Two(v1.value0, v1.value1, v1.value2));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Internal (line 58, column 5 - line 63, column 90): " + [ v.value0.constructor.name, v1.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.List.Internal (line 55, column 3 - line 55, column 50): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              var down = function ($copy_ctx) {
                  return function ($copy_v) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v) {
                          if (v instanceof Leaf) {
                              $tco_done = true;
                              return {
                                  found: false,
                                  result: up(ctx)(new KickUp(Leaf.value, k, Leaf.value))
                              };
                          };
                          if (v instanceof Two) {
                              var v1 = comp(k)(v.value1);
                              if (v1 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return {
                                      found: true,
                                      result: orig
                                  };
                              };
                              if (v1 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v.value1, v.value2), ctx);
                                  $copy_v = v.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v.value0, v.value1), ctx);
                              $copy_v = v.value2;
                              return;
                          };
                          if (v instanceof Three) {
                              var v1 = comp(k)(v.value1);
                              if (v1 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return {
                                      found: true,
                                      result: orig
                                  };
                              };
                              var v2 = comp(k)(v.value3);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return {
                                      found: true,
                                      result: orig
                                  };
                              };
                              if (v1 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4), ctx);
                                  $copy_v = v.value0;
                                  return;
                              };
                              if (v1 instanceof Data_Ordering.GT && v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v.value0, v.value1, v.value3, v.value4), ctx);
                                  $copy_v = v.value2;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3), ctx);
                              $copy_v = v.value4;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Internal (line 38, column 3 - line 38, column 81): " + [ ctx.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value)(orig);
          };
      };
  };
  var emptySet = Leaf.value;
  exports["emptySet"] = emptySet;
  exports["insertAndLookupBy"] = insertAndLookupBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List_Internal = $PS["Data.List.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];                
  var Pattern = function (x) {
      return x;
  };
  var updateAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                  return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(updateAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var stripPrefix = function (dictEq) {
      return function (v) {
          return function (s) {
              var go = function (prefix) {
                  return function (input) {
                      if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                          return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                              a: prefix.value1,
                              b: input.value1
                          }));
                      };
                      if (prefix instanceof Data_List_Types.Nil) {
                          return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                      };
                      return Data_Maybe.Nothing.value;
                  };
              };
              return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
          };
      };
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init),
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value,
              rest: v1
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
      };
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List (line 477, column 3 - line 477, column 38): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              $copy_v = mergePairs(v);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var sequences = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(function (v1) {
                      return new Data_List_Types.Cons(v.value0, v1);
                  })(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = new Data_List_Types.Cons(a, as);
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var ascending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = function (ys) {
                              return as(new Data_List_Types.Cons(a, ys));
                          };
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function ($344) {
          return mergeAll(sequences($344));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var tails = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return singleton(Data_List_Types.Nil.value);
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(v, tails(v.value1));
      };
      throw new Error("Failed pattern match at Data.List (line 657, column 1 - line 657, column 43): " + [ v.constructor.name ]);
  };
  var showPattern = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
      });
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var take = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v, v1) {
                      if (v < 1) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $tco_var_v = v - 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 524, column 3 - line 524, column 35): " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  $tco_done = true;
                  return reverse(acc);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: acc,
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 274, column 3 - line 274, column 23): " + [ v.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_acc);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit),
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List (line 795, column 3 - line 795, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List (line 152, column 3 - line 153, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $225 = start > end;
                  if ($225) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List (line 148, column 1 - line 148, column 32): " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var partition = function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var $228 = p(x);
                  if ($228) {
                      return {
                          no: v.no,
                          yes: new Data_List_Types.Cons(x, v.yes)
                      };
                  };
                  return {
                      no: new Data_List_Types.Cons(x, v.no),
                      yes: v.yes
                  };
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              no: Data_List_Types.Nil.value,
              yes: Data_List_Types.Nil.value
          })(xs);
      };
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var nubBy = function (p) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              return function ($copy_v1) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, acc, v1) {
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return acc;
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          var v2 = Data_List_Internal.insertAndLookupBy(p)(v1.value0)(v);
                          if (v2.found) {
                              $tco_var_v = v2.result;
                              $tco_var_acc = acc;
                              $copy_v1 = v1.value1;
                              return;
                          };
                          $tco_var_v = v2.result;
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 689, column 5 - line 689, column 23): " + [ v.constructor.name, acc.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_acc, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      var $345 = go(Data_List_Internal.emptySet)(Data_List_Types.Nil.value);
      return function ($346) {
          return reverse($345($346));
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var newtypePattern = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 423, column 5 - line 425, column 32): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List (line 421, column 3 - line 421, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                          return new Data_List_Types.Cons(v, acc);
                      })(function (v) {
                          return reverse(acc);
                      })(aa));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var someRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
          };
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return singleton(x);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var v2 = v(x)(v1.value0);
                  if (v2 instanceof Data_Ordering.GT) {
                      return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Data_List_Types.Cons(x, v1);
              };
              throw new Error("Failed pattern match at Data.List (line 220, column 1 - line 220, column 68): " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(insertAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var index = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List (line 285, column 1 - line 285, column 44): " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  var transpose = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
          return transpose(v.value1);
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
      };
      throw new Error("Failed pattern match at Data.List (line 829, column 1 - line 829, column 54): " + [ v.constructor.name ]);
  };
  var groupBy = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              var v2 = span(v(v1.value0))(v1.value1);
              return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
          };
          throw new Error("Failed pattern match at Data.List (line 624, column 1 - line 624, column 80): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var groupAllBy = function (dictOrd) {
      return function (p) {
          var $347 = groupBy(p);
          var $348 = sort(dictOrd);
          return function ($349) {
              return $347($348($349));
          };
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var groupAll = function (dictOrd) {
      var $350 = group(dictOrd.Eq0());
      var $351 = sort(dictOrd);
      return function ($352) {
          return $350($351($352));
      };
  };
  var group$prime = function (dictWarn) {
      return function (dictOrd) {
          return groupAll(dictOrd);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var foldM = function (dictMonad) {
      return function (v) {
          return function (b) {
              return function (v1) {
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(b);
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(b)(v1.value0))(function (b$prime) {
                          return foldM(dictMonad)(v)(b$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List (line 840, column 1 - line 840, column 72): " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_v = v + 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List (line 305, column 3 - line 305, column 35): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (b) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (xs$prime) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (b) {
                                  return new Data_List_Types.Cons(v1.value0, xs$prime);
                              };
                              return xs$prime;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List (line 407, column 1 - line 407, column 75): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 394, column 3 - line 394, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubByEq = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(v1.value0, nubByEq(v)(filter(function (y) {
                  return !v(v1.value0)(y);
              })(v1.value1)));
          };
          throw new Error("Failed pattern match at Data.List (line 721, column 1 - line 721, column 61): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var nubEq = function (dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
  };
  var eqPattern = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
          };
      });
  };
  var ordPattern = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqPattern(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                  $copy_v = v.value1;
                  return;
              };
              $tco_done = true;
              return v;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  };
  var dropEnd = function (n) {
      return function (xs) {
          return take(length(xs) - n | 0)(xs);
      };
  };
  var drop = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v < 1) {
                  $tco_done = true;
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  $tco_var_v = v - 1 | 0;
                  $copy_v1 = v1.value1;
                  return;
              };
              throw new Error("Failed pattern match at Data.List (line 547, column 1 - line 547, column 42): " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start | 0)(drop(start)(xs));
          };
      };
  };
  var takeEnd = function (n) {
      return function (xs) {
          return drop(length(xs) - n | 0)(xs);
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List (line 748, column 1 - line 748, column 67): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                  return new Data_List_Types.Cons(v1.value0, v2);
              })(deleteAt(v - 1 | 0)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  var alterAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                  return Data_Maybe.Just.create((function () {
                      var v3 = v1(v2.value0);
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return v2.value1;
                      };
                      if (v3 instanceof Data_Maybe.Just) {
                          return new Data_List_Types.Cons(v3.value0, v2.value1);
                      };
                      throw new Error("Failed pattern match at Data.List (line 356, column 3 - line 358, column 23): " + [ v3.constructor.name ]);
                  })());
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(alterAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($353) {
              return Data_Maybe.Just.create(f($353));
          });
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["some"] = some;
  exports["someRec"] = someRec;
  exports["many"] = many;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["alterAt"] = alterAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["Pattern"] = Pattern;
  exports["stripPrefix"] = stripPrefix;
  exports["slice"] = slice;
  exports["take"] = take;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropEnd"] = dropEnd;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["groupAll"] = groupAll;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["groupAllBy"] = groupAllBy;
  exports["partition"] = partition;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["nubEq"] = nubEq;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["transpose"] = transpose;
  exports["foldM"] = foldM;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
  exports["all"] = Data_Foldable.all;
  exports["any"] = Data_Foldable.any;
  exports["elem"] = Data_Foldable.elem;
  exports["find"] = Data_Foldable.find;
  exports["findMap"] = Data_Foldable.findMap;
  exports["fold"] = Data_Foldable.fold;
  exports["foldMap"] = Data_Foldable.foldMap;
  exports["foldl"] = Data_Foldable.foldl;
  exports["foldr"] = Data_Foldable.foldr;
  exports["intercalate"] = Data_Foldable.intercalate;
  exports["notElem"] = Data_Foldable.notElem;
  exports["Cons"] = Data_List_Types.Cons;
  exports["Nil"] = Data_List_Types.Nil;
  exports["scanl"] = Data_Traversable.scanl;
  exports["scanr"] = Data_Traversable.scanr;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  var crash = function (dictPartial) {
      return crashWith()("Partial.crash: partial function");
  };
  exports["crash"] = crash;
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafePartial"] = unsafePartial;
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var zipWith = function (f) {
      return function (v) {
          return function (v1) {
              return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var wrappedOperation2 = function (name) {
      return function (f) {
          return function (v) {
              return function (v1) {
                  var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
                  if (v2 instanceof Data_List_Types.Cons) {
                      return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
                  };
                  if (v2 instanceof Data_List_Types.Nil) {
                      return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
                  };
                  throw new Error("Failed pattern match at Data.List.NonEmpty (line 110, column 3 - line 112, column 81): " + [ v2.constructor.name ]);
              };
          };
      };
  };
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 97, column 3 - line 99, column 81): " + [ v1.constructor.name ]);
          };
      };
  };
  var updateAt = function (i) {
      return function (a) {
          return function (v) {
              if (i === 0) {
                  return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($165) {
                      return Data_List_Types.NonEmptyList((function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, v1);
                      })($165));
                  })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 203, column 1 - line 203, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
          };
      };
  };
  var unzip = function (ts) {
      return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
  };
  var unsnoc = function (v) {
      var v1 = Data_List.unsnoc(v.value1);
      if (v1 instanceof Data_Maybe.Nothing) {
          return {
              init: Data_List_Types.Nil.value,
              last: v.value0
          };
      };
      if (v1 instanceof Data_Maybe.Just) {
          return {
              init: new Data_List_Types.Cons(v.value0, v1.value0.init),
              last: v1.value0.last
          };
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 165, column 35 - line 167, column 50): " + [ v1.constructor.name ]);
  };
  var unionBy = (function () {
      var $166 = wrappedOperation2("unionBy");
      return function ($167) {
          return $166(Data_List.unionBy($167));
      };
  })();
  var union = function (dictEq) {
      return wrappedOperation2("union")(Data_List.union(dictEq));
  };
  var uncons = function (v) {
      return {
          head: v.value0,
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $168 = Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(Data_List.uncons(xs));
      });
      return function ($169) {
          return $168(toList($169));
      };
  };
  var tail = function (v) {
      return v.value1;
  };
  var sortBy = (function () {
      var $170 = wrappedOperation("sortBy");
      return function ($171) {
          return $170(Data_List.sortBy($171));
      };
  })();
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (v) {
      return function (y) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
      };
  };
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var snoc$prime = function (v) {
      return function (y) {
          if (v instanceof Data_List_Types.Cons) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
          };
          if (v instanceof Data_List_Types.Nil) {
              return singleton(y);
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 145, column 1 - line 145, column 51): " + [ v.constructor.name, y.constructor.name ]);
      };
  };
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var nubEq = function (dictEq) {
      return wrappedOperation("nubEq")(Data_List.nubEq(dictEq));
  };
  var nubByEq = (function () {
      var $174 = wrappedOperation("nubByEq");
      return function ($175) {
          return $174(Data_List.nubByEq($175));
      };
  })();
  var nubBy = (function () {
      var $176 = wrappedOperation("nubBy");
      return function ($177) {
          return $176(Data_List.nubBy($177));
      };
  })();
  var nub = function (dictOrd) {
      return wrappedOperation("nub")(Data_List.nub(dictOrd));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (v) {
              if (i === 0) {
                  return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($178) {
                      return Data_List_Types.NonEmptyList((function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, v1);
                      })($178));
                  })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 208, column 1 - line 208, column 82): " + [ i.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
  var lift = function (f) {
      return function (v) {
          return f(new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  var mapMaybe = function ($179) {
      return lift(Data_List.mapMaybe($179));
  };
  var partition = function ($180) {
      return lift(Data_List.partition($180));
  };
  var span = function ($181) {
      return lift(Data_List.span($181));
  };
  var take = function ($182) {
      return lift(Data_List.take($182));
  };
  var takeWhile = function ($183) {
      return lift(Data_List.takeWhile($183));
  };
  var length = function (v) {
      return 1 + Data_List.length(v.value1) | 0;
  };
  var last = function (v) {
      return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
  };
  var intersectBy = (function () {
      var $184 = wrappedOperation2("intersectBy");
      return function ($185) {
          return $184(Data_List.intersectBy($185));
      };
  })();
  var intersect = function (dictEq) {
      return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
  };
  var insertAt = function (i) {
      return function (a) {
          return function (v) {
              if (i === 0) {
                  return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($186) {
                      return Data_List_Types.NonEmptyList((function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, v1);
                      })($186));
                  })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 198, column 1 - line 198, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
          };
      };
  };
  var init = function (v) {
      return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
          return new Data_List_Types.Cons(v.value0, v1);
      })(Data_List.init(v.value1));
  };
  var index = function (v) {
      return function (i) {
          if (i === 0) {
              return new Data_Maybe.Just(v.value0);
          };
          if (Data_Boolean.otherwise) {
              return Data_List.index(v.value1)(i - 1 | 0);
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 172, column 1 - line 172, column 52): " + [ v.constructor.name, i.constructor.name ]);
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var groupBy = (function () {
      var $187 = wrappedOperation("groupBy");
      return function ($188) {
          return $187(Data_List.groupBy($188));
      };
  })();
  var groupAllBy = function (dictOrd) {
      var $189 = wrappedOperation("groupAllBy");
      var $190 = Data_List.groupAllBy(dictOrd);
      return function ($191) {
          return $189($190($191));
      };
  };
  var groupAll = function (dictOrd) {
      return wrappedOperation("groupAll")(Data_List.groupAll(dictOrd));
  };
  var group$prime = function (dictWarn) {
      return function (dictOrd) {
          return groupAll(dictOrd);
      };
  };
  var group = function (dictEq) {
      return wrappedOperation("group")(Data_List.group(dictEq));
  };
  var fromList = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 126, column 1 - line 126, column 57): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      var $192 = Data_List.fromFoldable(dictFoldable);
      return function ($193) {
          return fromList($192($193));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0))(function (b$prime) {
                      return Data_List.foldM(dictMonad)(f)(b$prime)(v.value1);
                  });
              };
          };
      };
  };
  var findLastIndex = function (f) {
      return function (v) {
          var v1 = Data_List.findLastIndex(f)(v.value1);
          if (v1 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v1.value0 + 1 | 0);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              if (f(v.value0)) {
                  return new Data_Maybe.Just(0);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 3 - line 196, column 29): " + [ v1.constructor.name ]);
      };
  };
  var findIndex = function (f) {
      return function (v) {
          if (f(v.value0)) {
              return new Data_Maybe.Just(0);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1 + 1 | 0;
              })(Data_List.findIndex(f)(v.value1));
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 185, column 1 - line 185, column 69): " + [ f.constructor.name, v.constructor.name ]);
      };
  };
  var filterM = function (dictMonad) {
      var $194 = Data_List.filterM(dictMonad);
      return function ($195) {
          return lift($194($195));
      };
  };
  var filter = function ($196) {
      return lift(Data_List.filter($196));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function ($197) {
      return lift(Data_List.dropWhile($197));
  };
  var drop = function ($198) {
      return lift(Data_List.drop($198));
  };
  var cons$prime = function (x) {
      return function (xs) {
          return new Data_NonEmpty.NonEmpty(x, xs);
      };
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = lift(Data_List.catMaybes);
  var appendFoldable = function (dictFoldable) {
      return function (v) {
          return function (ys) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
          };
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["cons'"] = cons$prime;
  exports["snoc"] = snoc;
  exports["snoc'"] = snoc$prime;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["appendFoldable"] = appendFoldable;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["groupAll"] = groupAll;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["groupAllBy"] = groupAllBy;
  exports["partition"] = partition;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["nubEq"] = nubEq;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["foldM"] = foldM;
  exports["all"] = Data_Foldable.all;
  exports["any"] = Data_Foldable.any;
  exports["elem"] = Data_Foldable.elem;
  exports["find"] = Data_Foldable.find;
  exports["findMap"] = Data_Foldable.findMap;
  exports["fold"] = Data_Foldable.fold;
  exports["foldMap"] = Data_Foldable.foldMap;
  exports["foldl"] = Data_Foldable.foldl;
  exports["foldr"] = Data_Foldable.foldr;
  exports["intercalate"] = Data_Foldable.intercalate;
  exports["notElem"] = Data_Foldable.notElem;
  exports["NonEmptyList"] = Data_List_Types.NonEmptyList;
  exports["fold1"] = Data_Semigroup_Foldable.fold1;
  exports["foldMap1"] = Data_Semigroup_Foldable.foldMap1;
  exports["for1_"] = Data_Semigroup_Foldable.for1_;
  exports["sequence1_"] = Data_Semigroup_Foldable.sequence1_;
  exports["traverse1_"] = Data_Semigroup_Foldable.traverse1_;
  exports["sequence1"] = Data_Semigroup_Traversable.sequence1;
  exports["traverse1"] = Data_Semigroup_Traversable.traverse1;
  exports["traverse1Default"] = Data_Semigroup_Traversable.traverse1Default;
  exports["scanl"] = Data_Traversable.scanl;
  exports["scanr"] = Data_Traversable.scanr;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  var showNullable = function (dictShow) {
      return new Data_Show.Show((function () {
          var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
          return function ($6) {
              return $5(toMaybe($6));
          };
      })());
  };
  var eqNullable = function (dictEq) {
      return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
  };
  var ordNullable = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqNullable(dictOrd.Eq0());
      }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
  };
  var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqNullable(dictEq));
  });
  var ord1Nullable = new Data_Ord.Ord1(function () {
      return eq1Nullable;
  }, function (dictOrd) {
      return Data_Ord.compare(ordNullable(dictOrd));
  });
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["showNullable"] = showNullable;
  exports["eqNullable"] = eqNullable;
  exports["eq1Nullable"] = eq1Nullable;
  exports["ordNullable"] = ordNullable;
  exports["ord1Nullable"] = ord1Nullable;
  exports["null"] = $foreign["null"];
  exports["notNull"] = $foreign.notNull;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._makeSupervisedFiber = function (util, aff) {
    return function () {
      var supervisor = Aff.Supervisor(util);
      return {
        fiber: Aff.Fiber(util, supervisor, aff),
        supervisor: supervisor
      };
    };
  };

  exports._killAll = function (error, supervisor, cb) {
    return supervisor.killAll(error, cb);
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Cont.Trans"] = $PS["Control.Monad.Cont.Trans"] || {};
  var exports = $PS["Control.Monad.Cont.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Class = $PS["Effect.Class"];                
  var ContT = function (x) {
      return x;
  };
  var withContT = function (f) {
      return function (v) {
          return function (k) {
              return v(f(k));
          };
      };
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var newtypeContT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(k);
          };
      };
  });
  var mapContT = function (f) {
      return function (v) {
          return function (k) {
              return f(v(k));
          };
      };
  };
  var functorContT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (k) {
                  return v(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorContT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (k) {
                  return v(function (g) {
                      return v1(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyContT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (k$prime) {
                  return v(function (a) {
                      var v1 = k(a);
                      return v1(k$prime);
                  });
              };
          };
      });
  };
  var semigroupContT = function (dictApply) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyContT(dictApply))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var applicativeContT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyContT(dictApplicative.Apply0());
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeContT(dictMonad.Applicative0());
      }, function () {
          return bindContT(dictMonad.Bind1());
      });
  };
  var monadAskContT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadContT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderContT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskContT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return function (v) {
              return function (k) {
                  return Control_Bind.bind(((dictMonadReader.MonadAsk0()).Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (r) {
                      return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v((function () {
                          var $44 = Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](r));
                          return function ($45) {
                              return $44(k($45));
                          };
                      })()));
                  });
              };
          };
      });
  };
  var monadContContT = function (dictMonad) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadContT(dictMonad);
      }, function (f) {
          return function (k) {
              var v = f(function (a) {
                  return function (v1) {
                      return k(a);
                  };
              });
              return v(k);
          };
      });
  };
  var monadEffectContT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadContT(dictMonadEffect.Monad0());
      }, (function () {
          var $46 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0());
          var $47 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($48) {
              return $46($47($48));
          };
      })());
  };
  var monadStateContT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadContT(dictMonadState.Monad0());
      }, (function () {
          var $49 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0());
          var $50 = Control_Monad_State_Class.state(dictMonadState);
          return function ($51) {
              return $49($50($51));
          };
      })());
  };
  var monoidContT = function (dictApplicative) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupContT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(applicativeContT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  exports["ContT"] = ContT;
  exports["runContT"] = runContT;
  exports["mapContT"] = mapContT;
  exports["withContT"] = withContT;
  exports["newtypeContT"] = newtypeContT;
  exports["monadContContT"] = monadContContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffectContT"] = monadEffectContT;
  exports["monadAskContT"] = monadAskContT;
  exports["monadReaderContT"] = monadReaderContT;
  exports["monadStateContT"] = monadStateContT;
  exports["semigroupContT"] = semigroupContT;
  exports["monoidContT"] = monoidContT;
  exports["MonadCont"] = Control_Monad_Cont_Class.MonadCont;
  exports["callCC"] = Control_Monad_Cont_Class.callCC;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Maybe.Trans"] = $PS["Control.Monad.Maybe.Trans"] || {};
  var exports = $PS["Control.Monad.Maybe.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];                
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var newtypeMaybeT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $72 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
      return function ($73) {
          return MaybeT($72($73));
      };
  });
  var mapMaybeT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorMaybeT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
          };
      });
  };
  var monadMaybeT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var bindMaybeT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      var v2 = f(v1.value0);
                      return v2;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 55, column 11 - line 57, column 42): " + [ v1.constructor.name ]);
              });
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, (function () {
          var $74 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($75) {
              return MaybeT($74(Data_Maybe.Just.create($75)));
          };
      })());
  };
  var semigroupMaybeT = function (dictMonad) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyMaybeT(dictMonad))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var monadAskMaybeT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadMaybeT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderMaybeT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskMaybeT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadContMaybeT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadMaybeT(dictMonadCont.Monad0());
      }, function (f) {
          return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var v = f(function (a) {
                  return MaybeT(c(new Data_Maybe.Just(a)));
              });
              return v;
          }));
      });
  };
  var monadEffectMaybe = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadMaybeT(dictMonadEffect.Monad0());
      }, (function () {
          var $76 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0());
          var $77 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($78) {
              return $76($77($78));
          };
      })());
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec.Monad0());
      }, function (f) {
          var $79 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
              var v = f(a);
              return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v)(function (m$prime) {
                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                      if (m$prime instanceof Data_Maybe.Nothing) {
                          return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                      };
                      if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                          return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                      };
                      if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                          return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 85, column 16 - line 88, column 43): " + [ m$prime.constructor.name ]);
                  })());
              });
          });
          return function ($80) {
              return MaybeT($79($80));
          };
      });
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadTellMaybeT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadMaybeT(dictMonadTell.Monad1());
      }, dictMonadTell.Semigroup0, (function () {
          var $81 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad1());
          var $82 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function ($83) {
              return $81($82($83));
          };
      })());
  };
  var monadWriterMaybeT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellMaybeT(dictMonadWriter.MonadTell1());
      }, dictMonadWriter.Monoid0, mapMaybeT(function (m) {
          return Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapMaybeT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(m)(function (a) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())((function () {
                  if (a instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
                  };
                  if (a instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(new Data_Maybe.Just(a.value0.value0), a.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 122, column 10 - line 124, column 43): " + [ a.constructor.name ]);
              })());
          }));
      }));
  };
  var monadThrowMaybeT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadMaybeT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var monadErrorMaybeT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowMaybeT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                  var v1 = h(a);
                  return v1;
              }));
          };
      });
  };
  var monoidMaybeT = function (dictMonad) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupMaybeT(dictMonad)(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(applicativeMaybeT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (m) {
                  if (m instanceof Data_Maybe.Nothing) {
                      return v1;
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(m);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
  };
  var alternativeMaybeT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return plusMaybeT(dictMonad);
      });
  };
  var monadPlusMaybeT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      });
  };
  var monadZeroMaybeT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      }, function () {
          return undefined;
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["mapMaybeT"] = mapMaybeT;
  exports["newtypeMaybeT"] = newtypeMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["alternativeMaybeT"] = alternativeMaybeT;
  exports["monadPlusMaybeT"] = monadPlusMaybeT;
  exports["monadZeroMaybeT"] = monadZeroMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
  exports["monadEffectMaybe"] = monadEffectMaybe;
  exports["monadContMaybeT"] = monadContMaybeT;
  exports["monadThrowMaybeT"] = monadThrowMaybeT;
  exports["monadErrorMaybeT"] = monadErrorMaybeT;
  exports["monadAskMaybeT"] = monadAskMaybeT;
  exports["monadReaderMaybeT"] = monadReaderMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
  exports["monadTellMaybeT"] = monadTellMaybeT;
  exports["monadWriterMaybeT"] = monadWriterMaybeT;
  exports["semigroupMaybeT"] = semigroupMaybeT;
  exports["monoidMaybeT"] = monoidMaybeT;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Equality"] = $PS["Type.Equality"] || {};
  var exports = $PS["Type.Equality"];
  var TypeEquals = function (Coercible0, proof) {
      this.Coercible0 = Coercible0;
      this.proof = proof;
  };
  var To = function (x) {
      return x;
  };
  var From = function (x) {
      return x;
  };
  var refl = new TypeEquals(function () {
      return undefined;
  }, function (a) {
      return a;
  });
  var proof = function (dict) {
      return dict.proof;
  };
  var to = function (dictTypeEquals) {
      var v = proof(dictTypeEquals)(function (a) {
          return a;
      });
      return v;
  };
  var from = function (dictTypeEquals) {
      var v = proof(dictTypeEquals)(function (a) {
          return a;
      });
      return v;
  };
  exports["TypeEquals"] = TypeEquals;
  exports["proof"] = proof;
  exports["to"] = to;
  exports["from"] = from;
  exports["refl"] = refl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Distributive"] = $PS["Data.Distributive"] || {};
  var exports = $PS["Data.Distributive"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Type_Equality = $PS["Type.Equality"];                
  var Distributive = function (Functor0, collect, distribute) {
      this.Functor0 = Functor0;
      this.collect = collect;
      this.distribute = distribute;
  };
  var distributiveIdentity = new Distributive(function () {
      return Data_Identity.functorIdentity;
  }, function (dictFunctor) {
      return function (f) {
          var $14 = Data_Functor.map(dictFunctor)((function () {
              var $16 = Data_Newtype.unwrap();
              return function ($17) {
                  return $16(f($17));
              };
          })());
          return function ($15) {
              return Data_Identity.Identity($14($15));
          };
      };
  }, function (dictFunctor) {
      var $18 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap());
      return function ($19) {
          return Data_Identity.Identity($18($19));
      };
  });
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = new Distributive(function () {
      return Data_Functor.functorFn;
  }, function (dictFunctor) {
      return function (f) {
          var $20 = distribute(distributiveFunction)(dictFunctor);
          var $21 = Data_Functor.map(dictFunctor)(f);
          return function ($22) {
              return $20($21($22));
          };
      };
  }, function (dictFunctor) {
      return function (a) {
          return function (e) {
              return Data_Functor.map(dictFunctor)(function (v) {
                  return v(e);
              })(a);
          };
      };
  });
  var cotraverse = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              var $23 = Data_Functor.map(dictDistributive.Functor0())(f);
              var $24 = distribute(dictDistributive)(dictFunctor);
              return function ($25) {
                  return $23($24($25));
              };
          };
      };
  };
  var collectDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              var $26 = distribute(dictDistributive)(dictFunctor);
              var $27 = Data_Functor.map(dictFunctor)(f);
              return function ($28) {
                  return $26($27($28));
              };
          };
      };
  };
  var distributiveTuple = function (dictTypeEquals) {
      return new Distributive(function () {
          return Data_Tuple.functorTuple;
      }, function (dictFunctor) {
          return collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
      }, function (dictFunctor) {
          var $29 = Data_Tuple.Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
          var $30 = Data_Functor.map(dictFunctor)(Data_Tuple.snd);
          return function ($31) {
              return $29($30($31));
          };
      });
  };
  var collect = function (dict) {
      return dict.collect;
  };
  var distributeDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["collect"] = collect;
  exports["distribute"] = distribute;
  exports["Distributive"] = Distributive;
  exports["distributeDefault"] = distributeDefault;
  exports["collectDefault"] = collectDefault;
  exports["cotraverse"] = cotraverse;
  exports["distributiveIdentity"] = distributiveIdentity;
  exports["distributiveFunction"] = distributiveFunction;
  exports["distributiveTuple"] = distributiveTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Distributive = $PS["Data.Distributive"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($63) {
              return v(f($63));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };
  var newtypeReaderT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($64) {
          return ReaderT(Data_Function["const"]($64));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $66 = Data_Functor.map(dictFunctor);
          return function ($67) {
              return mapReaderT($66($67));
          };
      })());
  };
  var distributiveReaderT = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorReaderT(dictDistributive.Functor0());
      }, function (dictFunctor) {
          return function (f) {
              var $68 = Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor);
              var $69 = Data_Functor.map(dictFunctor)(f);
              return function ($70) {
                  return $68($69($70));
              };
          };
      }, function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                      return r(e);
                  })(a);
              };
          };
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var semigroupReaderT = function (dictApply) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $71 = Control_Applicative.pure(dictApplicative);
          return function ($72) {
              return ReaderT(Data_Function["const"]($71($72)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskReaderT(dictMonad);
      }, withReaderT);
  };
  var monadContReaderT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadReaderT(dictMonadCont.Monad0());
      }, function (f) {
          return function (r) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function ($73) {
                      return ReaderT(Data_Function["const"](c($73)));
                  });
                  return v(r);
              });
          };
      });
  };
  var monadEffectReader = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadReaderT(dictMonadEffect.Monad0());
      }, (function () {
          var $74 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
          var $75 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($76) {
              return $74($75($76));
          };
      })());
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec.Monad0());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a$prime) {
                      var v = k(a$prime);
                      return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState.Monad0());
      }, (function () {
          var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
          var $78 = Control_Monad_State_Class.state(dictMonadState);
          return function ($79) {
              return $77($78($79));
          };
      })());
  };
  var monadTellReaderT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadReaderT(dictMonadTell.Monad1());
      }, dictMonadTell.Semigroup0, (function () {
          var $80 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad1());
          var $81 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function ($82) {
              return $80($81($82));
          };
      })());
  };
  var monadWriterReaderT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellReaderT(dictMonadWriter.MonadTell1());
      }, dictMonadWriter.Monoid0, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadReaderT(dictMonadThrow.Monad0());
      }, (function () {
          var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
          var $84 = Control_Monad_Error_Class.throwError(dictMonadThrow);
          return function ($85) {
              return $83($84($85));
          };
      })());
  };
  var monadErrorReaderT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowReaderT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return function (r) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                      var v1 = h(e);
                      return v1(r);
                  });
              };
          };
      });
  };
  var monoidReaderT = function (dictApplicative) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var altReaderT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorReaderT(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Alt.alt(dictAlt)(v(r))(v1(r));
              };
          };
      });
  };
  var plusReaderT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altReaderT(dictPlus.Alt0());
      }, Data_Function["const"](Control_Plus.empty(dictPlus)));
  };
  var alternativeReaderT = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return applicativeReaderT(dictAlternative.Applicative0());
      }, function () {
          return plusReaderT(dictAlternative.Plus1());
      });
  };
  var monadPlusReaderT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeReaderT(dictMonadPlus.Alternative1());
      }, function () {
          return monadReaderT(dictMonadPlus.Monad0());
      });
  };
  var monadZeroReaderT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeReaderT(dictMonadZero.Alternative1());
      }, function () {
          return monadReaderT(dictMonadZero.Monad0());
      }, function () {
          return undefined;
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["newtypeReaderT"] = newtypeReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["plusReaderT"] = plusReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadZeroReaderT"] = monadZeroReaderT;
  exports["semigroupReaderT"] = semigroupReaderT;
  exports["monoidReaderT"] = monoidReaderT;
  exports["monadPlusReaderT"] = monadPlusReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadContReaderT"] = monadContReaderT;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
  exports["monadTellReaderT"] = monadTellReaderT;
  exports["monadWriterReaderT"] = monadWriterReaderT;
  exports["distributiveReaderT"] = distributiveReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;
  exports["MonadAsk"] = Control_Monad_Reader_Class.MonadAsk;
  exports["MonadReader"] = Control_Monad_Reader_Class.MonadReader;
  exports["ask"] = Control_Monad_Reader_Class.ask;
  exports["asks"] = Control_Monad_Reader_Class.asks;
  exports["local"] = Control_Monad_Reader_Class.local;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Writer.Trans"] = $PS["Control.Monad.Writer.Trans"] || {};
  var exports = $PS["Control.Monad.Writer.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];                
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var newtypeWriterT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
              });
          };
      });
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var execWriterT = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var semigroupWriterT = function (dictApply) {
      return function (dictSemigroup) {
          return function (dictSemigroup1) {
              return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyWriterT(dictSemigroup)(dictApply))(Data_Semigroup.append(dictSemigroup1)));
          };
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadAskWriterT = function (dictMonoid) {
      return function (dictMonadAsk) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
          }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
      };
  };
  var monadReaderWriterT = function (dictMonoid) {
      return function (dictMonadReader) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
          }, function (f) {
              return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          });
      };
  };
  var monadContWriterT = function (dictMonoid) {
      return function (dictMonadCont) {
          return new Control_Monad_Cont_Class.MonadCont(function () {
              return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
          }, function (f) {
              return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function (a) {
                      return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                  });
                  return v;
              }));
          });
      };
  };
  var monadEffectWriter = function (dictMonoid) {
      return function (dictMonadEffect) {
          return new Effect_Class.MonadEffect(function () {
              return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
          }, (function () {
              var $124 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
              var $125 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($126) {
                  return $124($125($126));
              };
          })());
      };
  };
  var monadRecWriterT = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
          }, function (f) {
              return function (a) {
                  var f$prime = function (v) {
                      var v1 = f(v.value0);
                      return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1)(function (v2) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                              if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                                  return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                              };
                              if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                                  return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 84, column 16 - line 86, column 47): " + [ v2.value0.constructor.name ]);
                          })());
                      });
                  };
                  return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              };
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState.Monad0());
          }, function (f) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, dictMonoid.Semigroup0, (function () {
              var $127 = Control_Applicative.pure(dictMonad.Applicative0());
              var $128 = Data_Tuple.Tuple.create(Data_Unit.unit);
              return function ($129) {
                  return WriterT($127($128($129)));
              };
          })());
      };
  };
  var monadWriterWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellWriterT(dictMonoid)(dictMonad);
          }, function () {
              return dictMonoid;
          }, function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
              });
          }, function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
              });
          });
      };
  };
  var monadThrowWriterT = function (dictMonoid) {
      return function (dictMonadThrow) {
          return new Control_Monad_Error_Class.MonadThrow(function () {
              return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          });
      };
  };
  var monadErrorWriterT = function (dictMonoid) {
      return function (dictMonadError) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
          }, function (v) {
              return function (h) {
                  return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                      var v1 = h(e);
                      return v1;
                  }));
              };
          });
      };
  };
  var monoidWriterT = function (dictApplicative) {
      return function (dictMonoid) {
          return function (dictMonoid1) {
              return new Data_Monoid.Monoid(function () {
                  return semigroupWriterT(dictApplicative.Apply0())(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
              }, Control_Applicative.pure(applicativeWriterT(dictMonoid)(dictApplicative))(Data_Monoid.mempty(dictMonoid1)));
          };
      };
  };
  var altWriterT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorWriterT(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusWriterT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altWriterT(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var alternativeWriterT = function (dictMonoid) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
          }, function () {
              return plusWriterT(dictAlternative.Plus1());
          });
      };
  };
  var monadPlusWriterT = function (dictMonoid) {
      return function (dictMonadPlus) {
          return new Control_MonadPlus.MonadPlus(function () {
              return alternativeWriterT(dictMonoid)(dictMonadPlus.Alternative1());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadPlus.Monad0());
          });
      };
  };
  var monadZeroWriterT = function (dictMonoid) {
      return function (dictMonadZero) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
          }, function () {
              return undefined;
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["runWriterT"] = runWriterT;
  exports["execWriterT"] = execWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["newtypeWriterT"] = newtypeWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["altWriterT"] = altWriterT;
  exports["plusWriterT"] = plusWriterT;
  exports["alternativeWriterT"] = alternativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadRecWriterT"] = monadRecWriterT;
  exports["monadZeroWriterT"] = monadZeroWriterT;
  exports["monadPlusWriterT"] = monadPlusWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffectWriter"] = monadEffectWriter;
  exports["monadContWriterT"] = monadContWriterT;
  exports["monadThrowWriterT"] = monadThrowWriterT;
  exports["monadErrorWriterT"] = monadErrorWriterT;
  exports["monadAskWriterT"] = monadAskWriterT;
  exports["monadReaderWriterT"] = monadReaderWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
  exports["monadWriterWriterT"] = monadWriterWriterT;
  exports["semigroupWriterT"] = semigroupWriterT;
  exports["monoidWriterT"] = monoidWriterT;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
  exports["MonadTell"] = Control_Monad_Writer_Class.MonadTell;
  exports["MonadWriter"] = Control_Monad_Writer_Class.MonadWriter;
  exports["censor"] = Control_Monad_Writer_Class.censor;
  exports["listen"] = Control_Monad_Writer_Class.listen;
  exports["listens"] = Control_Monad_Writer_Class.listens;
  exports["pass"] = Control_Monad_Writer_Class.pass;
  exports["tell"] = Control_Monad_Writer_Class.tell;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Contravariant"] = $PS["Data.Functor.Contravariant"] || {};
  var exports = $PS["Data.Functor.Contravariant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Void = $PS["Data.Void"];                
  var Contravariant = function (cmap) {
      this.cmap = cmap;
  };
  var contravariantConst = new Contravariant(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var cmap = function (dict) {
      return dict.cmap;
  };
  var cmapFlipped = function (dictContravariant) {
      return function (x) {
          return function (f) {
              return cmap(dictContravariant)(f)(x);
          };
      };
  };
  var coerce = function (dictContravariant) {
      return function (dictFunctor) {
          return function (a) {
              return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
          };
      };
  };
  var imapC = function (dictContravariant) {
      return function (v) {
          return function (f) {
              return cmap(dictContravariant)(f);
          };
      };
  };
  exports["cmap"] = cmap;
  exports["Contravariant"] = Contravariant;
  exports["cmapFlipped"] = cmapFlipped;
  exports["coerce"] = coerce;
  exports["imapC"] = imapC;
  exports["contravariantConst"] = contravariantConst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var lcmap = function (dictProfunctor) {
      return function (a2b) {
          return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  var unwrapIso = function (dictProfunctor) {
      return function (dictNewtype) {
          return dimap(dictProfunctor)(Data_Newtype.wrap())(Data_Newtype.unwrap());
      };
  };
  var wrapIso = function (dictProfunctor) {
      return function (dictNewtype) {
          return function (v) {
              return dimap(dictProfunctor)(Data_Newtype.unwrap())(Data_Newtype.wrap());
          };
      };
  };
  var arr = function (dictCategory) {
      return function (dictProfunctor) {
          return function (f) {
              return rmap(dictProfunctor)(f)(Control_Category.identity(dictCategory));
          };
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["lcmap"] = lcmap;
  exports["rmap"] = rmap;
  exports["arr"] = arr;
  exports["unwrapIso"] = unwrapIso;
  exports["wrapIso"] = wrapIso;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Closed"] = $PS["Data.Profunctor.Closed"] || {};
  var exports = $PS["Data.Profunctor.Closed"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Closed = function (Profunctor0, closed) {
      this.Profunctor0 = Profunctor0;
      this.closed = closed;
  };
  var closedFunction = new Closed(function () {
      return Data_Profunctor.profunctorFn;
  }, Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var closed = function (dict) {
      return dict.closed;
  };
  exports["closed"] = closed;
  exports["Closed"] = Closed;
  exports["closedFunction"] = closedFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["splitStrong"] = splitStrong;
  exports["fanout"] = fanout;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Costar"] = $PS["Data.Functor.Costar"] || {};
  var exports = $PS["Data.Functor.Costar"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Distributive = $PS["Data.Distributive"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Closed = $PS["Data.Profunctor.Closed"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Costar = function (x) {
      return x;
  };
  var semigroupoidCostar = function (dictExtend) {
      return new Control_Semigroupoid.Semigroupoid(function (v) {
          return function (v1) {
              return Control_Extend.composeCoKleisliFlipped(dictExtend)(v)(v1);
          };
      });
  };
  var profunctorCostar = function (dictFunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  var $46 = Data_Functor.map(dictFunctor)(f);
                  return function ($47) {
                      return g(v($46($47)));
                  };
              };
          };
      });
  };
  var strongCostar = function (dictComonad) {
      return new Data_Profunctor_Strong.Strong(function () {
          return profunctorCostar((dictComonad.Extend0()).Functor0());
      }, function (v) {
          return function (x) {
              return new Data_Tuple.Tuple(v(Data_Functor.map((dictComonad.Extend0()).Functor0())(Data_Tuple.fst)(x)), Data_Tuple.snd(Control_Comonad.extract(dictComonad)(x)));
          };
      }, function (v) {
          return function (x) {
              return new Data_Tuple.Tuple(Data_Tuple.fst(Control_Comonad.extract(dictComonad)(x)), v(Data_Functor.map((dictComonad.Extend0()).Functor0())(Data_Tuple.snd)(x)));
          };
      });
  };
  var newtypeCostar = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var hoistCostar = function (f) {
      return function (v) {
          return Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(f)(v);
      };
  };
  var functorCostar = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function ($48) {
              return f(v($48));
          };
      };
  });
  var invariantCostar = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorCostar));
  var distributiveCostar = new Data_Distributive.Distributive(function () {
      return functorCostar;
  }, function (dictFunctor) {
      return function (f) {
          var $49 = Data_Distributive.distribute(distributiveCostar)(dictFunctor);
          var $50 = Data_Functor.map(dictFunctor)(f);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (dictFunctor) {
      return function (f) {
          return function (a) {
              return Data_Functor.map(dictFunctor)(function (v) {
                  return v(a);
              })(f);
          };
      };
  });
  var closedCostar = function (dictFunctor) {
      return new Data_Profunctor_Closed.Closed(function () {
          return profunctorCostar(dictFunctor);
      }, function (v) {
          return function (g) {
              return function (x) {
                  return v(Data_Functor.map(dictFunctor)(function (v1) {
                      return v1(x);
                  })(g));
              };
          };
      });
  };
  var categoryCostar = function (dictComonad) {
      return new Control_Category.Category(function () {
          return semigroupoidCostar(dictComonad.Extend0());
      }, Control_Comonad.extract(dictComonad));
  };
  var bifunctorCostar = function (dictContravariant) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  var $52 = Data_Functor_Contravariant.cmap(dictContravariant)(f);
                  return function ($53) {
                      return g(v($52($53)));
                  };
              };
          };
      });
  };
  var applyCostar = new Control_Apply.Apply(function () {
      return functorCostar;
  }, function (v) {
      return function (v1) {
          return function (a) {
              return v(a)(v1(a));
          };
      };
  });
  var bindCostar = new Control_Bind.Bind(function () {
      return applyCostar;
  }, function (v) {
      return function (f) {
          return function (x) {
              var v1 = f(v(x));
              return v1(x);
          };
      };
  });
  var applicativeCostar = new Control_Applicative.Applicative(function () {
      return applyCostar;
  }, function (a) {
      return function (v) {
          return a;
      };
  });
  var monadCostar = new Control_Monad.Monad(function () {
      return applicativeCostar;
  }, function () {
      return bindCostar;
  });
  exports["Costar"] = Costar;
  exports["hoistCostar"] = hoistCostar;
  exports["newtypeCostar"] = newtypeCostar;
  exports["semigroupoidCostar"] = semigroupoidCostar;
  exports["categoryCostar"] = categoryCostar;
  exports["functorCostar"] = functorCostar;
  exports["invariantCostar"] = invariantCostar;
  exports["applyCostar"] = applyCostar;
  exports["applicativeCostar"] = applicativeCostar;
  exports["bindCostar"] = bindCostar;
  exports["monadCostar"] = monadCostar;
  exports["distributiveCostar"] = distributiveCostar;
  exports["bifunctorCostar"] = bifunctorCostar;
  exports["profunctorCostar"] = profunctorCostar;
  exports["strongCostar"] = strongCostar;
  exports["closedCostar"] = closedCostar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var left = function (dict) {
      return dict.left;
  };
  var splitChoice = function (dictCategory) {
      return function (dictChoice) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(left(dictChoice)(l))(right(dictChoice)(r));
              };
          };
      };
  };
  var fanin = function (dictCategory) {
      return function (dictChoice) {
          return function (l) {
              return function (r) {
                  var join = Data_Profunctor.dimap(dictChoice.Profunctor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
              };
          };
      };
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["left"] = left;
  exports["right"] = right;
  exports["Choice"] = Choice;
  exports["splitChoice"] = splitChoice;
  exports["fanin"] = fanin;
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Star"] = $PS["Data.Profunctor.Star"] || {};
  var exports = $PS["Data.Profunctor.Star"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Distributive = $PS["Data.Distributive"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Closed = $PS["Data.Profunctor.Closed"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Star = function (x) {
      return x;
  };
  var semigroupoidStar = function (dictBind) {
      return new Control_Semigroupoid.Semigroupoid(function (v) {
          return function (v1) {
              return function (x) {
                  return Control_Bind.bind(dictBind)(v1(x))(v);
              };
          };
      });
  };
  var profunctorStar = function (dictFunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  var $75 = Data_Functor.map(dictFunctor)(g);
                  return function ($76) {
                      return $75(v(f($76)));
                  };
              };
          };
      });
  };
  var strongStar = function (dictFunctor) {
      return new Data_Profunctor_Strong.Strong(function () {
          return profunctorStar(dictFunctor);
      }, function (v) {
          return function (v1) {
              return Data_Functor.map(dictFunctor)(function (v2) {
                  return new Data_Tuple.Tuple(v2, v1.value1);
              })(v(v1.value0));
          };
      }, function (v) {
          return function (v1) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create(v1.value0))(v(v1.value1));
          };
      });
  };
  var newtypeStar = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var invariantStar = function (dictInvariant) {
      return new Data_Functor_Invariant.Invariant(function (f) {
          return function (g) {
              return function (v) {
                  var $77 = Data_Functor_Invariant.imap(dictInvariant)(f)(g);
                  return function ($78) {
                      return $77(v($78));
                  };
              };
          };
      });
  };
  var hoistStar = function (f) {
      return function (v) {
          return function ($79) {
              return f(v($79));
          };
      };
  };
  var functorStar = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              var $80 = Data_Functor.map(dictFunctor)(f);
              return function ($81) {
                  return $80(v($81));
              };
          };
      });
  };
  var distributiveStar = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorStar(dictDistributive.Functor0());
      }, function (dictFunctor) {
          return function (f) {
              var $82 = Data_Distributive.distribute(distributiveStar(dictDistributive))(dictFunctor);
              var $83 = Data_Functor.map(dictFunctor)(f);
              return function ($84) {
                  return $82($83($84));
              };
          };
      }, function (dictFunctor) {
          return function (f) {
              return function (a) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (v) {
                      return v(a);
                  })(f);
              };
          };
      });
  };
  var closedStar = function (dictDistributive) {
      return new Data_Profunctor_Closed.Closed(function () {
          return profunctorStar(dictDistributive.Functor0());
      }, function (v) {
          return function (g) {
              return Data_Distributive.distribute(dictDistributive)(Data_Functor.functorFn)(function ($85) {
                  return v(g($85));
              });
          };
      });
  };
  var choiceStar = function (dictApplicative) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorStar((dictApplicative.Apply0()).Functor0());
      }, function (v) {
          return Star(Data_Either.either((function () {
              var $86 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Left.create);
              return function ($87) {
                  return $86(v($87));
              };
          })())((function () {
              var $88 = Control_Applicative.pure(dictApplicative);
              return function ($89) {
                  return $88(Data_Either.Right.create($89));
              };
          })()));
      }, function (v) {
          return Star(Data_Either.either((function () {
              var $90 = Control_Applicative.pure(dictApplicative);
              return function ($91) {
                  return $90(Data_Either.Left.create($91));
              };
          })())((function () {
              var $92 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create);
              return function ($93) {
                  return $92(v($93));
              };
          })()));
      });
  };
  var categoryStar = function (dictMonad) {
      return new Control_Category.Category(function () {
          return semigroupoidStar(dictMonad.Bind1());
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var applyStar = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorStar(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (a) {
                  return Control_Apply.apply(dictApply)(v(a))(v1(a));
              };
          };
      });
  };
  var bindStar = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyStar(dictBind.Apply0());
      }, function (v) {
          return function (f) {
              return function (x) {
                  return Control_Bind.bind(dictBind)(v(x))(function (a) {
                      var v1 = f(a);
                      return v1(x);
                  });
              };
          };
      });
  };
  var applicativeStar = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyStar(dictApplicative.Apply0());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  var monadStar = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStar(dictMonad.Applicative0());
      }, function () {
          return bindStar(dictMonad.Bind1());
      });
  };
  var altStar = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorStar(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return function (a) {
                  return Control_Alt.alt(dictAlt)(v(a))(v1(a));
              };
          };
      });
  };
  var plusStar = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altStar(dictPlus.Alt0());
      }, function (v) {
          return Control_Plus.empty(dictPlus);
      });
  };
  var alternativeStar = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return applicativeStar(dictAlternative.Applicative0());
      }, function () {
          return plusStar(dictAlternative.Plus1());
      });
  };
  var monadPlusStar = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeStar(dictMonadPlus.Alternative1());
      }, function () {
          return monadStar(dictMonadPlus.Monad0());
      });
  };
  var monadZeroStar = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeStar(dictMonadZero.Alternative1());
      }, function () {
          return monadStar(dictMonadZero.Monad0());
      }, function () {
          return undefined;
      });
  };
  exports["Star"] = Star;
  exports["hoistStar"] = hoistStar;
  exports["newtypeStar"] = newtypeStar;
  exports["semigroupoidStar"] = semigroupoidStar;
  exports["categoryStar"] = categoryStar;
  exports["functorStar"] = functorStar;
  exports["invariantStar"] = invariantStar;
  exports["applyStar"] = applyStar;
  exports["applicativeStar"] = applicativeStar;
  exports["bindStar"] = bindStar;
  exports["monadStar"] = monadStar;
  exports["altStar"] = altStar;
  exports["plusStar"] = plusStar;
  exports["alternativeStar"] = alternativeStar;
  exports["monadZeroStar"] = monadZeroStar;
  exports["monadPlusStar"] = monadPlusStar;
  exports["distributiveStar"] = distributiveStar;
  exports["profunctorStar"] = profunctorStar;
  exports["strongStar"] = strongStar;
  exports["choiceStar"] = choiceStar;
  exports["closedStar"] = closedStar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Cont_Trans = $PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = $PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Compose = $PS["Data.Functor.Compose"];
  var Data_Functor_Costar = $PS["Data.Functor.Costar"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Star = $PS["Data.Profunctor.Star"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var ParCont = function (x) {
      return x;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  var newtypeParCont = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadParWriterT = function (dictMonoid) {
      return function (dictParallel) {
          return new Parallel(function () {
              return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
          }, function () {
              return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
          }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
      };
  };
  var monadParStar = function (dictParallel) {
      return new Parallel(function () {
          return Data_Profunctor_Star.applicativeStar(dictParallel.Applicative1());
      }, function () {
          return Data_Profunctor_Star.monadStar(dictParallel.Monad0());
      }, function (v) {
          return Data_Profunctor_Star.Star((function () {
              var $47 = parallel(dictParallel);
              return function ($48) {
                  return $47(v($48));
              };
          })());
      }, function (v) {
          return Data_Profunctor_Star.Star((function () {
              var $49 = sequential(dictParallel);
              return function ($50) {
                  return $49(v($50));
              };
          })());
      });
  };
  var monadParReaderT = function (dictParallel) {
      return new Parallel(function () {
          return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
      }, function () {
          return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
      }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
  };
  var monadParMaybeT = function (dictParallel) {
      return new Parallel(function () {
          return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
      }, function () {
          return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
      }, function (v) {
          return parallel(dictParallel)(v);
      }, function (v) {
          return sequential(dictParallel)(v);
      });
  };
  var monadParExceptT = function (dictParallel) {
      return new Parallel(function () {
          return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
      }, function () {
          return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
      }, function (v) {
          return parallel(dictParallel)(v);
      }, function (v) {
          return sequential(dictParallel)(v);
      });
  };
  var monadParCostar = function (dictParallel) {
      return new Parallel(function () {
          return Data_Functor_Costar.applicativeCostar;
      }, function () {
          return Data_Functor_Costar.monadCostar;
      }, function (v) {
          return Data_Functor_Costar.Costar((function () {
              var $51 = sequential(dictParallel);
              return function ($52) {
                  return v($51($52));
              };
          })());
      }, function (v) {
          return Data_Functor_Costar.Costar((function () {
              var $53 = parallel(dictParallel);
              return function ($54) {
                  return v($53($54));
              };
          })());
      });
  };
  var monadParParCont = function (dictMonadEffect) {
      return new Parallel(function () {
          return applicativeParCont(dictMonadEffect);
      }, function () {
          return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
      }, ParCont, function (v) {
          return v;
      });
  };
  var functorParCont = function (dictMonadEffect) {
      return new Data_Functor.Functor(function (f) {
          var $55 = parallel(monadParParCont(dictMonadEffect));
          var $56 = Data_Functor.map(Control_Monad_Cont_Trans.functorContT((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0()))(f);
          var $57 = sequential(monadParParCont(dictMonadEffect));
          return function ($58) {
              return $55($56($57($58)));
          };
      });
  };
  var applyParCont = function (dictMonadEffect) {
      return new Control_Apply.Apply(function () {
          return functorParCont(dictMonadEffect);
      }, function (v) {
          return function (v1) {
              return ParCont(function (k) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (ra) {
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (rb) {
                          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(rb)))(function (mb) {
                                  if (mb instanceof Data_Maybe.Nothing) {
                                      return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(ra));
                                  };
                                  if (mb instanceof Data_Maybe.Just) {
                                      return k(a(mb.value0));
                                  };
                                  throw new Error("Failed pattern match at Control.Parallel.Class (line 82, column 7 - line 84, column 26): " + [ mb.constructor.name ]);
                              });
                          }))(function () {
                              return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(ra)))(function (ma) {
                                      if (ma instanceof Data_Maybe.Nothing) {
                                          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(rb));
                                      };
                                      if (ma instanceof Data_Maybe.Just) {
                                          return k(ma.value0(b));
                                      };
                                      throw new Error("Failed pattern match at Control.Parallel.Class (line 88, column 7 - line 90, column 26): " + [ ma.constructor.name ]);
                                  });
                              });
                          });
                      });
                  });
              });
          };
      });
  };
  var applicativeParCont = function (dictMonadEffect) {
      return new Control_Applicative.Applicative(function () {
          return applyParCont(dictMonadEffect);
      }, (function () {
          var $59 = parallel(monadParParCont(dictMonadEffect));
          var $60 = Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT((dictMonadEffect.Monad0()).Applicative0()));
          return function ($61) {
              return $59($60($61));
          };
      })());
  };
  var altParCont = function (dictMonadEffect) {
      return new Control_Alt.Alt(function () {
          return functorParCont(dictMonadEffect);
      }, function (v) {
          return function (v1) {
              return ParCont(function (k) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (done) {
                      return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
                              if (b) {
                                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                                  return k(a);
                              });
                          });
                      }))(function () {
                          return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
                              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
                                  if (b) {
                                      return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                                  };
                                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                                      return k(a);
                                  });
                              });
                          });
                      });
                  });
              });
          };
      });
  };
  var plusParCont = function (dictMonadEffect) {
      return new Control_Plus.Plus(function () {
          return altParCont(dictMonadEffect);
      }, ParCont(function (v) {
          return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
      }));
  };
  var alternativeParCont = function (dictMonadEffect) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParCont(dictMonadEffect);
      }, function () {
          return plusParCont(dictMonadEffect);
      });
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
  exports["ParCont"] = ParCont;
  exports["monadParExceptT"] = monadParExceptT;
  exports["monadParReaderT"] = monadParReaderT;
  exports["monadParWriterT"] = monadParWriterT;
  exports["monadParMaybeT"] = monadParMaybeT;
  exports["monadParStar"] = monadParStar;
  exports["monadParCostar"] = monadParCostar;
  exports["newtypeParCont"] = newtypeParCont;
  exports["functorParCont"] = functorParCont;
  exports["applyParCont"] = applyParCont;
  exports["applicativeParCont"] = applicativeParCont;
  exports["altParCont"] = altParCont;
  exports["plusParCont"] = plusParCont;
  exports["alternativeParCont"] = alternativeParCont;
  exports["monadParParCont"] = monadParParCont;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parTraverse = function (dictParallel) {
      return function (dictTraversable) {
          return function (f) {
              var $22 = Control_Parallel_Class.sequential(dictParallel);
              var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())((function () {
                  var $25 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($26) {
                      return $25(f($26));
                  };
              })());
              return function ($24) {
                  return $22($23($24));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var parSequence = function (dictParallel) {
      return function (dictTraversable) {
          return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var parOneOfMap = function (dictParallel) {
      return function (dictAlternative) {
          return function (dictFoldable) {
              return function (dictFunctor) {
                  return function (f) {
                      var $27 = Control_Parallel_Class.sequential(dictParallel);
                      var $28 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())((function () {
                          var $30 = Control_Parallel_Class.parallel(dictParallel);
                          return function ($31) {
                              return $30(f($31));
                          };
                      })());
                      return function ($29) {
                          return $27($28($29));
                      };
                  };
              };
          };
      };
  };
  var parOneOf = function (dictParallel) {
      return function (dictAlternative) {
          return function (dictFoldable) {
              return function (dictFunctor) {
                  var $32 = Control_Parallel_Class.sequential(dictParallel);
                  var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
                  return function ($34) {
                      return $32($33($34));
                  };
              };
          };
      };
  };
  var parApply = function (dictParallel) {
      return function (mf) {
          return function (ma) {
              return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
          };
      };
  };
  exports["parApply"] = parApply;
  exports["parTraverse"] = parTraverse;
  exports["parTraverse_"] = parTraverse_;
  exports["parSequence"] = parSequence;
  exports["parSequence_"] = parSequence_;
  exports["parOneOf"] = parOneOf;
  exports["parOneOfMap"] = parOneOfMap;
  exports["ParCont"] = Control_Parallel_Class.ParCont;
  exports["Parallel"] = Control_Parallel_Class.Parallel;
  exports["parallel"] = Control_Parallel_Class.parallel;
  exports["sequential"] = Control_Parallel_Class.sequential;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Seconds = function (x) {
      return x;
  };
  var Minutes = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Hours = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var Days = function (x) {
      return x;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };
  var showSeconds = new Data_Show.Show(function (v) {
      return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showMinutes = new Data_Show.Show(function (v) {
      return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showMilliseconds = new Data_Show.Show(function (v) {
      return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showHours = new Data_Show.Show(function (v) {
      return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showDays = new Data_Show.Show(function (v) {
      return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupMinutes = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupHours = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupDays = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var ordSeconds = Data_Ord.ordNumber;
  var ordMinutes = Data_Ord.ordNumber;
  var ordMilliseconds = Data_Ord.ordNumber;
  var ordHours = Data_Ord.ordNumber;
  var ordDays = Data_Ord.ordNumber;
  var newtypeSeconds = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeMinutes = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeMilliseconds = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeHours = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeDays = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidSeconds = new Data_Monoid.Monoid(function () {
      return semigroupSeconds;
  }, 0.0);
  var monoidMinutes = new Data_Monoid.Monoid(function () {
      return semigroupMinutes;
  }, 0.0);
  var monoidMilliseconds = new Data_Monoid.Monoid(function () {
      return semigroupMilliseconds;
  }, 0.0);
  var monoidHours = new Data_Monoid.Monoid(function () {
      return semigroupHours;
  }, 0.0);
  var monoidDays = new Data_Monoid.Monoid(function () {
      return semigroupDays;
  }, 0.0);
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };
  var negateDuration = function (dictDuration) {
      var $41 = toDuration(dictDuration);
      var $42 = Data_Newtype.over()()(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
      var $43 = fromDuration(dictDuration);
      return function ($44) {
          return $41($42($43($44)));
      };
  };
  var eqSeconds = Data_Eq.eqNumber;
  var eqMinutes = Data_Eq.eqNumber;
  var eqMilliseconds = Data_Eq.eqNumber;
  var eqHours = Data_Eq.eqNumber;
  var eqDays = Data_Eq.eqNumber;
  var durationSeconds = new Duration(Data_Newtype.over()()(Seconds)(function (v) {
      return v * 1000.0;
  }), Data_Newtype.over()()(Milliseconds)(function (v) {
      return v / 1000.0;
  }));
  var durationMinutes = new Duration(Data_Newtype.over()()(Minutes)(function (v) {
      return v * 60000.0;
  }), Data_Newtype.over()()(Milliseconds)(function (v) {
      return v / 60000.0;
  }));
  var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
  var durationHours = new Duration(Data_Newtype.over()()(Hours)(function (v) {
      return v * 3600000.0;
  }), Data_Newtype.over()()(Milliseconds)(function (v) {
      return v / 3600000.0;
  }));
  var durationDays = new Duration(Data_Newtype.over()()(Days)(function (v) {
      return v * 8.64e7;
  }), Data_Newtype.over()()(Milliseconds)(function (v) {
      return v / 8.64e7;
  }));
  var convertDuration = function (dictDuration) {
      return function (dictDuration1) {
          var $45 = toDuration(dictDuration1);
          var $46 = fromDuration(dictDuration);
          return function ($47) {
              return $45($46($47));
          };
      };
  };
  exports["fromDuration"] = fromDuration;
  exports["toDuration"] = toDuration;
  exports["Milliseconds"] = Milliseconds;
  exports["Seconds"] = Seconds;
  exports["Minutes"] = Minutes;
  exports["Hours"] = Hours;
  exports["Days"] = Days;
  exports["Duration"] = Duration;
  exports["convertDuration"] = convertDuration;
  exports["negateDuration"] = negateDuration;
  exports["newtypeMilliseconds"] = newtypeMilliseconds;
  exports["eqMilliseconds"] = eqMilliseconds;
  exports["ordMilliseconds"] = ordMilliseconds;
  exports["semigroupMilliseconds"] = semigroupMilliseconds;
  exports["monoidMilliseconds"] = monoidMilliseconds;
  exports["showMilliseconds"] = showMilliseconds;
  exports["newtypeSeconds"] = newtypeSeconds;
  exports["eqSeconds"] = eqSeconds;
  exports["ordSeconds"] = ordSeconds;
  exports["semigroupSeconds"] = semigroupSeconds;
  exports["monoidSeconds"] = monoidSeconds;
  exports["showSeconds"] = showSeconds;
  exports["newtypeMinutes"] = newtypeMinutes;
  exports["eqMinutes"] = eqMinutes;
  exports["ordMinutes"] = ordMinutes;
  exports["semigroupMinutes"] = semigroupMinutes;
  exports["monoidMinutes"] = monoidMinutes;
  exports["showMinutes"] = showMinutes;
  exports["newtypeHours"] = newtypeHours;
  exports["eqHours"] = eqHours;
  exports["ordHours"] = ordHours;
  exports["semigroupHours"] = semigroupHours;
  exports["monoidHours"] = monoidHours;
  exports["showHours"] = showHours;
  exports["newtypeDays"] = newtypeDays;
  exports["eqDays"] = eqDays;
  exports["ordDays"] = ordDays;
  exports["semigroupDays"] = semigroupDays;
  exports["monoidDays"] = monoidDays;
  exports["showDays"] = showDays;
  exports["durationMilliseconds"] = durationMilliseconds;
  exports["durationSeconds"] = durationSeconds;
  exports["durationMinutes"] = durationMinutes;
  exports["durationHours"] = durationHours;
  exports["durationDays"] = durationDays;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Fiber = function (x) {
      return x;
  };
  var FFIUtil = function (x) {
      return x;
  };
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign["_fork"](false);
  var newtypeCanceler = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var launchSuspendedAff = makeFiber;
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var semigroupParAff = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var cancelWith = function (aff) {
      return function (v) {
          return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
              killed: function (e) {
                  return function (v1) {
                      return v(e);
                  };
              },
              failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
              completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
          })(Data_Function["const"](aff));
      };
  };
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var invincible = function (a) {
      return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
  };
  var lazyAff = new Control_Lazy.Lazy(function (f) {
      return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
  });
  var semigroupAff = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var applyFiber = new Control_Apply.Apply(function () {
      return functorFiber;
  }, function (t1) {
      return function (t2) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
      };
  });
  var applicativeFiber = new Control_Applicative.Applicative(function () {
      return applyFiber;
  }, function (a) {
      return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };
  var fiberCanceler = (function () {
      var $44 = Data_Function.flip(killFiber);
      return function ($45) {
          return Canceler($44($45));
      };
  })();
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var runSuspendedAff = function (k) {
      return function (aff) {
          return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $48 = Effect_Class.liftEffect(monadEffectAff);
              return function ($49) {
                  return $48(k($49));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var monoidParAff = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupParAff(dictMonoid.Semigroup0());
      }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
  };
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });
  var supervise = function (aff) {
      var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
      var killAll = function (err) {
          return function (sup) {
              return $foreign.makeAff(function (k) {
                  return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
              });
          };
      };
      var acquire = function __do() {
          var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
          sup.fiber.run();
          return sup;
      };
      return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
          killed: function (err) {
              return function (sup) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
              };
          },
          failed: Data_Function["const"](killAll(killError)),
          completed: Data_Function["const"](killAll(killError))
      })(function ($53) {
          return joinFiber((function (v) {
              return v.fiber;
          })($53));
      });
  };
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (res) {
              if (res instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(res.value0);
              };
              if (res instanceof Control_Monad_Rec_Class.Loop) {
                  return go(res.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [ res.constructor.name ]);
          });
      };
      return go;
  });
  var monoidAff = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAff(dictMonoid.Semigroup0());
      }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);
  var never = $foreign.makeAff(function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
  });
  var apathize = (function () {
      var $54 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
      return function ($55) {
          return $54(attempt($55));
      };
  })();
  var altParAff = new Control_Alt.Alt(function () {
      return functorParAff;
  }, $foreign["_parAffAlt"]);
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
      };
  });
  var plusAff = new Control_Plus.Plus(function () {
      return altAff;
  }, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
  var plusParAff = new Control_Plus.Plus(function () {
      return altParAff;
  }, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
  var alternativeParAff = new Control_Alternative.Alternative(function () {
      return applicativeParAff;
  }, function () {
      return plusParAff;
  });
  exports["Canceler"] = Canceler;
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["launchSuspendedAff"] = launchSuspendedAff;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["runSuspendedAff"] = runSuspendedAff;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["supervise"] = supervise;
  exports["attempt"] = attempt;
  exports["apathize"] = apathize;
  exports["delay"] = delay;
  exports["never"] = never;
  exports["finally"] = $$finally;
  exports["invincible"] = invincible;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["cancelWith"] = cancelWith;
  exports["bracket"] = bracket;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["fiberCanceler"] = fiberCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["semigroupAff"] = semigroupAff;
  exports["monoidAff"] = monoidAff;
  exports["altAff"] = altAff;
  exports["plusAff"] = plusAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["lazyAff"] = lazyAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["semigroupParAff"] = semigroupParAff;
  exports["monoidParAff"] = monoidParAff;
  exports["altParAff"] = altParAff;
  exports["plusParAff"] = plusParAff;
  exports["alternativeParAff"] = alternativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["applyFiber"] = applyFiber;
  exports["applicativeFiber"] = applicativeFiber;
  exports["newtypeCanceler"] = newtypeCanceler;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
  exports["generalBracket"] = $foreign.generalBracket;
  exports["catchError"] = Control_Monad_Error_Class.catchError;
  exports["throwError"] = Control_Monad_Error_Class.throwError;
  exports["try"] = Control_Monad_Error_Class["try"];
  exports["parallel"] = Control_Parallel_Class.parallel;
  exports["sequential"] = Control_Parallel_Class.sequential;
  exports["Milliseconds"] = Data_Time_Duration.Milliseconds;
  exports["error"] = Effect_Exception.error;
  exports["message"] = Effect_Exception.message;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.mkEffectFn2 = function mkEffectFn2(fn) {
    return function(a, b) {
      return fn(a)(b)();
    };
  };

  exports.mkEffectFn3 = function mkEffectFn3(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };

  exports.mkEffectFn4 = function mkEffectFn4(fn) {
    return function(a, b, c, d) {
      return fn(a)(b)(c)(d)();
    };
  };

  exports.mkEffectFn5 = function mkEffectFn5(fn) {
    return function(a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e)();
    };
  };

  exports.mkEffectFn6 = function mkEffectFn6(fn) {
    return function(a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f)();
    };
  };

  exports.mkEffectFn7 = function mkEffectFn7(fn) {
    return function(a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g)();
    };
  };

  exports.mkEffectFn8 = function mkEffectFn8(fn) {
    return function(a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)();
    };
  };

  exports.mkEffectFn9 = function mkEffectFn9(fn) {
    return function(a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
    };
  };

  exports.mkEffectFn10 = function mkEffectFn10(fn) {
    return function(a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
    };
  };

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffectFn4 = function runEffectFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };

  exports.runEffectFn5 = function runEffectFn5(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function() {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn6 = function runEffectFn6(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function() {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn7 = function runEffectFn7(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function() {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn8 = function runEffectFn8(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function() {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn9 = function runEffectFn9(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function() {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn10 = function runEffectFn10(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function(j) {
                        return function() {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect = $PS["Effect"];                
  var semigroupEffectFn9 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn9(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return function (e) {
                                  return function (f) {
                                      return function (g) {
                                          return function (h) {
                                              return function (i) {
                                                  return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn9(f1)(a)(b)(c)(d)(e)(f)(g)(h)(i))($foreign.runEffectFn9(f2)(a)(b)(c)(d)(e)(f)(g)(h)(i));
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn8 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn8(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return function (e) {
                                  return function (f) {
                                      return function (g) {
                                          return function (h) {
                                              return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn8(f1)(a)(b)(c)(d)(e)(f)(g)(h))($foreign.runEffectFn8(f2)(a)(b)(c)(d)(e)(f)(g)(h));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn7 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn7(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return function (e) {
                                  return function (f) {
                                      return function (g) {
                                          return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn7(f1)(a)(b)(c)(d)(e)(f)(g))($foreign.runEffectFn7(f2)(a)(b)(c)(d)(e)(f)(g));
                                      };
                                  };
                              };
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn6 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn6(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return function (e) {
                                  return function (f) {
                                      return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn6(f1)(a)(b)(c)(d)(e)(f))($foreign.runEffectFn6(f2)(a)(b)(c)(d)(e)(f));
                                  };
                              };
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn5 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn5(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return function (e) {
                                  return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn5(f1)(a)(b)(c)(d)(e))($foreign.runEffectFn5(f2)(a)(b)(c)(d)(e));
                              };
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn4 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn4(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn4(f1)(a)(b)(c)(d))($foreign.runEffectFn4(f2)(a)(b)(c)(d));
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn3 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn3(function (a) {
                  return function (b) {
                      return function (c) {
                          return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn3(f1)(a)(b)(c))($foreign.runEffectFn3(f2)(a)(b)(c));
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn2 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn2(function (a) {
                  return function (b) {
                      return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn2(f1)(a)(b))($foreign.runEffectFn2(f2)(a)(b));
                  };
              });
          };
      });
  };
  var semigroupEffectFn10 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn10(function (a) {
                  return function (b) {
                      return function (c) {
                          return function (d) {
                              return function (e) {
                                  return function (f) {
                                      return function (g) {
                                          return function (h) {
                                              return function (i) {
                                                  return function (j) {
                                                      return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn10(f1)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j))($foreign.runEffectFn10(f2)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              });
          };
      });
  };
  var semigroupEffectFn1 = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (f1) {
          return function (f2) {
              return $foreign.mkEffectFn1(function (a) {
                  return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn1(f1)(a))($foreign.runEffectFn1(f2)(a));
              });
          };
      });
  };
  var monoidEffectFn9 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn9(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn9(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return function (v6) {
                                  return function (v7) {
                                      return function (v8) {
                                          return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      }));
  };
  var monoidEffectFn8 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn8(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn8(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return function (v6) {
                                  return function (v7) {
                                      return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      }));
  };
  var monoidEffectFn7 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn7(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn7(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return function (v6) {
                                  return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                              };
                          };
                      };
                  };
              };
          };
      }));
  };
  var monoidEffectFn6 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn6(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn6(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                          };
                      };
                  };
              };
          };
      }));
  };
  var monoidEffectFn5 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn5(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn5(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                      };
                  };
              };
          };
      }));
  };
  var monoidEffectFn4 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn4(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn4(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                  };
              };
          };
      }));
  };
  var monoidEffectFn3 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn3(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn3(function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
              };
          };
      }));
  };
  var monoidEffectFn2 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn2(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn2(function (v) {
          return function (v1) {
              return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
          };
      }));
  };
  var monoidEffectFn10 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn10(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn10(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return function (v6) {
                                  return function (v7) {
                                      return function (v8) {
                                          return function (v9) {
                                              return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      }));
  };
  var monoidEffectFn1 = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffectFn1(dictMonoid.Semigroup0());
      }, $foreign.mkEffectFn1(function (v) {
          return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
      }));
  };
  exports["semigroupEffectFn1"] = semigroupEffectFn1;
  exports["semigroupEffectFn2"] = semigroupEffectFn2;
  exports["semigroupEffectFn3"] = semigroupEffectFn3;
  exports["semigroupEffectFn4"] = semigroupEffectFn4;
  exports["semigroupEffectFn5"] = semigroupEffectFn5;
  exports["semigroupEffectFn6"] = semigroupEffectFn6;
  exports["semigroupEffectFn7"] = semigroupEffectFn7;
  exports["semigroupEffectFn8"] = semigroupEffectFn8;
  exports["semigroupEffectFn9"] = semigroupEffectFn9;
  exports["semigroupEffectFn10"] = semigroupEffectFn10;
  exports["monoidEffectFn1"] = monoidEffectFn1;
  exports["monoidEffectFn2"] = monoidEffectFn2;
  exports["monoidEffectFn3"] = monoidEffectFn3;
  exports["monoidEffectFn4"] = monoidEffectFn4;
  exports["monoidEffectFn5"] = monoidEffectFn5;
  exports["monoidEffectFn6"] = monoidEffectFn6;
  exports["monoidEffectFn7"] = monoidEffectFn7;
  exports["monoidEffectFn8"] = monoidEffectFn8;
  exports["monoidEffectFn9"] = monoidEffectFn9;
  exports["monoidEffectFn10"] = monoidEffectFn10;
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
  exports["mkEffectFn2"] = $foreign.mkEffectFn2;
  exports["mkEffectFn3"] = $foreign.mkEffectFn3;
  exports["mkEffectFn4"] = $foreign.mkEffectFn4;
  exports["mkEffectFn5"] = $foreign.mkEffectFn5;
  exports["mkEffectFn6"] = $foreign.mkEffectFn6;
  exports["mkEffectFn7"] = $foreign.mkEffectFn7;
  exports["mkEffectFn8"] = $foreign.mkEffectFn8;
  exports["mkEffectFn9"] = $foreign.mkEffectFn9;
  exports["mkEffectFn10"] = $foreign.mkEffectFn10;
  exports["runEffectFn1"] = $foreign.runEffectFn1;
  exports["runEffectFn2"] = $foreign.runEffectFn2;
  exports["runEffectFn3"] = $foreign.runEffectFn3;
  exports["runEffectFn4"] = $foreign.runEffectFn4;
  exports["runEffectFn5"] = $foreign.runEffectFn5;
  exports["runEffectFn6"] = $foreign.runEffectFn6;
  exports["runEffectFn7"] = $foreign.runEffectFn7;
  exports["runEffectFn8"] = $foreign.runEffectFn8;
  exports["runEffectFn9"] = $foreign.runEffectFn9;
  exports["runEffectFn10"] = $foreign.runEffectFn10;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var EffectFnCanceler = function (x) {
      return x;
  };
  var EffectFnAff = function (x) {
      return x;
  };
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["EffectFnAff"] = EffectFnAff;
  exports["EffectFnCanceler"] = EffectFnCanceler;
  exports["fromEffectFnAff"] = fromEffectFnAff;
  exports["mkEffectFn1"] = Effect_Uncurried.mkEffectFn1;
  exports["mkEffectFn2"] = Effect_Uncurried.mkEffectFn2;
  exports["mkEffectFn3"] = Effect_Uncurried.mkEffectFn3;
  exports["runEffectFn1"] = Effect_Uncurried.runEffectFn1;
  exports["runEffectFn2"] = Effect_Uncurried.runEffectFn2;
  exports["runEffectFn3"] = Effect_Uncurried.runEffectFn3;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };


  exports.quot = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.rem = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.DivisionRing"] = $PS["Data.DivisionRing"] || {};
  var exports = $PS["Data.DivisionRing"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var DivisionRing = function (Ring0, recip) {
      this.Ring0 = Ring0;
      this.recip = recip;
  };
  var recip = function (dict) {
      return dict.recip;
  };
  var rightDiv = function (dictDivisionRing) {
      return function (a) {
          return function (b) {
              return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));
          };
      };
  };
  var leftDiv = function (dictDivisionRing) {
      return function (a) {
          return function (b) {
              return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);
          };
      };
  };
  var divisionringNumber = new DivisionRing(function () {
      return Data_Ring.ringNumber;
  }, function (x) {
      return 1.0 / x;
  });
  exports["DivisionRing"] = DivisionRing;
  exports["recip"] = recip;
  exports["leftDiv"] = leftDiv;
  exports["rightDiv"] = rightDiv;
  exports["divisionringNumber"] = divisionringNumber;
  exports["Ring"] = Data_Ring.Ring;
  exports["negate"] = Data_Ring.negate;
  exports["sub"] = Data_Ring.sub;
  exports["Semiring"] = Data_Semiring.Semiring;
  exports["add"] = Data_Semiring.add;
  exports["mul"] = Data_Semiring.mul;
  exports["one"] = Data_Semiring.one;
  exports["zero"] = Data_Semiring.zero;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";

  exports.nan = NaN;

  exports.isNaN = isNaN;

  exports.infinity = Infinity;

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["nan"] = $foreign.nan;
  exports["isNaN"] = $foreign["isNaN"];
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  }

  exports.imul = Math.imul ? nativeImul : emulatedImul;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.tau = 2 * Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["acos"] = $foreign.acos;
  exports["asin"] = $foreign.asin;
  exports["atan"] = $foreign.atan;
  exports["atan2"] = $foreign.atan2;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["exp"] = $foreign.exp;
  exports["floor"] = $foreign.floor;
  exports["imul"] = $foreign.imul;
  exports["log"] = $foreign.log;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["pow"] = $foreign.pow;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["tan"] = $foreign.tan;
  exports["trunc"] = $foreign.trunc;
  exports["remainder"] = $foreign.remainder;
  exports["e"] = $foreign.e;
  exports["ln2"] = $foreign.ln2;
  exports["ln10"] = $foreign.ln10;
  exports["log2e"] = $foreign.log2e;
  exports["log10e"] = $foreign.log10e;
  exports["pi"] = $foreign.pi;
  exports["tau"] = $foreign.tau;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["sqrt2"] = $foreign.sqrt2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_DivisionRing = $PS["Data.DivisionRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var $$Math = $PS["Math"];                
  var Radix = function (x) {
      return x;
  };
  var Even = (function () {
      function Even() {

      };
      Even.value = new Even();
      return Even;
  })();
  var Odd = (function () {
      function Odd() {

      };
      Odd.value = new Odd();
      return Odd;
  })();
  var showParity = new Data_Show.Show(function (v) {
      if (v instanceof Even) {
          return "Even";
      };
      if (v instanceof Odd) {
          return "Odd";
      };
      throw new Error("Failed pattern match at Data.Int (line 111, column 1 - line 113, column 19): " + [ v.constructor.name ]);
  });
  var radix = function (n) {
      if (n >= 2 && n <= 36) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Int (line 192, column 1 - line 192, column 28): " + [ n.constructor.name ]);
  };
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var octal = 8;
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var parity = function (n) {
      var $14 = even(n);
      if ($14) {
          return Even.value;
      };
      return Odd.value;
  };
  var eqParity = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Even && y instanceof Even) {
              return true;
          };
          if (x instanceof Odd && y instanceof Odd) {
              return true;
          };
          return false;
      };
  });
  var ordParity = new Data_Ord.Ord(function () {
      return eqParity;
  }, function (x) {
      return function (y) {
          if (x instanceof Even && y instanceof Even) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Even) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Even) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Odd && y instanceof Odd) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Int (line 109, column 1 - line 109, column 40): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var semiringParity = new Data_Semiring.Semiring(function (x) {
      return function (y) {
          var $19 = Data_Eq.eq(eqParity)(x)(y);
          if ($19) {
              return Even.value;
          };
          return Odd.value;
      };
  }, function (v) {
      return function (v1) {
          if (v instanceof Odd && v1 instanceof Odd) {
              return Odd.value;
          };
          return Even.value;
      };
  }, Odd.value, Even.value);
  var ringParity = new Data_Ring.Ring(function () {
      return semiringParity;
  }, Data_Semiring.add(semiringParity));
  var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
      return ringParity;
  }, Control_Category.identity(Control_Category.categoryFn));
  var decimal = 10;
  var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
      return ringParity;
  });
  var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingParity;
  }, function (v) {
      if (v instanceof Even) {
          return 0;
      };
      if (v instanceof Odd) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Int (line 131, column 1 - line 135, column 17): " + [ v.constructor.name ]);
  }, function (x) {
      return function (v) {
          return x;
      };
  }, function (v) {
      return function (v1) {
          return Even.value;
      };
  });
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };
  var boundedParity = new Data_Bounded.Bounded(function () {
      return ordParity;
  }, Even.value, Odd.value);
  var binary = 2;
  var base36 = 36;
  exports["fromNumber"] = fromNumber;
  exports["ceil"] = ceil;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["radix"] = radix;
  exports["binary"] = binary;
  exports["octal"] = octal;
  exports["decimal"] = decimal;
  exports["hexadecimal"] = hexadecimal;
  exports["base36"] = base36;
  exports["fromStringAs"] = fromStringAs;
  exports["Even"] = Even;
  exports["Odd"] = Odd;
  exports["parity"] = parity;
  exports["even"] = even;
  exports["odd"] = odd;
  exports["eqParity"] = eqParity;
  exports["ordParity"] = ordParity;
  exports["showParity"] = showParity;
  exports["boundedParity"] = boundedParity;
  exports["semiringParity"] = semiringParity;
  exports["ringParity"] = ringParity;
  exports["commutativeRingParity"] = commutativeRingParity;
  exports["euclideanRingParity"] = euclideanRingParity;
  exports["divisionRingParity"] = divisionRingParity;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
  exports["quot"] = $foreign.quot;
  exports["rem"] = $foreign.rem;
  exports["pow"] = $foreign.pow;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.countPrefix = function (p) {
    return function (s) {
      var i = 0;
      while (i < s.length && p(s.charAt(i))) i++;
      return i;
    };
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._indexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._lastIndexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            var i = s.lastIndexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports._slice = function (b) {
    return function (e) {
      return function (s) {
        return s.slice(b,e);
      };
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["char"] = $foreign["char"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.countPrefix(p)(s))(s);
      };
  };
  var takeRight = function (i) {
      return function (s) {
          return $foreign.drop($foreign.length(s) - i | 0)(s);
      };
  };
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
          var $9 = v1.after === v;
          if ($9) {
              return new Data_Maybe.Just(v1.before);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var slice = function (b) {
      return function (e) {
          return function (s) {
              var l = $foreign.length(s);
              var norm = function (x) {
                  if (x < 0) {
                      return l + x | 0;
                  };
                  if (Data_Boolean.otherwise) {
                      return x;
                  };
                  throw new Error("Failed pattern match at Data.String.CodeUnits (line 319, column 5 - line 320, column 27): " + [ x.constructor.name ]);
              };
              var e$prime = norm(e);
              var b$prime = norm(b);
              var $19 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime > l || b$prime > e$prime)));
              if ($19) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
          };
      };
  };
  var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.countPrefix(p)(s))(s);
      };
  };
  var dropRight = function (i) {
      return function (s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
      };
  };
  var contains = function (pat) {
      var $20 = indexOf(pat);
      return function ($21) {
          return Data_Maybe.isJust($20($21));
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["contains"] = contains;
  exports["charAt"] = charAt;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["takeRight"] = takeRight;
  exports["takeWhile"] = takeWhile;
  exports["dropRight"] = dropRight;
  exports["dropWhile"] = dropWhile;
  exports["slice"] = slice;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["countPrefix"] = $foreign.countPrefix;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["splitAt"] = $foreign.splitAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 64, column 1 - line 68, column 89): " + [ v.constructor.name ]);
  });
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [ v.constructor.name ]);
  };
  var readUndefined = function (dictMonad) {
      return function (value) {
          if ($foreign.isUndefined(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
          };
          throw new Error("Failed pattern match at Foreign (line 161, column 1 - line 161, column 70): " + [ value.constructor.name ]);
      };
  };
  var readNullOrUndefined = function (dictMonad) {
      return function (value) {
          if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
          };
          throw new Error("Failed pattern match at Foreign (line 166, column 1 - line 166, column 76): " + [ value.constructor.name ]);
      };
  };
  var readNull = function (dictMonad) {
      return function (value) {
          if ($foreign.isNull(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
          };
          throw new Error("Failed pattern match at Foreign (line 156, column 1 - line 156, column 65): " + [ value.constructor.name ]);
      };
  };
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var readArray = function (dictMonad) {
      return function (value) {
          if ($foreign.isArray(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(dictMonad)(new TypeMismatch("array", $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 151, column 1 - line 151, column 66): " + [ value.constructor.name ]);
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readBoolean = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("Boolean");
  };
  var readNumber = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("Number");
  };
  var readInt = function (dictMonad) {
      return function (value) {
          var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
          var fromNumber = (function () {
              var $120 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
              return function ($121) {
                  return $120(Data_Int.fromNumber($121));
              };
          })();
          return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.either(Data_Function["const"](error))(fromNumber)))(readNumber(dictMonad)(value));
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  var readChar = function (dictMonad) {
      return function (value) {
          var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
          var fromString = (function () {
              var $122 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
              return function ($123) {
                  return $122(Data_String_CodeUnits.toChar($123));
              };
          })();
          return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.either(Data_Function["const"](error))(fromString)))(readString(dictMonad)(value));
      };
  };
  var eqForeignError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
              return x.value0 === y.value0;
          };
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var ordForeignError = new Data_Ord.Ord(function () {
      return eqForeignError;
  }, function (x) {
      return function (y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof ForeignError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ForeignError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof TypeMismatch) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TypeMismatch) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtIndex) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ErrorAtIndex) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          };
          throw new Error("Failed pattern match at Foreign (line 62, column 1 - line 62, column 52): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeFromForeign"] = unsafeFromForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readChar"] = readChar;
  exports["readBoolean"] = readBoolean;
  exports["readNumber"] = readNumber;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["readNull"] = readNull;
  exports["readUndefined"] = readUndefined;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["fail"] = fail;
  exports["eqForeignError"] = eqForeignError;
  exports["ordForeignError"] = ordForeignError;
  exports["showForeignError"] = showForeignError;
  exports["typeOf"] = $foreign.typeOf;
  exports["tagOf"] = $foreign.tagOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["isArray"] = $foreign.isArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var RequestContentError = (function () {
      function RequestContentError(value0) {
          this.value0 = value0;
      };
      RequestContentError.create = function (value0) {
          return new RequestContentError(value0);
      };
      return RequestContentError;
  })();
  var ResponseBodyError = (function () {
      function ResponseBodyError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseBodyError.create = function (value0) {
          return function (value1) {
              return new ResponseBodyError(value0, value1);
          };
      };
      return ResponseBodyError;
  })();
  var TimeoutError = (function () {
      function TimeoutError() {

      };
      TimeoutError.value = new TimeoutError();
      return TimeoutError;
  })();
  var RequestFailedError = (function () {
      function RequestFailedError() {

      };
      RequestFailedError.value = new RequestFailedError();
      return RequestFailedError;
  })();
  var XHROtherError = (function () {
      function XHROtherError(value0) {
          this.value0 = value0;
      };
      XHROtherError.create = function (value0) {
          return new XHROtherError(value0);
      };
      return XHROtherError;
  })();
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either((function () {
              var $51 = Foreign.fail(Data_Identity.monadIdentity);
              return function ($52) {
                  return $51(Foreign.ForeignError.create($52));
              };
          })())(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return function (x) {
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Document")(x))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("XMLDocument")(x)))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("HTMLDocument")(x));
              };
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($53) {
                  return req.responseFormat.value0(parseJSON($53));
              })(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 257, column 18 - line 265, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return Data_Either.Right.create(v.value0(Foreign.unsafeToForeign));
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 217, column 20 - line 232, column 69): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function (v) {
          return {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Affjax_RequestHeader.name(h),
                      value: Affjax_RequestHeader.value(h)
                  };
              })(headers(req.content)),
              content: v,
              responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials,
              timeout: Data_Maybe.fromMaybe(0.0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1;
              })(req.timeout))
          };
      };
      var send = function (content) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"]("AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
              if (v instanceof Data_Either.Right) {
                  var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          body: v1.value0,
                          headers: v.value0.headers,
                          status: v.value0.status,
                          statusText: v.value0.statusText
                      });
                  };
                  throw new Error("Failed pattern match at Affjax (line 193, column 9 - line 195, column 52): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Left) {
                  var message = Effect_Exception.message(v.value0);
                  return Data_Either.Left.create((function () {
                      var $38 = message === "AffjaxTimeoutErrorMessageIdent";
                      if ($38) {
                          return TimeoutError.value;
                      };
                      var $39 = message === "AffjaxRequestFailedMessageIdent";
                      if ($39) {
                          return RequestFailedError.value;
                      };
                      return new XHROtherError(v.value0);
                  })());
              };
              throw new Error("Failed pattern match at Affjax (line 191, column 137 - line 201, column 33): " + [ v.constructor.name ]);
          });
      };
      if (req.content instanceof Data_Maybe.Nothing) {
          return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
      };
      if (req.content instanceof Data_Maybe.Just) {
          var v = extractContent(req.content.value0);
          if (v instanceof Data_Either.Right) {
              return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
          };
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 183, column 7 - line 187, column 48): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Affjax (line 179, column 3 - line 187, column 48): " + [ req.content.constructor.name ]);
  };
  var printError = function (v) {
      if (v instanceof RequestContentError) {
          return "There was a problem with the request content: " + v.value0;
      };
      if (v instanceof ResponseBodyError) {
          return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
      };
      if (v instanceof TimeoutError) {
          return "There was a problem making the request: timeout";
      };
      if (v instanceof RequestFailedError) {
          return "There was a problem making the request: request failed";
      };
      if (v instanceof XHROtherError) {
          return "There was a problem making the request: " + Effect_Exception.message(v.value0);
      };
      throw new Error("Failed pattern match at Affjax (line 97, column 14 - line 107, column 66): " + [ v.constructor.name ]);
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore,
      timeout: Data_Maybe.Nothing.value
  };
  var $$delete = function (rf) {
      return function (u) {
          return request({
              method: new Data_Either.Left(Data_HTTP_Method.DELETE.value),
              url: u,
              headers: defaultRequest.headers,
              content: defaultRequest.content,
              username: defaultRequest.username,
              password: defaultRequest.password,
              withCredentials: defaultRequest.withCredentials,
              responseFormat: rf,
              timeout: defaultRequest.timeout
          });
      };
  };
  var delete_ = (function () {
      var $54 = Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither));
      var $55 = $$delete(Affjax_ResponseFormat.ignore);
      return function ($56) {
          return $54($55($56));
      };
  })();
  var get = function (rf) {
      return function (u) {
          return request({
              method: defaultRequest.method,
              url: u,
              headers: defaultRequest.headers,
              content: defaultRequest.content,
              username: defaultRequest.username,
              password: defaultRequest.password,
              withCredentials: defaultRequest.withCredentials,
              responseFormat: rf,
              timeout: defaultRequest.timeout
          });
      };
  };
  var patch = function (rf) {
      return function (u) {
          return function (c) {
              return request({
                  method: new Data_Either.Left(Data_HTTP_Method.PATCH.value),
                  url: u,
                  headers: defaultRequest.headers,
                  content: new Data_Maybe.Just(c),
                  username: defaultRequest.username,
                  password: defaultRequest.password,
                  withCredentials: defaultRequest.withCredentials,
                  responseFormat: rf,
                  timeout: defaultRequest.timeout
              });
          };
      };
  };
  var patch_ = function (url) {
      var $57 = Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither));
      var $58 = patch(Affjax_ResponseFormat.ignore)(url);
      return function ($59) {
          return $57($58($59));
      };
  };
  var post = function (rf) {
      return function (u) {
          return function (c) {
              return request({
                  method: new Data_Either.Left(Data_HTTP_Method.POST.value),
                  url: u,
                  headers: defaultRequest.headers,
                  content: c,
                  username: defaultRequest.username,
                  password: defaultRequest.password,
                  withCredentials: defaultRequest.withCredentials,
                  responseFormat: rf,
                  timeout: defaultRequest.timeout
              });
          };
      };
  };
  var post_ = function (url) {
      var $60 = Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither));
      var $61 = post(Affjax_ResponseFormat.ignore)(url);
      return function ($62) {
          return $60($61($62));
      };
  };
  var put = function (rf) {
      return function (u) {
          return function (c) {
              return request({
                  method: new Data_Either.Left(Data_HTTP_Method.PUT.value),
                  url: u,
                  headers: defaultRequest.headers,
                  content: c,
                  username: defaultRequest.username,
                  password: defaultRequest.password,
                  withCredentials: defaultRequest.withCredentials,
                  responseFormat: rf,
                  timeout: defaultRequest.timeout
              });
          };
      };
  };
  var put_ = function (url) {
      var $63 = Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither));
      var $64 = put(Affjax_ResponseFormat.ignore)(url);
      return function ($65) {
          return $63($64($65));
      };
  };
  exports["defaultRequest"] = defaultRequest;
  exports["RequestContentError"] = RequestContentError;
  exports["ResponseBodyError"] = ResponseBodyError;
  exports["TimeoutError"] = TimeoutError;
  exports["RequestFailedError"] = RequestFailedError;
  exports["XHROtherError"] = XHROtherError;
  exports["printError"] = printError;
  exports["request"] = request;
  exports["get"] = get;
  exports["post"] = post;
  exports["post_"] = post_;
  exports["put"] = put;
  exports["put_"] = put_;
  exports["delete"] = $$delete;
  exports["delete_"] = delete_;
  exports["patch"] = patch;
  exports["patch_"] = patch_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Affjax.StatusCode"] = $PS["Affjax.StatusCode"] || {};
  var exports = $PS["Affjax.StatusCode"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var StatusCode = function (x) {
      return x;
  };
  var showStatusCode = new Data_Show.Show(function (v) {
      return "(StatusCode " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var newtypeStatusCode = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqStatusCode = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordStatusCode = new Data_Ord.Ord(function () {
      return eqStatusCode;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  exports["StatusCode"] = StatusCode;
  exports["eqStatusCode"] = eqStatusCode;
  exports["ordStatusCode"] = ordStatusCode;
  exports["newtypeStatusCode"] = newtypeStatusCode;
  exports["showStatusCode"] = showStatusCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Biapply"] = $PS["Control.Biapply"] || {};
  var exports = $PS["Control.Biapply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Biapply = function (Bifunctor0, biapply) {
      this.Bifunctor0 = Bifunctor0;
      this.biapply = biapply;
  };
  var biapplyTuple = new Biapply(function () {
      return Data_Bifunctor.bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapply = function (dict) {
      return dict.biapply;
  };
  var biapplyFirst = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
          };
      };
  };
  var biapplySecond = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
          };
      };
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  exports["biapply"] = biapply;
  exports["Biapply"] = Biapply;
  exports["biapplyFirst"] = biapplyFirst;
  exports["biapplySecond"] = biapplySecond;
  exports["bilift2"] = bilift2;
  exports["bilift3"] = bilift3;
  exports["biapplyTuple"] = biapplyTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Biapplicative"] = $PS["Control.Biapplicative"] || {};
  var exports = $PS["Control.Biapplicative"];
  var Control_Biapply = $PS["Control.Biapply"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Biapplicative = function (Biapply0, bipure) {
      this.Biapply0 = Biapply0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  var biapplicativeTuple = new Biapplicative(function () {
      return Control_Biapply.biapplyTuple;
  }, Data_Tuple.Tuple.create);
  exports["bipure"] = bipure;
  exports["Biapplicative"] = Biapplicative;
  exports["biapplicativeTuple"] = biapplicativeTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Trans.Class"] = $PS["Control.Comonad.Trans.Class"] || {};
  var exports = $PS["Control.Comonad.Trans.Class"];
  var ComonadTrans = function (lower) {
      this.lower = lower;
  };
  var lower = function (dict) {
      return dict.lower;
  };
  exports["lower"] = lower;
  exports["ComonadTrans"] = ComonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Env.Trans"] = $PS["Control.Comonad.Env.Trans"] || {};
  var exports = $PS["Control.Comonad.Env.Trans"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = $PS["Control.Comonad.Trans.Class"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var EnvT = function (x) {
      return x;
  };
  var withEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(f(v.value0), v.value1));
      };
  };
  var runEnvT = function (v) {
      return v;
  };
  var newtypeEnvT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var mapEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      };
  };
  var functorEnvT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictFunctor)(f)(v.value1)));
          };
      });
  };
  var foldableEnvT = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (fn) {
              return function (v) {
                  return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(fn)(v.value1);
              };
          };
      }, function (fn) {
          return function (a) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(fn)(a)(v.value1);
              };
          };
      }, function (fn) {
          return function (a) {
              return function (v) {
                  return Data_Foldable.foldr(dictFoldable)(fn)(a)(v.value1);
              };
          };
      });
  };
  var traversableEnvT = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableEnvT(dictTraversable.Foldable1());
      }, function () {
          return functorEnvT(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(EnvT)(Data_Tuple.Tuple.create(v.value0)))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(EnvT)(Data_Tuple.Tuple.create(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var extendEnvT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorEnvT(dictExtend.Functor0());
      }, function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictExtend.Functor0())(f)(Control_Extend.extend(dictExtend)((function () {
                  var $65 = Data_Tuple.Tuple.create(v.value0);
                  return function ($66) {
                      return EnvT($65($66));
                  };
              })())(v.value1))));
          };
      });
  };
  var comonadTransEnvT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
      return function (v) {
          return v.value1;
      };
  });
  var comonadEnvT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendEnvT(dictComonad.Extend0());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value1);
      });
  };
  exports["EnvT"] = EnvT;
  exports["runEnvT"] = runEnvT;
  exports["withEnvT"] = withEnvT;
  exports["mapEnvT"] = mapEnvT;
  exports["newtypeEnvT"] = newtypeEnvT;
  exports["functorEnvT"] = functorEnvT;
  exports["extendEnvT"] = extendEnvT;
  exports["comonadEnvT"] = comonadEnvT;
  exports["comonadTransEnvT"] = comonadTransEnvT;
  exports["foldableEnvT"] = foldableEnvT;
  exports["traversableEnvT"] = traversableEnvT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Env.Class"] = $PS["Control.Comonad.Env.Class"] || {};
  var exports = $PS["Control.Comonad.Env.Class"];
  var Control_Comonad_Env_Trans = $PS["Control.Comonad.Env.Trans"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var ComonadAsk = function (Comonad0, ask) {
      this.Comonad0 = Comonad0;
      this.ask = ask;
  };
  var ComonadEnv = function (ComonadAsk0, local) {
      this.ComonadAsk0 = ComonadAsk0;
      this.local = local;
  };
  var local = function (dict) {
      return dict.local;
  };
  var comonadAskTuple = new ComonadAsk(function () {
      return Data_Tuple.comonadTuple;
  }, Data_Tuple.fst);
  var comonadEnvTuple = new ComonadEnv(function () {
      return comonadAskTuple;
  }, function (f) {
      return function (v) {
          return new Data_Tuple.Tuple(f(v.value0), v.value1);
      };
  });
  var comonadAskEnvT = function (dictComonad) {
      return new ComonadAsk(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
      }, function (v) {
          return Data_Tuple.fst(v);
      });
  };
  var comonadEnvEnvT = function (dictComonad) {
      return new ComonadEnv(function () {
          return comonadAskEnvT(dictComonad);
      }, function (f) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          };
      });
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictComonadAsk) {
      return function (f) {
          return function (x) {
              return f(ask(dictComonadAsk)(x));
          };
      };
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["ComonadAsk"] = ComonadAsk;
  exports["asks"] = asks;
  exports["ComonadEnv"] = ComonadEnv;
  exports["comonadAskTuple"] = comonadAskTuple;
  exports["comonadEnvTuple"] = comonadEnvTuple;
  exports["comonadAskEnvT"] = comonadAskEnvT;
  exports["comonadEnvEnvT"] = comonadEnvEnvT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Env"] = $PS["Control.Comonad.Env"] || {};
  var exports = $PS["Control.Comonad.Env"];
  var Control_Comonad_Env_Class = $PS["Control.Comonad.Env.Class"];
  var Control_Comonad_Env_Trans = $PS["Control.Comonad.Env.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var withEnv = Control_Comonad_Env_Trans.withEnvT;
  var runEnv = function (v) {
      return Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap())(v);
  };
  var mapEnv = Data_Functor.map(Control_Comonad_Env_Trans.functorEnvT(Data_Identity.functorIdentity));
  var env = function (e) {
      return function (a) {
          return Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(e)(a));
      };
  };
  exports["runEnv"] = runEnv;
  exports["withEnv"] = withEnv;
  exports["mapEnv"] = mapEnv;
  exports["env"] = env;
  exports["ComonadEnv"] = Control_Comonad_Env_Class.ComonadEnv;
  exports["ask"] = Control_Comonad_Env_Class.ask;
  exports["asks"] = Control_Comonad_Env_Class.asks;
  exports["local"] = Control_Comonad_Env_Class.local;
  exports["EnvT"] = Control_Comonad_Env_Trans.EnvT;
  exports["mapEnvT"] = Control_Comonad_Env_Trans.mapEnvT;
  exports["runEnvT"] = Control_Comonad_Env_Trans.runEnvT;
  exports["withEnvT"] = Control_Comonad_Env_Trans.withEnvT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Store.Trans"] = $PS["Control.Comonad.Store.Trans"] || {};
  var exports = $PS["Control.Comonad.Store.Trans"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = $PS["Control.Comonad.Trans.Class"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var StoreT = function (x) {
      return x;
  };
  var runStoreT = function (v) {
      return v;
  };
  var newtypeStoreT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorStoreT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Data_Functor.map(dictFunctor)(function (h) {
                  return function ($25) {
                      return f(h($25));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var extendStoreT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorStoreT(dictExtend.Functor0());
      }, function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Control_Extend.extend(dictExtend)(function (w$prime) {
                  return function (s$prime) {
                      return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var comonadTransStoreT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
      return function (v) {
          return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (v1) {
              return v1(v.value1);
          })(v.value0);
      };
  });
  var comonadStoreT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendStoreT(dictComonad.Extend0());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
      });
  };
  exports["StoreT"] = StoreT;
  exports["runStoreT"] = runStoreT;
  exports["newtypeStoreT"] = newtypeStoreT;
  exports["functorStoreT"] = functorStoreT;
  exports["extendStoreT"] = extendStoreT;
  exports["comonadStoreT"] = comonadStoreT;
  exports["comonadTransStoreT"] = comonadTransStoreT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Traced.Trans"] = $PS["Control.Comonad.Traced.Trans"] || {};
  var exports = $PS["Control.Comonad.Traced.Trans"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = $PS["Control.Comonad.Trans.Class"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var TracedT = function (x) {
      return x;
  };
  var runTracedT = function (v) {
      return v;
  };
  var newtypeTracedT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorTracedT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return f(g(t));
                  };
              })(v);
          };
      });
  };
  var extendTracedT = function (dictExtend) {
      return function (dictSemigroup) {
          return new Control_Extend.Extend(function () {
              return functorTracedT(dictExtend.Functor0());
          }, function (f) {
              return function (v) {
                  return Control_Extend.extend(dictExtend)(function (w$prime) {
                      return function (t) {
                          return f(Data_Functor.map(dictExtend.Functor0())(function (h) {
                              return function (t$prime) {
                                  return h(Data_Semigroup.append(dictSemigroup)(t)(t$prime));
                              };
                          })(w$prime));
                      };
                  })(v);
              };
          });
      };
  };
  var comonadTransTracedT = function (dictMonoid) {
      return new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
          return function (v) {
              return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (f) {
                  return f(Data_Monoid.mempty(dictMonoid));
              })(v);
          };
      });
  };
  var comonadTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new Control_Comonad.Comonad(function () {
              return extendTracedT(dictComonad.Extend0())(dictMonoid.Semigroup0());
          }, function (v) {
              return Control_Comonad.extract(dictComonad)(v)(Data_Monoid.mempty(dictMonoid));
          });
      };
  };
  exports["TracedT"] = TracedT;
  exports["runTracedT"] = runTracedT;
  exports["newtypeTracedT"] = newtypeTracedT;
  exports["functorTracedT"] = functorTracedT;
  exports["extendTracedT"] = extendTracedT;
  exports["comonadTracedT"] = comonadTracedT;
  exports["comonadTransTracedT"] = comonadTransTracedT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Store.Class"] = $PS["Control.Comonad.Store.Class"] || {};
  var exports = $PS["Control.Comonad.Store.Class"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = $PS["Control.Comonad.Env.Trans"];
  var Control_Comonad_Store_Trans = $PS["Control.Comonad.Store.Trans"];
  var Control_Comonad_Traced_Trans = $PS["Control.Comonad.Traced.Trans"];
  var Control_Comonad_Trans_Class = $PS["Control.Comonad.Trans.Class"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var ComonadStore = function (Comonad0, peek, pos) {
      this.Comonad0 = Comonad0;
      this.peek = peek;
      this.pos = pos;
  };
  var pos = function (dict) {
      return dict.pos;
  };
  var peek = function (dict) {
      return dict.peek;
  };
  var peeks = function (dictComonadStore) {
      return function (f) {
          return function (x) {
              return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
          };
      };
  };
  var seeks = function (dictComonadStore) {
      return function (f) {
          var $18 = peeks(dictComonadStore)(f);
          var $19 = Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0());
          return function ($20) {
              return $18($19($20));
          };
      };
  };
  var seek = function (dictComonadStore) {
      return function (s) {
          var $21 = peek(dictComonadStore)(s);
          var $22 = Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0());
          return function ($23) {
              return $21($22($23));
          };
      };
  };
  var experiment = function (dictComonadStore) {
      return function (dictFunctor) {
          return function (f) {
              return function (x) {
                  return Data_Functor.map(dictFunctor)(Data_Function.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
              };
          };
      };
  };
  var comonadStoreTracedT = function (dictComonadStore) {
      return function (dictMonoid) {
          return new ComonadStore(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonadStore.Comonad0())(dictMonoid);
          }, function (s) {
              var $24 = peek(dictComonadStore)(s);
              var $25 = Control_Comonad_Trans_Class.lower(Control_Comonad_Traced_Trans.comonadTransTracedT(dictMonoid))(dictComonadStore.Comonad0());
              return function ($26) {
                  return $24($25($26));
              };
          }, (function () {
              var $27 = pos(dictComonadStore);
              var $28 = Control_Comonad_Trans_Class.lower(Control_Comonad_Traced_Trans.comonadTransTracedT(dictMonoid))(dictComonadStore.Comonad0());
              return function ($29) {
                  return $27($28($29));
              };
          })());
      };
  };
  var comonadStoreStoreT = function (dictComonad) {
      return new ComonadStore(function () {
          return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
      }, function (s) {
          return function (v) {
              return Control_Comonad.extract(dictComonad)(v.value0)(s);
          };
      }, function (v) {
          return v.value1;
      });
  };
  var comonadStoreEnvT = function (dictComonadStore) {
      return new ComonadStore(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonadStore.Comonad0());
      }, function (s) {
          var $30 = peek(dictComonadStore)(s);
          var $31 = Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonadStore.Comonad0());
          return function ($32) {
              return $30($31($32));
          };
      }, (function () {
          var $33 = pos(dictComonadStore);
          var $34 = Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonadStore.Comonad0());
          return function ($35) {
              return $33($34($35));
          };
      })());
  };
  exports["peek"] = peek;
  exports["pos"] = pos;
  exports["ComonadStore"] = ComonadStore;
  exports["experiment"] = experiment;
  exports["peeks"] = peeks;
  exports["seek"] = seek;
  exports["seeks"] = seeks;
  exports["comonadStoreStoreT"] = comonadStoreStoreT;
  exports["comonadStoreEnvT"] = comonadStoreEnvT;
  exports["comonadStoreTracedT"] = comonadStoreTracedT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Store"] = $PS["Control.Comonad.Store"] || {};
  var exports = $PS["Control.Comonad.Store"];
  var Control_Comonad_Store_Class = $PS["Control.Comonad.Store.Class"];
  var Control_Comonad_Store_Trans = $PS["Control.Comonad.Store.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var store = function (f) {
      return function (x) {
          return Control_Comonad_Store_Trans.StoreT(new Data_Tuple.Tuple(f, x));
      };
  };
  var runStore = function (v) {
      return Data_Tuple.swap(Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap())(Data_Tuple.swap(v)));
  };
  exports["runStore"] = runStore;
  exports["store"] = store;
  exports["ComonadStore"] = Control_Comonad_Store_Class.ComonadStore;
  exports["experiment"] = Control_Comonad_Store_Class.experiment;
  exports["peek"] = Control_Comonad_Store_Class.peek;
  exports["peeks"] = Control_Comonad_Store_Class.peeks;
  exports["pos"] = Control_Comonad_Store_Class.pos;
  exports["seek"] = Control_Comonad_Store_Class.seek;
  exports["seeks"] = Control_Comonad_Store_Class.seeks;
  exports["StoreT"] = Control_Comonad_Store_Trans.StoreT;
  exports["runStoreT"] = Control_Comonad_Store_Trans.runStoreT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Traced.Class"] = $PS["Control.Comonad.Traced.Class"] || {};
  var exports = $PS["Control.Comonad.Traced.Class"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Comonad_Traced_Trans = $PS["Control.Comonad.Traced.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var ComonadTraced = function (Comonad0, track) {
      this.Comonad0 = Comonad0;
      this.track = track;
  };
  var track = function (dict) {
      return dict.track;
  };
  var tracks = function (dictComonadTraced) {
      return function (f) {
          return function (w) {
              return track(dictComonadTraced)(f(Control_Comonad.extract(dictComonadTraced.Comonad0())(w)))(w);
          };
      };
  };
  var listens = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return new Data_Tuple.Tuple(g(t), f(t));
                  };
              })(v);
          };
      };
  };
  var listen = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(function (f) {
              return function (t) {
                  return new Data_Tuple.Tuple(f(t), t);
              };
          })(v);
      };
  };
  var comonadTracedTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new ComonadTraced(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonad)(dictMonoid);
          }, function (t) {
              return function (v) {
                  return Control_Comonad.extract(dictComonad)(v)(t);
              };
          });
      };
  };
  var censor = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (v1) {
                  return function ($18) {
                      return v1(f($18));
                  };
              })(v);
          };
      };
  };
  exports["track"] = track;
  exports["ComonadTraced"] = ComonadTraced;
  exports["tracks"] = tracks;
  exports["listen"] = listen;
  exports["listens"] = listens;
  exports["censor"] = censor;
  exports["comonadTracedTracedT"] = comonadTracedTracedT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Comonad.Traced"] = $PS["Control.Comonad.Traced"] || {};
  var exports = $PS["Control.Comonad.Traced"];
  var Control_Comonad_Traced_Class = $PS["Control.Comonad.Traced.Class"];
  var Control_Comonad_Traced_Trans = $PS["Control.Comonad.Traced.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var traced = function ($2) {
      return Control_Comonad_Traced_Trans.TracedT(Data_Identity.Identity($2));
  };
  var runTraced = function (v) {
      return Data_Newtype.unwrap()(v);
  };
  exports["runTraced"] = runTraced;
  exports["traced"] = traced;
  exports["ComonadTraced"] = Control_Comonad_Traced_Class.ComonadTraced;
  exports["censor"] = Control_Comonad_Traced_Class.censor;
  exports["listen"] = Control_Comonad_Traced_Class.listen;
  exports["listens"] = Control_Comonad_Traced_Class.listens;
  exports["track"] = Control_Comonad_Traced_Class.track;
  exports["tracks"] = Control_Comonad_Traced_Class.tracks;
  exports["TracedT"] = Control_Comonad_Traced_Trans.TracedT;
  exports["runTracedT"] = Control_Comonad_Traced_Trans.runTracedT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Cont"] = $PS["Control.Monad.Cont"] || {};
  var exports = $PS["Control.Monad.Cont"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Cont_Trans = $PS["Control.Monad.Cont.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withCont = function (f) {
      return Control_Monad_Cont_Trans.withContT((function () {
          var $0 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Identity.Identity);
          var $1 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Newtype.unwrap());
          return function ($2) {
              return $0(f($1($2)));
          };
      })());
  };
  var runCont = function (cc) {
      return function (k) {
          return Data_Newtype.unwrap()(Control_Monad_Cont_Trans.runContT(cc)(function ($3) {
              return Data_Identity.Identity(k($3));
          }));
      };
  };
  var mapCont = function (f) {
      return Control_Monad_Cont_Trans.mapContT((function () {
          var $4 = Data_Newtype.unwrap();
          return function ($5) {
              return Data_Identity.Identity(f($4($5)));
          };
      })());
  };
  var cont = function (f) {
      return function (c) {
          return f((function () {
              var $6 = Data_Newtype.unwrap();
              return function ($7) {
                  return $6(c($7));
              };
          })());
      };
  };
  exports["cont"] = cont;
  exports["runCont"] = runCont;
  exports["MonadCont"] = Control_Monad_Cont_Class.MonadCont;
  exports["callCC"] = Control_Monad_Cont_Class.callCC;
  exports["ContT"] = Control_Monad_Cont_Trans.ContT;
  exports["MonadTrans"] = Control_Monad_Cont_Trans.MonadTrans;
  exports["lift"] = Control_Monad_Cont_Trans.lift;
  exports["mapContT"] = Control_Monad_Cont_Trans.mapContT;
  exports["runContT"] = Control_Monad_Cont_Trans.runContT;
  exports["withContT"] = Control_Monad_Cont_Trans.withContT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Gen.Class"] = $PS["Control.Monad.Gen.Class"] || {};
  var exports = $PS["Control.Monad.Gen.Class"];
  var MonadGen = function (Monad0, chooseBool, chooseFloat, chooseInt, resize, sized) {
      this.Monad0 = Monad0;
      this.chooseBool = chooseBool;
      this.chooseFloat = chooseFloat;
      this.chooseInt = chooseInt;
      this.resize = resize;
      this.sized = sized;
  };
  var sized = function (dict) {
      return dict.sized;
  };
  var resize = function (dict) {
      return dict.resize;
  };
  var chooseInt = function (dict) {
      return dict.chooseInt;
  };
  var chooseFloat = function (dict) {
      return dict.chooseFloat;
  };
  var chooseBool = function (dict) {
      return dict.chooseBool;
  };
  exports["chooseBool"] = chooseBool;
  exports["chooseFloat"] = chooseFloat;
  exports["chooseInt"] = chooseInt;
  exports["resize"] = resize;
  exports["sized"] = sized;
  exports["MonadGen"] = MonadGen;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup.Last"] = $PS["Data.Semigroup.Last"] || {};
  var exports = $PS["Data.Semigroup.Last"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (x) {
          return x;
      };
  });
  var ordLast = function (dictOrd) {
      return dictOrd;
  };
  var functorLast = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqLast = function (dictEq) {
      return dictEq;
  };
  var eq1Last = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqLast(dictEq));
  });
  var ord1Last = new Data_Ord.Ord1(function () {
      return eq1Last;
  }, function (dictOrd) {
      return Data_Ord.compare(ordLast(dictOrd));
  });
  var boundedLast = function (dictBounded) {
      return dictBounded;
  };
  var applyLast = new Control_Apply.Apply(function () {
      return functorLast;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindLast = new Control_Bind.Bind(function () {
      return applyLast;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeLast = new Control_Applicative.Applicative(function () {
      return applyLast;
  }, Last);
  var monadLast = new Control_Monad.Monad(function () {
      return applicativeLast;
  }, function () {
      return bindLast;
  });
  exports["Last"] = Last;
  exports["eqLast"] = eqLast;
  exports["eq1Last"] = eq1Last;
  exports["ordLast"] = ordLast;
  exports["ord1Last"] = ord1Last;
  exports["boundedLast"] = boundedLast;
  exports["showLast"] = showLast;
  exports["functorLast"] = functorLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["semigroupLast"] = semigroupLast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Gen"] = $PS["Control.Monad.Gen"] || {};
  var exports = $PS["Control.Monad.Gen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Last = $PS["Data.Semigroup.Last"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];                
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var FreqSemigroup = function (x) {
      return x;
  };
  var unfoldable = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (dictUnfoldable) {
              return function (gen) {
                  var unfold = function (v) {
                      if (v instanceof Nil) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v instanceof Cons) {
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Gen (line 102, column 12 - line 104, column 35): " + [ v.constructor.name ]);
                  };
                  var loopGen = function (v) {
                      if (v.value1 <= 0) {
                          return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                      };
                      if (Data_Boolean.otherwise) {
                          return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(gen)(function (x) {
                              return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Cons(x, v.value0), v.value1 - 1 | 0)));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Gen (line 94, column 3 - line 94, column 68): " + [ v.constructor.name ]);
                  };
                  return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Unfoldable.unfoldr(dictUnfoldable)(unfold))(Control_Monad_Gen_Class.sized(dictMonadGen)((function () {
                      var $56 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(loopGen);
                      var $57 = Data_Tuple.Tuple.create(Nil.value);
                      return function ($58) {
                          return $56($57($58));
                      };
                  })()));
              };
          };
      };
  };
  var semigroupFreqSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (pos) {
              var v2 = v(pos);
              if (v2.value0 instanceof Data_Maybe.Just) {
                  return v1(v2.value0.value0);
              };
              return v2;
          };
      };
  });
  var getFreqVal = function (v) {
      return function ($59) {
          return Data_Tuple.snd(v($59));
      };
  };
  var fromIndex = function (dictFoldable1) {
      return function (i) {
          return function (xs) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Cons && v <= 0) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Cons) {
                              $tco_var_v = v - 1 | 0;
                              $copy_v1 = v1.value1;
                              return;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Newtype.un()(Data_Semigroup_Last.Last)(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(Data_Semigroup_Last.semigroupLast)(Data_Semigroup_Last.Last)(xs));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Gen (line 128, column 5 - line 128, column 26): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(i)(Data_Foldable.foldr(dictFoldable1.Foldable0())(Cons.create)(Nil.value)(xs));
          };
      };
  };
  var oneOf = function (dictMonadGen) {
      return function (dictFoldable1) {
          return function (xs) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function (n) {
                  return fromIndex(dictFoldable1)(n)(xs);
              });
          };
      };
  };
  var freqSemigroup = function (v) {
      return function (pos) {
          var $49 = pos >= v.value0;
          if ($49) {
              return new Data_Tuple.Tuple(new Data_Maybe.Just(pos - v.value0), v.value1);
          };
          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, v.value1);
      };
  };
  var frequency = function (dictMonadGen) {
      return function (dictFoldable1) {
          return function (xs) {
              var total = Data_Newtype.alaF()()()()(Data_Monoid_Additive.Additive)(Data_Foldable.foldMap(dictFoldable1.Foldable0())(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber)))(Data_Tuple.fst)(xs);
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(total))(getFreqVal(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupFreqSemigroup)(freqSemigroup)(xs)));
          };
      };
  };
  var filtered = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (gen) {
              var go = function (v) {
                  return Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                      if (a instanceof Data_Maybe.Nothing) {
                          return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                      };
                      if (a instanceof Data_Maybe.Just) {
                          return new Control_Monad_Rec_Class.Done(a.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Gen (line 118, column 24 - line 120, column 23): " + [ a.constructor.name ]);
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_Unit.unit);
          };
      };
  };
  var suchThat = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (gen) {
              return function (pred) {
                  return filtered(dictMonadRec)(dictMonadGen)(Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                      var $54 = pred(a);
                      if ($54) {
                          return new Data_Maybe.Just(a);
                      };
                      return Data_Maybe.Nothing.value;
                  }));
              };
          };
      };
  };
  var elements = function (dictMonadGen) {
      return function (dictFoldable1) {
          return function (xs) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function (n) {
                  return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(fromIndex(dictFoldable1)(n)(xs));
              });
          };
      };
  };
  var choose = function (dictMonadGen) {
      return function (genA) {
          return function (genB) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseBool(dictMonadGen))(function (v) {
                  if (v) {
                      return genA;
                  };
                  return genB;
              });
          };
      };
  };
  exports["choose"] = choose;
  exports["oneOf"] = oneOf;
  exports["frequency"] = frequency;
  exports["elements"] = elements;
  exports["unfoldable"] = unfoldable;
  exports["suchThat"] = suchThat;
  exports["filtered"] = filtered;
  exports["MonadGen"] = Control_Monad_Gen_Class.MonadGen;
  exports["chooseBool"] = Control_Monad_Gen_Class.chooseBool;
  exports["chooseFloat"] = Control_Monad_Gen_Class.chooseFloat;
  exports["chooseInt"] = Control_Monad_Gen_Class.chooseInt;
  exports["resize"] = Control_Monad_Gen_Class.resize;
  exports["sized"] = Control_Monad_Gen_Class.sized;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Gen.Common"] = $PS["Control.Monad.Gen.Common"] || {};
  var exports = $PS["Control.Monad.Gen.Common"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var genTuple = function (dictApply) {
      return Control_Apply.lift2(dictApply)(Data_Tuple.Tuple.create);
  };
  var genNonEmpty = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (dictUnfoldable) {
              return function (gen) {
                  return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_NonEmpty.NonEmpty.create)(gen))(Control_Monad_Gen_Class.resize(dictMonadGen)((function () {
                      var $12 = Data_Ord.max(Data_Ord.ordInt)(0);
                      return function ($13) {
                          return $12((function (v) {
                              return v - 1 | 0;
                          })($13));
                      };
                  })())(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(dictUnfoldable)(gen)));
              };
          };
      };
  };
  var genMaybe$prime = function (dictMonadGen) {
      return function (bias) {
          return function (gen) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(1.0))(function (n) {
                  var $10 = n < bias;
                  if ($10) {
                      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Maybe.Just.create)(gen);
                  };
                  return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Maybe.Nothing.value);
              });
          };
      };
  };
  var genMaybe = function (dictMonadGen) {
      return genMaybe$prime(dictMonadGen)(0.75);
  };
  var genIdentity = function (dictFunctor) {
      return Data_Functor.map(dictFunctor)(Data_Identity.Identity);
  };
  var genEither$prime = function (dictMonadGen) {
      return function (bias) {
          return function (genA) {
              return function (genB) {
                  return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(1.0))(function (n) {
                      var $11 = n < bias;
                      if ($11) {
                          return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(genA);
                      };
                      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(genB);
                  });
              };
          };
      };
  };
  var genEither = function (dictMonadGen) {
      return genEither$prime(dictMonadGen)(0.5);
  };
  exports["genEither"] = genEither;
  exports["genEither'"] = genEither$prime;
  exports["genIdentity"] = genIdentity;
  exports["genMaybe"] = genMaybe;
  exports["genMaybe'"] = genMaybe$prime;
  exports["genTuple"] = genTuple;
  exports["genNonEmpty"] = genNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Identity.Trans"] = $PS["Control.Monad.Identity.Trans"] || {};
  var exports = $PS["Control.Monad.Identity.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];                
  var IdentityT = function (x) {
      return x;
  };
  var traversableIdentityT = function (dictTraversable) {
      return dictTraversable;
  };
  var runIdentityT = function (v) {
      return v;
  };
  var plusIdentityT = function (dictPlus) {
      return dictPlus;
  };
  var newtypeIdentityT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadZeroIdentityT = function (dictMonadZero) {
      return dictMonadZero;
  };
  var monadWriterIdentityT = function (dictMonadWriter) {
      return dictMonadWriter;
  };
  var monadTransIdentityT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return IdentityT;
  });
  var monadThrowIdentityT = function (dictMonadThrow) {
      return dictMonadThrow;
  };
  var monadTellIdentityT = function (dictMonadTell) {
      return dictMonadTell;
  };
  var monadStateIdentityT = function (dictMonadState) {
      return dictMonadState;
  };
  var monadRecIdentityT = function (dictMonadRec) {
      return dictMonadRec;
  };
  var monadReaderIdentityT = function (dictMonadReader) {
      return dictMonadReader;
  };
  var monadPlusIdentityT = function (dictMonadPlus) {
      return dictMonadPlus;
  };
  var monadIdentityT = function (dictMonad) {
      return dictMonad;
  };
  var monadErrorIdentityT = function (dictMonadError) {
      return dictMonadError;
  };
  var monadEffectIdentityT = function (dictMonadEffect) {
      return dictMonadEffect;
  };
  var monadContIdentityT = function (dictMonadCont) {
      return dictMonadCont;
  };
  var monadAskIdentityT = function (dictMonadAsk) {
      return dictMonadAsk;
  };
  var mapIdentityT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorIdentityT = function (dictFunctor) {
      return dictFunctor;
  };
  var foldableIdentityT = function (dictFoldable) {
      return dictFoldable;
  };
  var eqIdentityT = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
              };
          });
      };
  };
  var ordIdentityT = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqIdentityT(dictOrd1.Eq10())(dictOrd.Eq0());
          }, function (x) {
              return function (y) {
                  return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
              };
          });
      };
  };
  var eq1IdentityT = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return Data_Eq.eq(eqIdentityT(dictEq1)(dictEq));
      });
  };
  var ord1IdentityT = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1IdentityT(dictOrd1.Eq10());
      }, function (dictOrd) {
          return Data_Ord.compare(ordIdentityT(dictOrd1)(dictOrd));
      });
  };
  var bindIdentityT = function (dictBind) {
      return dictBind;
  };
  var applyIdentityT = function (dictApply) {
      return dictApply;
  };
  var applicativeIdentityT = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeIdentityT = function (dictAlternative) {
      return dictAlternative;
  };
  var altIdentityT = function (dictAlt) {
      return dictAlt;
  };
  exports["IdentityT"] = IdentityT;
  exports["runIdentityT"] = runIdentityT;
  exports["mapIdentityT"] = mapIdentityT;
  exports["eqIdentityT"] = eqIdentityT;
  exports["ordIdentityT"] = ordIdentityT;
  exports["eq1IdentityT"] = eq1IdentityT;
  exports["ord1IdentityT"] = ord1IdentityT;
  exports["newtypeIdentityT"] = newtypeIdentityT;
  exports["functorIdentityT"] = functorIdentityT;
  exports["applyIdentityT"] = applyIdentityT;
  exports["applicativeIdentityT"] = applicativeIdentityT;
  exports["altIdentityT"] = altIdentityT;
  exports["plusIdentityT"] = plusIdentityT;
  exports["alternativeIdentityT"] = alternativeIdentityT;
  exports["bindIdentityT"] = bindIdentityT;
  exports["monadIdentityT"] = monadIdentityT;
  exports["monadRecIdentityT"] = monadRecIdentityT;
  exports["monadZeroIdentityT"] = monadZeroIdentityT;
  exports["monadPlusIdentityT"] = monadPlusIdentityT;
  exports["monadTransIdentityT"] = monadTransIdentityT;
  exports["monadEffectIdentityT"] = monadEffectIdentityT;
  exports["monadContIdentityT"] = monadContIdentityT;
  exports["monadThrowIdentityT"] = monadThrowIdentityT;
  exports["monadErrorIdentityT"] = monadErrorIdentityT;
  exports["monadAskIdentityT"] = monadAskIdentityT;
  exports["monadReaderIdentityT"] = monadReaderIdentityT;
  exports["monadStateIdentityT"] = monadStateIdentityT;
  exports["monadTellIdentityT"] = monadTellIdentityT;
  exports["monadWriterIdentityT"] = monadWriterIdentityT;
  exports["foldableIdentityT"] = foldableIdentityT;
  exports["traversableIdentityT"] = traversableIdentityT;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_BooleanAlgebra = $PS["Data.BooleanAlgebra"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Unit = $PS["Data.Unit"];                
  var showLazy = function (dictShow) {
      return new Data_Show.Show(function (x) {
          return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Data_Semiring.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Data_Semiring.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringLazy(dictRing.Semiring0());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid.Semigroup0());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Data_Unit.unit));
      });
  });
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorLazy;
  }, function (f) {
      return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
  });
  var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
  var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return f($foreign.force(l));
          };
      };
  }, function (f) {
      return function (z) {
          return function (l) {
              return f(z)($foreign.force(l));
          };
      };
  }, function (f) {
      return function (z) {
          return function (l) {
              return f($foreign.force(l))(z);
          };
      };
  });
  var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableLazy;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
  });
  var traversableLazy = new Data_Traversable.Traversable(function () {
      return foldableLazy;
  }, function () {
      return functorLazy;
  }, function (dictApplicative) {
      return function (l) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($43) {
              return $foreign.defer(Data_Function["const"]($43));
          })($foreign.force(l));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (l) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($44) {
                  return $foreign.defer(Data_Function["const"]($44));
              })(f($foreign.force(l)));
          };
      };
  });
  var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexLazy;
  }, function () {
      return functorWithIndexLazy;
  }, function () {
      return traversableLazy;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableLazy;
  }, function (dictSemigroup) {
      return function (f) {
          return function (l) {
              return f($foreign.force(l));
          };
      };
  }, function (v) {
      return function (l) {
          return $foreign.force(l);
      };
  }, function (v) {
      return function (l) {
          return $foreign.force(l);
      };
  });
  var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1Lazy;
  }, function () {
      return traversableLazy;
  }, function (dictApply) {
      return function (l) {
          return Data_Functor.map(dictApply.Functor0())(function ($45) {
              return $foreign.defer(Data_Function["const"]($45));
          })($foreign.force(l));
      };
  }, function (dictApply) {
      return function (f) {
          return function (l) {
              return Data_Functor.map(dictApply.Functor0())(function ($46) {
                  return $foreign.defer(Data_Function["const"]($46));
              })(f($foreign.force(l)));
          };
      };
  });
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqLazy(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqLazy(dictEq));
  });
  var ord1Lazy = new Data_Ord.Ord1(function () {
      return eq1Lazy;
  }, function (dictOrd) {
      return Data_Ord.compare(ordLazy(dictOrd));
  });
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var commutativeRingLazy = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringLazy(dictCommutativeRing.Ring0());
      });
  };
  var euclideanRingLazy = function (dictEuclideanRing) {
      return new Data_EuclideanRing.EuclideanRing(function () {
          return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
      }, (function () {
          var $47 = Data_EuclideanRing.degree(dictEuclideanRing);
          return function ($48) {
              return $47($foreign.force($48));
          };
      })(), function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var boundedLazy = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordLazy(dictBounded.Ord0());
      }, $foreign.defer(function (v) {
          return Data_Bounded.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Data_Bounded.top(dictBounded);
      }));
  };
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  var heytingAlgebraLazy = function (dictHeytingAlgebra) {
      return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
          };
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
      }), function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
      }));
  };
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Data_BooleanAlgebra.BooleanAlgebra(function () {
          return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var applicativeLazy = new Control_Applicative.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Control_Monad.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["commutativeRingLazy"] = commutativeRingLazy;
  exports["euclideanRingLazy"] = euclideanRingLazy;
  exports["eqLazy"] = eqLazy;
  exports["eq1Lazy"] = eq1Lazy;
  exports["ordLazy"] = ordLazy;
  exports["ord1Lazy"] = ord1Lazy;
  exports["boundedLazy"] = boundedLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["heytingAlgebraLazy"] = heytingAlgebraLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["functorWithIndexLazy"] = functorWithIndexLazy;
  exports["foldableLazy"] = foldableLazy;
  exports["foldableWithIndexLazy"] = foldableWithIndexLazy;
  exports["foldable1Lazy"] = foldable1Lazy;
  exports["traversableLazy"] = traversableLazy;
  exports["traversableWithIndexLazy"] = traversableWithIndexLazy;
  exports["traversable1Lazy"] = traversable1Lazy;
  exports["invariantLazy"] = invariantLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.List.Trans"] = $PS["Control.Monad.List.Trans"] || {};
  var exports = $PS["Control.Monad.List.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];                
  var Yield = (function () {
      function Yield(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Yield.create = function (value0) {
          return function (value1) {
              return new Yield(value0, value1);
          };
      };
      return Yield;
  })();
  var Skip = (function () {
      function Skip(value0) {
          this.value0 = value0;
      };
      Skip.create = function (value0) {
          return new Skip(value0);
      };
      return Skip;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var ListT = function (x) {
      return x;
  };
  var wrapLazy = function (dictApplicative) {
      return function (v) {
          return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
      };
  };
  var wrapEffect = function (dictFunctor) {
      return function (v) {
          return ListT(Data_Functor.map(dictFunctor)(function ($180) {
              return Skip.create(Data_Lazy.defer(Data_Function["const"]($180)));
          })(v));
      };
  };
  var unfold = function (dictMonad) {
      return function (f) {
          return function (z) {
              var g = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                          return unfold(dictMonad)(f)(v.value0.value0);
                      }));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 130, column 3 - line 130, column 60): " + [ v.constructor.name ]);
              };
              return ListT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(g)(f(z)));
          };
      };
  };
  var uncons = function (dictMonad) {
      return function (v) {
          var g = function (v1) {
              if (v1 instanceof Yield) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
              };
              if (v1 instanceof Skip) {
                  return uncons(dictMonad)(Data_Lazy.force(v1.value0));
              };
              if (v1 instanceof Done) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans (line 195, column 3 - line 195, column 50): " + [ v1.constructor.name ]);
          };
          return Control_Bind.bind(dictMonad.Bind1())(v)(g);
      };
  };
  var tail = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
      };
  };
  var stepMap = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return ListT(Data_Functor.map(dictFunctor)(f)(v));
          };
      };
  };
  var takeWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $97 = f(v.value0);
                  if ($97) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                  };
                  return Done.value;
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans (line 154, column 3 - line 154, column 68): " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative.Apply0()).Functor0())(g);
      };
  };
  var scanl = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (l) {
                  var g = function (v) {
                      var h = function (v1) {
                          if (v1 instanceof Yield) {
                              var b$prime$prime = f(v.value0)(v1.value0);
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
                          };
                          if (v1 instanceof Skip) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                          };
                          if (v1 instanceof Done) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 248, column 5 - line 248, column 78): " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(v.value1);
                  };
                  return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
              };
          };
      };
  };
  var prepend$prime = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
          };
      };
  };
  var prepend = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
          };
      };
  };
  var nil = function (dictApplicative) {
      return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
  };
  var singleton = function (dictApplicative) {
      return function (a) {
          return prepend(dictApplicative)(a)(nil(dictApplicative));
      };
  };
  var take = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return nil(dictApplicative);
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 147, column 3 - line 147, column 47): " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
          };
      };
  };
  var zipWith$prime = function (dictMonad) {
      return function (f) {
          var g = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                  };
                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
                          return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                      })))(f(v.value0.value0)(v1.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 260, column 3 - line 260, column 25): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var loop = function (fa) {
              return function (fb) {
                  return wrapEffect(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (ua) {
                      return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (ub) {
                          return g(ua)(ub);
                      });
                  }));
              };
          };
          return loop;
      };
  };
  var zipWith = function (dictMonad) {
      return function (f) {
          var g = function (a) {
              return function (b) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
              };
          };
          return zipWith$prime(dictMonad)(g);
      };
  };
  var newtypeListT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var mapMaybe = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans (line 183, column 3 - line 183, column 72): " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var iterate = function (dictMonad) {
      return function (f) {
          return function (a) {
              var g = function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
              };
              return unfold(dictMonad)(g)(a);
          };
      };
  };
  var repeat = function (dictMonad) {
      return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
  };
  var head = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
      };
  };
  var functorListT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans (line 280, column 5 - line 280, column 48): " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      });
  };
  var fromEffect = function (dictApplicative) {
      return function (fa) {
          return ListT(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
              return nil(dictApplicative);
          })))(fa));
      };
  };
  var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return fromEffect(dictMonad.Applicative0());
  });
  var foldlRec$prime = function (dictMonadRec) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(b)(v.value0.value0))(function (b$prime) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                  a: b$prime,
                                  b: v.value0.value1
                              }));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 221, column 5 - line 221, column 45): " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
              };
          };
          return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
      };
  };
  var runListTRec = function (dictMonadRec) {
      return foldlRec$prime(dictMonadRec)(function (v) {
          return function (v1) {
              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Unit.unit);
          };
      })(Data_Unit.unit);
  };
  var foldlRec = function (dictMonadRec) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                              a: f(b)(v.value0.value0),
                              b: v.value0.value1
                          }));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 239, column 7 - line 239, column 47): " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
              };
          };
          return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
      };
  };
  var foldl$prime = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 212, column 5 - line 212, column 35): " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var runListT = function (dictMonad) {
      return foldl$prime(dictMonad)(function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
          };
      })(Data_Unit.unit);
  };
  var foldl = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return loop(f(b)(v.value0.value0))(v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 229, column 5 - line 229, column 35): " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var filter = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                  var $147 = f(v.value0);
                  if ($147) {
                      return new Yield(v.value0, s$prime);
                  };
                  return new Skip(s$prime);
              };
              if (v instanceof Skip) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                  return new Skip(s$prime);
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans (line 176, column 3 - line 176, column 80): " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var dropWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $152 = f(v.value0);
                  if ($152) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                  };
                  return new Yield(v.value0, v.value1);
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans (line 169, column 3 - line 169, column 70): " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative.Apply0()).Functor0())(g);
      };
  };
  var drop = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return fa;
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 162, column 3 - line 162, column 44): " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
          };
      };
  };
  var cons = function (dictApplicative) {
      return function (lh) {
          return function (t) {
              return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
          };
      };
  };
  var unfoldable1ListT = function (dictMonad) {
      return new Data_Unfoldable1.Unfoldable1(function (f) {
          return function (b) {
              var go = function (v) {
                  if (v.value1 instanceof Data_Maybe.Nothing) {
                      return singleton(dictMonad.Applicative0())(v.value0);
                  };
                  if (v.value1 instanceof Data_Maybe.Just) {
                      return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value1.value0));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 294, column 12 - line 296, column 67): " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var unfoldableListT = function (dictMonad) {
      return new Data_Unfoldable.Unfoldable(function () {
          return unfoldable1ListT(dictMonad);
      }, function (f) {
          return function (b) {
              var go = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return nil(dictMonad.Applicative0());
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value0.value1));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 287, column 12 - line 289, column 67): " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var semigroupListT = function (dictApplicative) {
      return new Data_Semigroup.Semigroup(concat(dictApplicative));
  };
  var concat = function (dictApplicative) {
      return function (x) {
          return function (y) {
              var f = function (v) {
                  if (v instanceof Yield) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 106, column 3 - line 106, column 43): " + [ v.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(x);
          };
      };
  };
  var monoidListT = function (dictApplicative) {
      return new Data_Monoid.Monoid(function () {
          return semigroupListT(dictApplicative);
      }, nil(dictApplicative));
  };
  var catMaybes = function (dictFunctor) {
      return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  var monadListT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return bindListT(dictMonad);
      });
  };
  var bindListT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyListT(dictMonad);
      }, function (fa) {
          return function (f) {
              var g = function (v) {
                  if (v instanceof Yield) {
                      var h = function (s$prime) {
                          return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
                      };
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans (line 306, column 5 - line 308, column 31): " + [ v.constructor.name ]);
              };
              return stepMap(((dictMonad.Bind1()).Apply0()).Functor0())(g)(fa);
          };
      });
  };
  var applyListT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorListT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadListT(dictMonad)));
  };
  var applicativeListT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyListT(dictMonad);
      }, singleton(dictMonad.Applicative0()));
  };
  var monadEffectListT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadListT(dictMonadEffect.Monad0());
      }, (function () {
          var $181 = Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0());
          var $182 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($183) {
              return $181($182($183));
          };
      })());
  };
  var altListT = function (dictApplicative) {
      return new Control_Alt.Alt(function () {
          return functorListT((dictApplicative.Apply0()).Functor0());
      }, concat(dictApplicative));
  };
  var plusListT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altListT(dictMonad.Applicative0());
      }, nil(dictMonad.Applicative0()));
  };
  var alternativeListT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return plusListT(dictMonad);
      });
  };
  var monadPlusListT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      });
  };
  var monadZeroListT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      }, function () {
          return undefined;
      });
  };
  exports["ListT"] = ListT;
  exports["Yield"] = Yield;
  exports["Skip"] = Skip;
  exports["Done"] = Done;
  exports["catMaybes"] = catMaybes;
  exports["cons"] = cons;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["filter"] = filter;
  exports["foldl"] = foldl;
  exports["foldlRec"] = foldlRec;
  exports["foldl'"] = foldl$prime;
  exports["foldlRec'"] = foldlRec$prime;
  exports["fromEffect"] = fromEffect;
  exports["head"] = head;
  exports["iterate"] = iterate;
  exports["mapMaybe"] = mapMaybe;
  exports["nil"] = nil;
  exports["prepend"] = prepend;
  exports["prepend'"] = prepend$prime;
  exports["repeat"] = repeat;
  exports["runListT"] = runListT;
  exports["runListTRec"] = runListTRec;
  exports["scanl"] = scanl;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["uncons"] = uncons;
  exports["unfold"] = unfold;
  exports["wrapEffect"] = wrapEffect;
  exports["wrapLazy"] = wrapLazy;
  exports["zipWith"] = zipWith;
  exports["zipWith'"] = zipWith$prime;
  exports["newtypeListT"] = newtypeListT;
  exports["semigroupListT"] = semigroupListT;
  exports["monoidListT"] = monoidListT;
  exports["functorListT"] = functorListT;
  exports["unfoldableListT"] = unfoldableListT;
  exports["unfoldable1ListT"] = unfoldable1ListT;
  exports["applyListT"] = applyListT;
  exports["applicativeListT"] = applicativeListT;
  exports["bindListT"] = bindListT;
  exports["monadListT"] = monadListT;
  exports["monadTransListT"] = monadTransListT;
  exports["altListT"] = altListT;
  exports["plusListT"] = plusListT;
  exports["alternativeListT"] = alternativeListT;
  exports["monadZeroListT"] = monadZeroListT;
  exports["monadPlusListT"] = monadPlusListT;
  exports["monadEffectListT"] = monadEffectListT;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.RWS.Trans"] = $PS["Control.Monad.RWS.Trans"] || {};
  var exports = $PS["Control.Monad.RWS.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];                
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };
  var withRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Data_Tuple.uncurry(m)(f(r)(s));
              };
          };
      };
  };
  var runRWST = function (v) {
      return v;
  };
  var newtypeRWST = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  };
  var mapRWST = function (f) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return f(v(r)(s));
              };
          };
      };
  };
  var lazyRWST = new Control_Lazy.Lazy(function (f) {
      return function (r) {
          return function (s) {
              var v = f(Data_Unit.unit);
              return v(r)(s);
          };
      };
  });
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var execRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                  });
              };
          };
      };
  };
  var evalRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind.Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var v2 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var semigroupRWST = function (dictBind) {
      return function (dictMonoid) {
          return function (dictSemigroup) {
              return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyRWST(dictBind)(dictMonoid))(Data_Semigroup.append(dictSemigroup)));
          };
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad.Bind1())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad.Bind1())(dictMonoid);
          });
      };
  };
  var monadAskRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadEffectRWS = function (dictMonoid) {
      return function (dictMonadEffect) {
          return new Effect_Class.MonadEffect(function () {
              return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
          }, (function () {
              var $158 = Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0());
              var $159 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($160) {
                  return $158($159($160));
              };
          })());
      };
  };
  var monadRecRWST = function (dictMonadRec) {
      return function (dictMonoid) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadRWST(dictMonadRec.Monad0())(dictMonoid);
          }, function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (v) {
                          var v1 = k(v.value1);
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(r)(v.value0))(function (v2) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                                  if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                                      return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                  };
                                  if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                                      return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.RWS.Trans (line 128, column 16 - line 130, column 68): " + [ v2.value1.constructor.name ]);
                              })());
                          });
                      };
                  };
                  return function (r) {
                      return function (s) {
                          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var v1 = f(s);
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadTellRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, dictMonoid.Semigroup0, function (w) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellRWST(dictMonad)(dictMonoid);
          }, function () {
              return dictMonoid;
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          });
      };
  };
  var monadThrowRWST = function (dictMonadThrow) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadThrow(function () {
              return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          });
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return RWST(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                              var v = h(e);
                              return v(r)(s);
                          });
                      };
                  });
              };
          });
      };
  };
  var monoidRWST = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonoid1) {
              return new Data_Monoid.Monoid(function () {
                  return semigroupRWST(dictMonad.Bind1())(dictMonoid)(dictMonoid1.Semigroup0());
              }, Control_Applicative.pure(applicativeRWST(dictMonad)(dictMonoid))(Data_Monoid.mempty(dictMonoid1)));
          };
      };
  };
  var altRWST = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorRWST(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return RWST(function (r) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
                  };
              });
          };
      });
  };
  var plusRWST = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altRWST(dictPlus.Alt0());
      }, function (v) {
          return function (v1) {
              return Control_Plus.empty(dictPlus);
          };
      });
  };
  var alternativeRWST = function (dictMonoid) {
      return function (dictAlternative) {
          return function (dictMonad) {
              return new Control_Alternative.Alternative(function () {
                  return applicativeRWST(dictMonad)(dictMonoid);
              }, function () {
                  return plusRWST(dictAlternative.Plus1());
              });
          };
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["RWST"] = RWST;
  exports["runRWST"] = runRWST;
  exports["evalRWST"] = evalRWST;
  exports["execRWST"] = execRWST;
  exports["mapRWST"] = mapRWST;
  exports["withRWST"] = withRWST;
  exports["newtypeRWST"] = newtypeRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["altRWST"] = altRWST;
  exports["alternativeRWST"] = alternativeRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["lazyRWST"] = lazyRWST;
  exports["monadEffectRWS"] = monadEffectRWS;
  exports["monadAskRWST"] = monadAskRWST;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadTellRWST"] = monadTellRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
  exports["monadThrowRWST"] = monadThrowRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
  exports["monadRecRWST"] = monadRecRWST;
  exports["plusRWST"] = plusRWST;
  exports["semigroupRWST"] = semigroupRWST;
  exports["monoidRWST"] = monoidRWST;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.RWS"] = $PS["Control.Monad.RWS"] || {};
  var exports = $PS["Control.Monad.RWS"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_RWS_Trans = $PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withRWS = Control_Monad_RWS_Trans.withRWST;
  var rws = function (f) {
      return function (r) {
          return function (s) {
              return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(r)(s));
          };
      };
  };
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              var v = m(r)(s);
              return v;
          };
      };
  };
  var mapRWS = function (f) {
      return Control_Monad_RWS_Trans.mapRWST((function () {
          var $3 = Data_Newtype.unwrap();
          return function ($4) {
              return Data_Identity.Identity(f($3($4)));
          };
      })());
  };
  var execRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Newtype.unwrap()(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  var evalRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Newtype.unwrap()(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  exports["rws"] = rws;
  exports["runRWS"] = runRWS;
  exports["evalRWS"] = evalRWS;
  exports["execRWS"] = execRWS;
  exports["mapRWS"] = mapRWS;
  exports["withRWS"] = withRWS;
  exports["RWSResult"] = Control_Monad_RWS_Trans.RWSResult;
  exports["RWST"] = Control_Monad_RWS_Trans.RWST;
  exports["MonadTrans"] = Control_Monad_RWS_Trans.MonadTrans;
  exports["evalRWST"] = Control_Monad_RWS_Trans.evalRWST;
  exports["execRWST"] = Control_Monad_RWS_Trans.execRWST;
  exports["lift"] = Control_Monad_RWS_Trans.lift;
  exports["mapRWST"] = Control_Monad_RWS_Trans.mapRWST;
  exports["runRWST"] = Control_Monad_RWS_Trans.runRWST;
  exports["withRWST"] = Control_Monad_RWS_Trans.withRWST;
  exports["ask"] = Control_Monad_Reader_Class.ask;
  exports["asks"] = Control_Monad_Reader_Class.asks;
  exports["local"] = Control_Monad_Reader_Class.local;
  exports["get"] = Control_Monad_State_Class.get;
  exports["gets"] = Control_Monad_State_Class.gets;
  exports["modify"] = Control_Monad_State_Class.modify;
  exports["modify_"] = Control_Monad_State_Class.modify_;
  exports["put"] = Control_Monad_State_Class.put;
  exports["state"] = Control_Monad_State_Class.state;
  exports["censor"] = Control_Monad_Writer_Class.censor;
  exports["listen"] = Control_Monad_Writer_Class.listen;
  exports["listens"] = Control_Monad_Writer_Class.listens;
  exports["pass"] = Control_Monad_Writer_Class.pass;
  exports["tell"] = Control_Monad_Writer_Class.tell;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Reader"] = $PS["Control.Monad.Reader"] || {};
  var exports = $PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withReader = Control_Monad_Reader_Trans.withReaderT;
  var runReader = function (v) {
      var $2 = Data_Newtype.unwrap();
      return function ($3) {
          return $2(v($3));
      };
  };
  var mapReader = function (f) {
      return Control_Monad_Reader_Trans.mapReaderT((function () {
          var $4 = Data_Newtype.unwrap();
          return function ($5) {
              return Data_Identity.Identity(f($4($5)));
          };
      })());
  };
  exports["runReader"] = runReader;
  exports["mapReader"] = mapReader;
  exports["withReader"] = withReader;
  exports["MonadAsk"] = Control_Monad_Reader_Class.MonadAsk;
  exports["MonadReader"] = Control_Monad_Reader_Class.MonadReader;
  exports["ask"] = Control_Monad_Reader_Class.ask;
  exports["asks"] = Control_Monad_Reader_Class.asks;
  exports["local"] = Control_Monad_Reader_Class.local;
  exports["ReaderT"] = Control_Monad_Reader_Trans.ReaderT;
  exports["MonadTrans"] = Control_Monad_Reader_Trans.MonadTrans;
  exports["lift"] = Control_Monad_Reader_Trans.lift;
  exports["mapReaderT"] = Control_Monad_Reader_Trans.mapReaderT;
  exports["runReaderT"] = Control_Monad_Reader_Trans.runReaderT;
  exports["withReaderT"] = Control_Monad_Reader_Trans.withReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST"] = $PS["Control.Monad.ST"] || {};
  var exports = $PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  exports["for"] = Control_Monad_ST_Internal["for"];
  exports["foreach"] = Control_Monad_ST_Internal.foreach;
  exports["run"] = Control_Monad_ST_Internal.run;
  exports["while"] = Control_Monad_ST_Internal["while"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST.Global"] = $PS["Control.Monad.ST.Global"] || {};
  var exports = $PS["Control.Monad.ST.Global"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toEffect = Unsafe_Coerce.unsafeCoerce;
  exports["toEffect"] = toEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST.Class"] = $PS["Control.Monad.ST.Class"] || {};
  var exports = $PS["Control.Monad.ST.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Global = $PS["Control.Monad.ST.Global"];                
  var MonadST = function (liftST) {
      this.liftST = liftST;
  };
  var monadSTST = new MonadST(Control_Category.identity(Control_Category.categoryFn));
  var monadSTEffect = new MonadST(Control_Monad_ST_Global.toEffect);
  var liftST = function (dict) {
      return dict.liftST;
  };
  exports["liftST"] = liftST;
  exports["MonadST"] = MonadST;
  exports["monadSTEffect"] = monadSTEffect;
  exports["monadSTST"] = monadSTST;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST.Ref"] = $PS["Control.Monad.ST.Ref"] || {};
  var exports = $PS["Control.Monad.ST.Ref"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  exports["modify"] = Control_Monad_ST_Internal.modify;
  exports["modify'"] = Control_Monad_ST_Internal["modify'"];
  exports["new"] = Control_Monad_ST_Internal["new"];
  exports["read"] = Control_Monad_ST_Internal.read;
  exports["write"] = Control_Monad_ST_Internal.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Cont_Class = $PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];                
  var StateT = function (x) {
      return x;
  };
  var withStateT = function (f) {
      return function (v) {
          return function ($106) {
              return v(f($106));
          };
      };
  };
  var runStateT = function (v) {
      return v;
  };
  var newtypeStateT = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (v) {
          return function ($107) {
              return f(v($107));
          };
      };
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var semigroupStateT = function (dictMonad) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyStateT(dictMonad))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var monadAskStateT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadStateT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderStateT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskStateT(dictMonadReader.MonadAsk0());
      }, (function () {
          var $108 = Control_Monad_Reader_Class.local(dictMonadReader);
          return function ($109) {
              return mapStateT($108($109));
          };
      })());
  };
  var monadContStateT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadStateT(dictMonadCont.Monad0());
      }, function (f) {
          return function (s) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function (a) {
                      return function (s$prime) {
                          return c(new Data_Tuple.Tuple(a, s$prime));
                      };
                  });
                  return v(s);
              });
          };
      });
  };
  var monadEffectState = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadStateT(dictMonadEffect.Monad0());
      }, (function () {
          var $110 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
          var $111 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($112) {
              return $110($111($112));
          };
      })());
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec.Monad0());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  var v1 = f(v.value0);
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(v.value1))(function (v2) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                          };
                          if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans (line 88, column 16 - line 90, column 40): " + [ v2.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  var monadTellStateT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadStateT(dictMonadTell.Monad1());
      }, dictMonadTell.Semigroup0, (function () {
          var $115 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad1());
          var $116 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function ($117) {
              return $115($116($117));
          };
      })());
  };
  var monadWriterStateT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellStateT(dictMonadWriter.MonadTell1());
      }, dictMonadWriter.Monoid0, function (m) {
          return function (s) {
              return Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              });
          };
      }, function (m) {
          return function (s) {
              return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell1()).Monad1()).Bind1())(m(s))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell1()).Monad1()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              }));
          };
      });
  };
  var monadThrowStateT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadStateT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowStateT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                      var v1 = h(e);
                      return v1(s);
                  });
              };
          };
      });
  };
  var monoidStateT = function (dictMonad) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupStateT(dictMonad)(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(applicativeStateT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictAlt.Functor0());
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                  };
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus.Alt0());
          }, function (v) {
              return Control_Plus.empty(dictPlus);
          });
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeStateT(dictMonad);
          }, function () {
              return plusStateT(dictMonad)(dictAlternative.Plus1());
          });
      };
  };
  var monadPlusStateT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeStateT(dictMonadPlus.Monad0())(dictMonadPlus.Alternative1());
      }, function () {
          return monadStateT(dictMonadPlus.Monad0());
      });
  };
  var monadZeroStateT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
      }, function () {
          return monadStateT(dictMonadZero.Monad0());
      }, function () {
          return undefined;
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["mapStateT"] = mapStateT;
  exports["withStateT"] = withStateT;
  exports["newtypeStateT"] = newtypeStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadZeroStateT"] = monadZeroStateT;
  exports["monadPlusStateT"] = monadPlusStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadContStateT"] = monadContStateT;
  exports["monadThrowStateT"] = monadThrowStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadAskStateT"] = monadAskStateT;
  exports["monadReaderStateT"] = monadReaderStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadTellStateT"] = monadTellStateT;
  exports["monadWriterStateT"] = monadWriterStateT;
  exports["semigroupStateT"] = semigroupStateT;
  exports["monoidStateT"] = monoidStateT;
  exports["MonadState"] = Control_Monad_State_Class.MonadState;
  exports["get"] = Control_Monad_State_Class.get;
  exports["gets"] = Control_Monad_State_Class.gets;
  exports["modify"] = Control_Monad_State_Class.modify;
  exports["modify_"] = Control_Monad_State_Class.modify_;
  exports["put"] = Control_Monad_State_Class.put;
  exports["state"] = Control_Monad_State_Class.state;
  exports["MonadTrans"] = Control_Monad_Trans_Class.MonadTrans;
  exports["lift"] = Control_Monad_Trans_Class.lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withState = Control_Monad_State_Trans.withStateT;
  var runState = function (v) {
      var $16 = Data_Newtype.unwrap();
      return function ($17) {
          return $16(v($17));
      };
  };
  var mapState = function (f) {
      return Control_Monad_State_Trans.mapStateT((function () {
          var $18 = Data_Newtype.unwrap();
          return function ($19) {
              return Data_Identity.Identity(f($18($19)));
          };
      })());
  };
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["runState"] = runState;
  exports["evalState"] = evalState;
  exports["execState"] = execState;
  exports["mapState"] = mapState;
  exports["withState"] = withState;
  exports["MonadState"] = Control_Monad_State_Class.MonadState;
  exports["get"] = Control_Monad_State_Class.get;
  exports["gets"] = Control_Monad_State_Class.gets;
  exports["modify"] = Control_Monad_State_Class.modify;
  exports["modify_"] = Control_Monad_State_Class.modify_;
  exports["put"] = Control_Monad_State_Class.put;
  exports["state"] = Control_Monad_State_Class.state;
  exports["StateT"] = Control_Monad_State_Trans.StateT;
  exports["MonadTrans"] = Control_Monad_State_Trans.MonadTrans;
  exports["evalStateT"] = Control_Monad_State_Trans.evalStateT;
  exports["execStateT"] = Control_Monad_State_Trans.execStateT;
  exports["lift"] = Control_Monad_State_Trans.lift;
  exports["mapStateT"] = Control_Monad_State_Trans.mapStateT;
  exports["runStateT"] = Control_Monad_State_Trans.runStateT;
  exports["withStateT"] = Control_Monad_State_Trans.withStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Writer"] = $PS["Control.Monad.Writer"] || {};
  var exports = $PS["Control.Monad.Writer"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var writer = (function () {
      var $0 = Control_Applicative.pure(Data_Identity.applicativeIdentity);
      return function ($1) {
          return Control_Monad_Writer_Trans.WriterT($0($1));
      };
  })();
  var runWriter = (function () {
      var $2 = Data_Newtype.unwrap();
      return function ($3) {
          return $2(Control_Monad_Writer_Trans.runWriterT($3));
      };
  })();
  var mapWriter = function (f) {
      return Control_Monad_Writer_Trans.mapWriterT((function () {
          var $4 = Data_Newtype.unwrap();
          return function ($5) {
              return Data_Identity.Identity(f($4($5)));
          };
      })());
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["writer"] = writer;
  exports["runWriter"] = runWriter;
  exports["execWriter"] = execWriter;
  exports["mapWriter"] = mapWriter;
  exports["MonadTell"] = Control_Monad_Writer_Class.MonadTell;
  exports["MonadWriter"] = Control_Monad_Writer_Class.MonadWriter;
  exports["censor"] = Control_Monad_Writer_Class.censor;
  exports["listen"] = Control_Monad_Writer_Class.listen;
  exports["listens"] = Control_Monad_Writer_Class.listens;
  exports["pass"] = Control_Monad_Writer_Class.pass;
  exports["tell"] = Control_Monad_Writer_Class.tell;
  exports["WriterT"] = Control_Monad_Writer_Trans.WriterT;
  exports["MonadTrans"] = Control_Monad_Writer_Trans.MonadTrans;
  exports["execWriterT"] = Control_Monad_Writer_Trans.execWriterT;
  exports["lift"] = Control_Monad_Writer_Trans.lift;
  exports["mapWriterT"] = Control_Monad_Writer_Trans.mapWriterT;
  exports["runWriterT"] = Control_Monad_Writer_Trans.runWriterT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  var showJsonDecodeError = new Data_Show.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof UnexpectedValue) {
          return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
      };
      if (v instanceof AtIndex) {
          return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof AtKey) {
          return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof Named) {
          return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
      };
      if (v instanceof MissingValue) {
          return "MissingValue";
      };
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [ v.constructor.name ]);
  });
  var printJsonDecodeError = function (err) {
      var go = function (v) {
          if (v instanceof TypeMismatch) {
              return "  Expected value of type '" + (v.value0 + "'.");
          };
          if (v instanceof UnexpectedValue) {
              return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
          };
          if (v instanceof AtIndex) {
              return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\x0a" + go(v.value1)));
          };
          if (v instanceof AtKey) {
              return "  At object key '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof Named) {
              return "  Under '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof MissingValue) {
              return "  No value was found.";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [ v.constructor.name ]);
      };
      return "An error occurred while decoding a JSON value:\x0a" + go(err);
  };
  var genericJsonDecodeError = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof TypeMismatch) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof UnexpectedValue) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof AtIndex) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
      };
      if (x instanceof AtKey) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
      };
      if (x instanceof Named) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
      };
      if (x instanceof MissingValue) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
      };
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 21, column 1 - line 21, column 68): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new TypeMismatch(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new UnexpectedValue(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new AtIndex(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new AtKey(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new Named(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
          return MissingValue.value;
      };
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 21, column 1 - line 21, column 68): " + [ x.constructor.name ]);
  });
  var eqJsonDecodeError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              return x.value0 === y.value0;
          };
          if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
              return Data_Eq.eq(Data_Argonaut_Core.eqJson)(x.value0)(y.value0);
          };
          if (x instanceof AtIndex && y instanceof AtIndex) {
              return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
          };
          if (x instanceof AtKey && y instanceof AtKey) {
              return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
          };
          if (x instanceof Named && y instanceof Named) {
              return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
          };
          if (x instanceof MissingValue && y instanceof MissingValue) {
              return true;
          };
          return false;
      };
  });
  var ordJsonDecodeError = new Data_Ord.Ord(function () {
      return eqJsonDecodeError;
  }, function (x) {
      return function (y) {
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof TypeMismatch) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TypeMismatch) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
              return Data_Ord.compare(Data_Argonaut_Core.ordJson)(x.value0)(y.value0);
          };
          if (x instanceof UnexpectedValue) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof UnexpectedValue) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AtIndex && y instanceof AtIndex) {
              var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
          };
          if (x instanceof AtIndex) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AtIndex) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AtKey && y instanceof AtKey) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
          };
          if (x instanceof AtKey) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AtKey) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Named && y instanceof Named) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
          };
          if (x instanceof Named) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Named) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof MissingValue && y instanceof MissingValue) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 20, column 1 - line 20, column 58): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["TypeMismatch"] = TypeMismatch;
  exports["UnexpectedValue"] = UnexpectedValue;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
  exports["printJsonDecodeError"] = printJsonDecodeError;
  exports["eqJsonDecodeError"] = eqJsonDecodeError;
  exports["ordJsonDecodeError"] = ordJsonDecodeError;
  exports["genericJsonDecodeError"] = genericJsonDecodeError;
  exports["showJsonDecodeError"] = showJsonDecodeError;
})(PS);
(function(exports) {
  "use strict";

  exports.foldr1Impl = function (f) {
    return function (xs) {
      var acc = xs[xs.length - 1];
      for (var i = xs.length - 2; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };

  exports.foldl1Impl = function (f) {
    return function (xs) {
      var acc = xs[0];
      var len = xs.length;
      for (var i = 1; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };

  exports.traverse1Impl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function finalCell(head) {
      return new ConsCell(head, emptyList);
    }

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (f) {
          var buildFrom = function (x, ys) {
            return apply(map(consList)(f(x)))(ys);
          };

          var go = function (acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last = xs[currentLen - 1];
              return new Cont(function () {
                var built = go(buildFrom(last, acc), currentLen - 1, xs);
                return built;
              });
            }
          };

          return function (array) {
            var acc = map(finalCell)(f(array[array.length - 1]));
            var result = go(acc, array.length - 1, array);
            while (result instanceof Cont) {
              result = result.fn();
            }

            return map(listToArray)(result);
          };
        };
      };
    };
  }();
})(PS["Data.Array.NonEmpty.Internal"] = PS["Data.Array.NonEmpty.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var $foreign = $PS["Data.Array.NonEmpty.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var NonEmptyArray = function (x) {
      return x;
  };
  var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
  var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
  var traversableNonEmptyArray = Data_Traversable.traversableArray;
  var showNonEmptyArray = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
      });
  };
  var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
  var ordNonEmptyArray = function (dictOrd) {
      return Data_Ord.ordArray(dictOrd);
  };
  var ord1NonEmptyArray = Data_Ord.ord1Array;
  var monadNonEmptyArray = Control_Monad.monadArray;
  var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
  var functorNonEmptyArray = Data_Functor.functorArray;
  var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableNonEmptyArray;
  }, function (dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1DefaultL(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
  }, $foreign.foldl1Impl, $foreign.foldr1Impl);
  var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1NonEmptyArray;
  }, function () {
      return traversableNonEmptyArray;
  }, function (dictApply) {
      return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
  }, function (dictApply) {
      return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
  });
  var eqNonEmptyArray = function (dictEq) {
      return Data_Eq.eqArray(dictEq);
  };
  var eq1NonEmptyArray = Data_Eq.eq1Array;
  var bindNonEmptyArray = Control_Bind.bindArray;
  var applyNonEmptyArray = Control_Apply.applyArray;
  var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
  var altNonEmptyArray = Control_Alt.altArray;
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["showNonEmptyArray"] = showNonEmptyArray;
  exports["eqNonEmptyArray"] = eqNonEmptyArray;
  exports["eq1NonEmptyArray"] = eq1NonEmptyArray;
  exports["ordNonEmptyArray"] = ordNonEmptyArray;
  exports["ord1NonEmptyArray"] = ord1NonEmptyArray;
  exports["semigroupNonEmptyArray"] = semigroupNonEmptyArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
  exports["functorWithIndexNonEmptyArray"] = functorWithIndexNonEmptyArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
  exports["foldableWithIndexNonEmptyArray"] = foldableWithIndexNonEmptyArray;
  exports["foldable1NonEmptyArray"] = foldable1NonEmptyArray;
  exports["unfoldable1NonEmptyArray"] = unfoldable1NonEmptyArray;
  exports["traversableNonEmptyArray"] = traversableNonEmptyArray;
  exports["traversableWithIndexNonEmptyArray"] = traversableWithIndexNonEmptyArray;
  exports["traversable1NonEmptyArray"] = traversable1NonEmptyArray;
  exports["applyNonEmptyArray"] = applyNonEmptyArray;
  exports["applicativeNonEmptyArray"] = applicativeNonEmptyArray;
  exports["bindNonEmptyArray"] = bindNonEmptyArray;
  exports["monadNonEmptyArray"] = monadNonEmptyArray;
  exports["altNonEmptyArray"] = altNonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var unionBy$prime = function (eq) {
      return function (xs) {
          var $50 = Data_Array.unionBy(eq)(toArray(xs));
          return function ($51) {
              return unsafeFromArray($50($51));
          };
      };
  };
  var union$prime = function (dictEq) {
      return unionBy$prime(Data_Eq.eq(dictEq));
  };
  var unionBy = function (eq) {
      return function (xs) {
          var $52 = unionBy$prime(eq)(xs);
          return function ($53) {
              return $52(toArray($53));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var unzip = (function () {
      var $54 = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
      return function ($55) {
          return $54(Data_Array.unzip(toArray($55)));
      };
  })();
  var updateAt = function (i) {
      return function (x) {
          var $56 = Data_Array.updateAt(i)(x);
          return function ($57) {
              return unsafeFromArrayF($56(toArray($57)));
          };
      };
  };
  var zip = function (xs) {
      return function (ys) {
          return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
              };
          };
      };
  };
  var splitAt = function (i) {
      return function (xs) {
          return Data_Array.splitAt(i)(toArray(xs));
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          var $58 = Data_Array.some(dictAlternative)(dictLazy);
          return function ($59) {
              return unsafeFromArrayF($58($59));
          };
      };
  };
  var snoc$prime = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(xs)(x));
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
      };
  };
  var singleton = function ($60) {
      return unsafeFromArray(Data_Array.singleton($60));
  };
  var replicate = function (i) {
      return function (x) {
          return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
      };
  };
  var range = function (x) {
      return function (y) {
          return unsafeFromArray(Data_Array.range(x)(y));
      };
  };
  var modifyAt = function (i) {
      return function (f) {
          var $61 = Data_Array.modifyAt(i)(f);
          return function ($62) {
              return unsafeFromArrayF($61(toArray($62)));
          };
      };
  };
  var intersectBy$prime = function (eq) {
      return function (xs) {
          return Data_Array.intersectBy(eq)(toArray(xs));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          var $63 = intersectBy$prime(eq)(xs);
          return function ($64) {
              return $63(toArray($64));
          };
      };
  };
  var intersect$prime = function (dictEq) {
      return intersectBy$prime(Data_Eq.eq(dictEq));
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var intercalate = function (dictSemigroup) {
      return Data_Semigroup_Foldable.intercalate(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictSemigroup);
  };
  var insertAt = function (i) {
      return function (x) {
          var $65 = Data_Array.insertAt(i)(x);
          return function ($66) {
              return unsafeFromArrayF($65(toArray($66)));
          };
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      var $67 = Data_Array.fromFoldable(dictFoldable1.Foldable0());
      return function ($68) {
          return unsafeFromArray($67($68));
      };
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      var $69 = Data_Array.fromFoldable(dictFoldable);
      return function ($70) {
          return fromArray($69($70));
      };
  };
  var foldr1 = Data_Semigroup_Foldable.foldr1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
  var foldl1 = Data_Semigroup_Foldable.foldl1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
  var foldMap1 = function (dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictSemigroup);
  };
  var fold1 = function (dictSemigroup) {
      return Data_Semigroup_Foldable.fold1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictSemigroup);
  };
  var difference$prime = function (dictEq) {
      return function (xs) {
          return Data_Array.difference(dictEq)(toArray(xs));
      };
  };
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var fromNonEmpty = function (v) {
      return cons$prime(v.value0)(v.value1);
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
  var concat = (function () {
      var $71 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray);
      return function ($72) {
          return unsafeFromArray(Data_Array.concat(toArray($71($72))));
      };
  })();
  var appendArray = function (xs) {
      return function (ys) {
          return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
      };
  };
  var alterAt = function (i) {
      return function (f) {
          var $73 = Data_Array.alterAt(i)(f);
          return function ($74) {
              return $73(toArray($74));
          };
      };
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);
  var tail = adaptMaybe(Data_Array.tail);
  var uncons = adaptMaybe(Data_Array.uncons);
  var toNonEmpty = function ($77) {
      return (function (v) {
          return new Data_NonEmpty.NonEmpty(v.head, v.tail);
      })(uncons($77));
  };
  var unsnoc = adaptMaybe(Data_Array.unsnoc);
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };
  var all = function (p) {
      return adaptAny(Data_Array.all(p));
  };
  var any = function (p) {
      return adaptAny(Data_Array.any(p));
  };
  var catMaybes = adaptAny(Data_Array.catMaybes);
  var $$delete = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array["delete"](dictEq)(x));
      };
  };
  var deleteAt = function (i) {
      return adaptAny(Data_Array.deleteAt(i));
  };
  var deleteBy = function (f) {
      return function (x) {
          return adaptAny(Data_Array.deleteBy(f)(x));
      };
  };
  var difference = function (dictEq) {
      return function (xs) {
          return adaptAny(difference$prime(dictEq)(xs));
      };
  };
  var drop = function (i) {
      return adaptAny(Data_Array.drop(i));
  };
  var dropEnd = function (i) {
      return adaptAny(Data_Array.dropEnd(i));
  };
  var dropWhile = function (f) {
      return adaptAny(Data_Array.dropWhile(f));
  };
  var elem = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array.elem(dictEq)(x));
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array.elemIndex(dictEq)(x));
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
      };
  };
  var filter = function (f) {
      return adaptAny(Data_Array.filter(f));
  };
  var filterA = function (dictApplicative) {
      return function (f) {
          return adaptAny(Data_Array.filterA(dictApplicative)(f));
      };
  };
  var find = function (p) {
      return adaptAny(Data_Array.find(p));
  };
  var findIndex = function (p) {
      return adaptAny(Data_Array.findIndex(p));
  };
  var findLastIndex = function (x) {
      return adaptAny(Data_Array.findLastIndex(x));
  };
  var findMap = function (p) {
      return adaptAny(Data_Array.findMap(p));
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (acc) {
              return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
          };
      };
  };
  var foldRecM = function (dictMonadRec) {
      return function (f) {
          return function (acc) {
              return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
          };
      };
  };
  var index = adaptAny(Data_Array.index);
  var length = adaptAny(Data_Array.length);
  var mapMaybe = function (f) {
      return adaptAny(Data_Array.mapMaybe(f));
  };
  var notElem = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array.notElem(dictEq)(x));
      };
  };
  var partition = function (f) {
      return adaptAny(Data_Array.partition(f));
  };
  var slice = function (start) {
      return function (end) {
          return adaptAny(Data_Array.slice(start)(end));
      };
  };
  var span = function (f) {
      return adaptAny(Data_Array.span(f));
  };
  var take = function (i) {
      return adaptAny(Data_Array.take(i));
  };
  var takeEnd = function (i) {
      return adaptAny(Data_Array.takeEnd(i));
  };
  var takeWhile = function (f) {
      return adaptAny(Data_Array.takeWhile(f));
  };
  var toUnfoldable = function (dictUnfoldable) {
      return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
  };
  var unsafeAdapt = function (f) {
      var $79 = adaptAny(f);
      return function ($80) {
          return unsafeFromArray($79($80));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  var group = function (dictEq) {
      return unsafeAdapt(Data_Array.group(dictEq));
  };
  var group$prime = function (dictWarn) {
      return function (dictOrd) {
          return unsafeAdapt(Data_Array.groupAll(dictOrd));
      };
  };
  var groupAllBy = function (op) {
      return unsafeAdapt(Data_Array.groupAllBy(op));
  };
  var groupAll = function (dictOrd) {
      return groupAllBy(Data_Ord.compare(dictOrd));
  };
  var groupBy = function (op) {
      return unsafeAdapt(Data_Array.groupBy(op));
  };
  var insert = function (dictOrd) {
      return function (x) {
          return unsafeAdapt(Data_Array.insert(dictOrd)(x));
      };
  };
  var insertBy = function (f) {
      return function (x) {
          return unsafeAdapt(Data_Array.insertBy(f)(x));
      };
  };
  var intersperse = function (x) {
      return unsafeAdapt(Data_Array.intersperse(x));
  };
  var mapWithIndex = function (f) {
      return unsafeAdapt(Data_Array.mapWithIndex(f));
  };
  var modifyAtIndices = function (dictFoldable) {
      return function (is) {
          return function (f) {
              return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
          };
      };
  };
  var nub = function (dictOrd) {
      return unsafeAdapt(Data_Array.nub(dictOrd));
  };
  var nubBy = function (f) {
      return unsafeAdapt(Data_Array.nubBy(f));
  };
  var nubByEq = function (f) {
      return unsafeAdapt(Data_Array.nubByEq(f));
  };
  var nubEq = function (dictEq) {
      return unsafeAdapt(Data_Array.nubEq(dictEq));
  };
  var reverse = unsafeAdapt(Data_Array.reverse);
  var scanl = function (f) {
      return function (x) {
          return unsafeAdapt(Data_Array.scanl(f)(x));
      };
  };
  var scanr = function (f) {
      return function (x) {
          return unsafeAdapt(Data_Array.scanr(f)(x));
      };
  };
  var sort = function (dictOrd) {
      return unsafeAdapt(Data_Array.sort(dictOrd));
  };
  var sortBy = function (f) {
      return unsafeAdapt(Data_Array.sortBy(f));
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
      };
  };
  var updateAtIndices = function (dictFoldable) {
      return function (pairs) {
          return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
      };
  };
  var unsafeIndex = function (dictPartial) {
      return adaptAny(Data_Array.unsafeIndex());
  };
  var toUnfoldable1 = function (dictUnfoldable1) {
      return function (xs) {
          var len = length(xs);
          var f = function (i) {
              return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))((function () {
                  var $49 = i < (len - 1 | 0);
                  if ($49) {
                      return new Data_Maybe.Just(i + 1 | 0);
                  };
                  return Data_Maybe.Nothing.value;
              })());
          };
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
      };
  };
  exports["fromArray"] = fromArray;
  exports["fromNonEmpty"] = fromNonEmpty;
  exports["toArray"] = toArray;
  exports["toNonEmpty"] = toNonEmpty;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldable1"] = toUnfoldable1;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["replicate"] = replicate;
  exports["some"] = some;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["cons'"] = cons$prime;
  exports["snoc"] = snoc;
  exports["snoc'"] = snoc$prime;
  exports["appendArray"] = appendArray;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["find"] = find;
  exports["findMap"] = findMap;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["modifyAtIndices"] = modifyAtIndices;
  exports["alterAt"] = alterAt;
  exports["intersperse"] = intersperse;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["partition"] = partition;
  exports["splitAt"] = splitAt;
  exports["filterA"] = filterA;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldl1"] = foldl1;
  exports["foldr1"] = foldr1;
  exports["foldMap1"] = foldMap1;
  exports["fold1"] = fold1;
  exports["intercalate"] = intercalate;
  exports["scanl"] = scanl;
  exports["scanr"] = scanr;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["slice"] = slice;
  exports["take"] = take;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropEnd"] = dropEnd;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["groupAll"] = groupAll;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["groupAllBy"] = groupAllBy;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["nubEq"] = nubEq;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["union'"] = union$prime;
  exports["unionBy"] = unionBy;
  exports["unionBy'"] = unionBy$prime;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["difference'"] = difference$prime;
  exports["intersect"] = intersect;
  exports["intersect'"] = intersect$prime;
  exports["intersectBy"] = intersectBy;
  exports["intersectBy'"] = intersectBy$prime;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["any"] = any;
  exports["all"] = all;
  exports["foldM"] = foldM;
  exports["foldRecM"] = foldRecM;
  exports["unsafeIndex"] = unsafeIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Lazy.Types"] = $PS["Data.List.Lazy.Types"] || {};
  var exports = $PS["Data.List.Lazy.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Control_Extend = $PS["Control.Extend"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var newtypeNonEmptyList = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeList = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var step = (function () {
      var $225 = Data_Newtype.unwrap();
      return function ($226) {
          return Data_Lazy.force($225($226));
      };
  })();
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 104, column 5 - line 104, column 21): " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($227) {
          return step(f($227));
      }));
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 113, column 5 - line 113, column 17): " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
      };
  });
  var functorNonEmptyList = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                              $tco_var_v = step(v.value1);
                              $copy_v1 = step(v1.value1);
                              return;
                          };
                          $tco_done = true;
                          return false;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(step(xs))(step(ys));
          };
      };
  });
  var eq1NonEmptyList = new Data_Eq.Eq1(function (dictEq) {
      return function (v) {
          return function (v1) {
              return Data_Eq.eq1(Data_Lazy.eq1Lazy)(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq))(v)(v1);
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var eqNonEmptyList = function (dictEq) {
      return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = step(v.value1);
                                  $copy_v1 = step(v1.value1);
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 90, column 5 - line 90, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(step(xs))(step(ys));
          };
      };
  });
  var ord1NonEmptyList = new Data_Ord.Ord1(function () {
      return eq1NonEmptyList;
  }, function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Ord.compare1(Data_Lazy.ord1Lazy)(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd))(v)(v1);
          };
      };
  });
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  };
  var ordNonEmptyList = function (dictOrd) {
      return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 128, column 7 - line 130, column 40): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var extendList = new Control_Extend.Extend(function () {
      return functorList;
  }, function (f) {
      return function (l) {
          var go = function (a) {
              return function (v) {
                  var acc$prime = cons(a)(v.acc);
                  return {
                      val: cons(f(acc$prime))(v.val),
                      acc: acc$prime
                  };
              };
          };
          var v = step(l);
          if (v instanceof Nil) {
              return nil;
          };
          if (v instanceof Cons) {
              return cons(f(l))((Data_Foldable.foldr(foldableList)(go)({
                  val: nil,
                  acc: nil
              })(v.value1)).val);
          };
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 200, column 5 - line 203, column 55): " + [ v.constructor.name ]);
      };
  });
  var extendNonEmptyList = new Control_Extend.Extend(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          var go = function (a) {
              return function (v1) {
                  return {
                      val: cons(f(Data_Lazy.defer(function (v2) {
                          return new Data_NonEmpty.NonEmpty(a, v1.acc);
                      })))(v1.val),
                      acc: cons(a)(v1.acc)
                  };
              };
          };
          var v1 = Data_Lazy.force(v);
          return NonEmptyList(Data_Lazy.defer(function (v2) {
              return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
                  val: nil,
                  acc: nil
              })(v1.value1)).val);
          }));
      };
  });
  var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (xs) {
          return "(fromFoldable [" + ((function () {
              var v = step(xs);
              if (v instanceof Nil) {
                  return "";
              };
              if (v instanceof Cons) {
                  return Data_Show.show(dictShow)(v.value0) + Data_Foldable.foldl(foldableList)(function (shown) {
                      return function (x$prime) {
                          return shown + ("," + Data_Show.show(dictShow)(x$prime));
                      };
                  })("")(v.value1);
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 67, column 13 - line 70, column 78): " + [ v.constructor.name ]);
          })() + "])");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
      });
  };
  var showStep = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          if (v instanceof Cons) {
              return "(" + (Data_Show.show(dictShow)(v.value0) + (" : " + (Data_Show.show(showList(dictShow))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 37, column 1 - line 39, column 62): " + [ v.constructor.name ]);
      });
  };
  var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableList;
  }, function (dictMonoid) {
      return function (f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
              return function (acc) {
                  var $228 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  var $229 = f(i);
                  return function ($230) {
                      return $228($229($230));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      return function (acc) {
          var $231 = Data_Foldable.foldl(foldableList)(function (v) {
              return function (a) {
                  return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
              };
          })(new Data_Tuple.Tuple(0, acc));
          return function ($232) {
              return Data_Tuple.snd($231($232));
          };
      };
  }, function (f) {
      return function (b) {
          return function (xs) {
              var v = (function () {
                  var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                      return function (a) {
                          return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                      };
                  });
                  return rev(new Data_Tuple.Tuple(0, nil))(xs);
              })();
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                  };
              })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
      };
  });
  var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableNonEmptyList;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)((function () {
                  var $233 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($234) {
                      return f($233($234));
                  };
              })())(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                  var $235 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($236) {
                      return f($235($236));
                  };
              })())(b)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                  var $237 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($238) {
                      return f($237($238));
                  };
              })())(b)(Data_Lazy.force(v));
          };
      };
  });
  var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorList;
  }, function (f) {
      return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
          return function (x) {
              return function (acc) {
                  return cons(f(i)(x))(acc);
              };
          };
      })(nil);
  });
  var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          return NonEmptyList(Data_Lazy.defer(function (v1) {
              return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))((function () {
                  var $239 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($240) {
                      return f($239($240));
                  };
              })())(Data_Lazy.force(v));
          }));
      };
  });
  var toList = function (v) {
      return Control_Lazy.defer(lazyList)(function (v1) {
          var v2 = Data_Lazy.force(v);
          return cons(v2.value0)(v2.value1);
      });
  };
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          var v1 = Data_Lazy.force(v);
          return Data_Lazy.defer(function (v2) {
              return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
          });
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return Data_Foldable.foldr(foldableList)(function (a) {
              return function (b) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
              };
          })(Control_Applicative.pure(dictApplicative)(nil));
      };
  });
  var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
      return foldableNonEmptyList;
  }, function () {
      return functorNonEmptyList;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
              return NonEmptyList(Data_Lazy.defer(function (v1) {
                  return xxs;
              }));
          })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                  return NonEmptyList(Data_Lazy.defer(function (v1) {
                      return xxs;
                  }));
              })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
          };
      };
  });
  var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexList;
  }, function () {
      return functorWithIndexList;
  }, function () {
      return traversableList;
  }, function (dictApplicative) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
              return function (a) {
                  return function (b) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(i)(a)))(b);
                  };
              };
          })(Control_Applicative.pure(dictApplicative)(nil));
      };
  });
  var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexNonEmptyList;
  }, function () {
      return functorWithIndexNonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                  return NonEmptyList(Data_Lazy.defer(function (v1) {
                      return xxs;
                  }));
              })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)((function () {
                  var $241 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                  return function ($242) {
                      return f($241($242));
                  };
              })())(Data_Lazy.force(v)));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1.value1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0)(go(f)(v1.value1.value0));
                  };
                  if (v1.value1 instanceof Data_Maybe.Nothing) {
                      return cons(v1.value0)(nil);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 33): " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, (function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return nil;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 158, column 28 - line 160, column 39): " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          return NonEmptyList(Data_Lazy.defer(function (v) {
              return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
          }));
      };
  });
  var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
      return extendNonEmptyList;
  }, function (v) {
      return Data_NonEmpty.head(Data_Lazy.force(v));
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (xs) {
      return function (f) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 181, column 5 - line 181, column 17): " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, Control_Monad.ap(monadList));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return cons(a)(nil);
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          var v2 = Data_Lazy.force(v1);
          var v3 = Data_Lazy.force(v);
          return Data_Lazy.defer(function (v4) {
              return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
          });
      };
  });
  var bindNonEmptyList = new Control_Bind.Bind(function () {
      return applyNonEmptyList;
  }, function (v) {
      return function (f) {
          var v1 = Data_Lazy.force(v);
          var v2 = Data_Lazy.force(Data_Newtype.unwrap()(f(v1.value0)));
          return Data_Lazy.defer(function (v3) {
              return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($243) {
                  return toList(f($243));
              })));
          });
      };
  });
  var altNonEmptyList = new Control_Alt.Alt(function () {
      return functorNonEmptyList;
  }, Data_Semigroup.append(semigroupNonEmptyList));
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  }, function () {
      return undefined;
  });
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function (a) {
      return Data_Lazy.defer(function (v) {
          return Data_NonEmpty.singleton(plusList)(a);
      });
  });
  var monadNonEmptyList = new Control_Monad.Monad(function () {
      return applicativeNonEmptyList;
  }, function () {
      return bindNonEmptyList;
  });
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["nil"] = nil;
  exports["cons"] = cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["showStep"] = showStep;
  exports["newtypeList"] = newtypeList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["functorWithIndexList"] = functorWithIndexList;
  exports["foldableList"] = foldableList;
  exports["foldableWithIndexList"] = foldableWithIndexList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["traversableWithIndexList"] = traversableWithIndexList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
  exports["extendList"] = extendList;
  exports["newtypeNonEmptyList"] = newtypeNonEmptyList;
  exports["eqNonEmptyList"] = eqNonEmptyList;
  exports["ordNonEmptyList"] = ordNonEmptyList;
  exports["eq1NonEmptyList"] = eq1NonEmptyList;
  exports["ord1NonEmptyList"] = ord1NonEmptyList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["bindNonEmptyList"] = bindNonEmptyList;
  exports["monadNonEmptyList"] = monadNonEmptyList;
  exports["altNonEmptyList"] = altNonEmptyList;
  exports["extendNonEmptyList"] = extendNonEmptyList;
  exports["comonadNonEmptyList"] = comonadNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
  exports["unfoldable1NonEmptyList"] = unfoldable1NonEmptyList;
  exports["functorWithIndexNonEmptyList"] = functorWithIndexNonEmptyList;
  exports["foldableWithIndexNonEmptyList"] = foldableWithIndexNonEmptyList;
  exports["traversableWithIndexNonEmptyList"] = traversableWithIndexNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Lazy"] = $PS["Data.List.Lazy"] || {};
  var exports = $PS["Data.List.Lazy"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Internal = $PS["Data.List.Internal"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Pattern = function (x) {
      return x;
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy (line 705, column 3 - line 705, column 35): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs)))(Data_Newtype.unwrap()(ys));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(x, v1.value1);
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy (line 361, column 3 - line 361, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap()(xs));
          };
      };
  };
  var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy (line 288, column 13 - line 290, column 44): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var takeWhile = function (p) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
              return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
          };
          return Data_List_Lazy_Types.Nil.value;
      };
      var $251 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $252 = Data_Newtype.unwrap();
      return function ($253) {
          return Data_List_Lazy_Types.List($251($252($253)));
      };
  };
  var take = function (n) {
      var go = function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                  return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 505, column 3 - line 505, column 32): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var $122 = n <= 0;
      if ($122) {
          return Data_Function["const"](Data_List_Lazy_Types.nil);
      };
      var $254 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
      var $255 = Data_Newtype.unwrap();
      return function ($256) {
          return Data_List_Lazy_Types.List($254($255($256)));
      };
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var stripPrefix = function (dictEq) {
      return function (v) {
          return function (s) {
              var go = function (prefix) {
                  return function (input) {
                      var v1 = Data_List_Lazy_Types.step(prefix);
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          var v2 = Data_List_Lazy_Types.step(input);
                          if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
                              return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                                  a: v1.value1,
                                  b: v2.value1
                              }));
                          };
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy (line 487, column 21 - line 491, column 19): " + [ v1.constructor.name ]);
                  };
              };
              return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
          };
      };
  };
  var span = function (p) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
              var v1 = span(p)(v.value0.tail);
              return {
                  init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
                  rest: v1.rest
              };
          };
          return {
              init: Data_List_Lazy_Types.nil,
              rest: xs
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
      };
  };
  var singleton = function (a) {
      return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
  };
  var showPattern = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
      });
  };
  var scanlLazy = function (f) {
      return function (acc) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      var acc$prime = f(acc)(v.value0);
                      return Data_List_Lazy_Types.Cons.create(acc$prime)(scanlLazy(f)(acc$prime)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 776, column 5 - line 776, column 27): " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
          };
      };
  };
  var reverse = function (xs) {
      return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
          return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
      });
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                      return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (as) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 164, column 1 - line 164, column 62): " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
          return Data_List_Lazy_Types.cons(x)(xs);
      });
  };
  var replicate = function (i) {
      return function (xs) {
          return take(i)(repeat(xs));
      };
  };
  var range = function (start) {
      return function (end) {
          if (start > end) {
              var g = function (x) {
                  if (x >= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 151, column 13 - line 152, column 38): " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
          };
          if (Data_Boolean.otherwise) {
              var f = function (x) {
                  if (x <= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 156, column 5 - line 157, column 30): " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
          };
          throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 1 - line 148, column 32): " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var partition = function (f) {
      var go = function (x) {
          return function (v) {
              var $150 = f(x);
              if ($150) {
                  return {
                      yes: Data_List_Lazy_Types.cons(x)(v.yes),
                      no: v.no
                  };
              };
              return {
                  yes: v.yes,
                  no: Data_List_Lazy_Types.cons(x)(v.no)
              };
          };
      };
      return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
          yes: Data_List_Lazy_Types.nil,
          no: Data_List_Lazy_Types.nil
      });
  };
  var $$null = function ($257) {
      return Data_Maybe.isNothing(uncons($257));
  };
  var nubBy = function (p) {
      var goStep = function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                  var v2 = Data_List_Internal.insertAndLookupBy(p)(v1.value0)(v);
                  if (v2.found) {
                      return Data_List_Lazy_Types.step(go(v2.result)(v1.value1));
                  };
                  return new Data_List_Lazy_Types.Cons(v1.value0, go(v2.result)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 613, column 5 - line 613, column 23): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var go = function (s) {
          return function (v) {
              return Data_Functor.map(Data_Lazy.functorLazy)(goStep(s))(v);
          };
      };
      return go(Data_List_Internal.emptySet);
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var newtypePattern = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var mapMaybe = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  var v1 = f(v.value0);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 448, column 5 - line 450, column 39): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 446, column 3 - line 446, column 15): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var $258 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $259 = Data_Newtype.unwrap();
      return function ($260) {
          return Data_List_Lazy_Types.List($258($259($260)));
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
      return function (v) {
          return l + 1 | 0;
      };
  })(0);
  var last = (function () {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if ($$null(v.value1)) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($261) {
          return go(Data_List_Lazy_Types.step($261));
      };
  })();
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
              return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
          });
      };
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return Data_List_Lazy_Types.cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [ v1.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
          };
      };
  };
  var init = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return function ($262) {
          return go(Data_List_Lazy_Types.step($262));
      };
  })();
  var index = function (xs) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                      $copy_v1 = v1 - 1 | 0;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 302, column 3 - line 302, column 21): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Lazy_Types.step(xs));
  };
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var transpose = function (xs) {
      var v = uncons(xs);
      if (v instanceof Data_Maybe.Nothing) {
          return xs;
      };
      if (v instanceof Data_Maybe.Just) {
          var v1 = uncons(v.value0.head);
          if (v1 instanceof Data_Maybe.Nothing) {
              return transpose(v.value0.tail);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
          };
          throw new Error("Failed pattern match at Data.List.Lazy (line 746, column 7 - line 750, column 72): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Data.List.Lazy (line 742, column 3 - line 750, column 72): " + [ v.constructor.name ]);
  };
  var groupBy = function (eq) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
          };
          if (v instanceof Data_List_Lazy_Types.Cons) {
              var v1 = span(eq(v.value0))(v.value1);
              return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
                  return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
              }), groupBy(eq)(v1.rest));
          };
          throw new Error("Failed pattern match at Data.List.Lazy (line 576, column 3 - line 576, column 15): " + [ v.constructor.name ]);
      };
      var $263 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $264 = Data_Newtype.unwrap();
      return function ($265) {
          return Data_List_Lazy_Types.List($263($264($265)));
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var fromStep = (function () {
      var $266 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
      return function ($267) {
          return Data_List_Lazy_Types.List($266($267));
      };
  })();
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      var v1 = cmp(x)(v.value0);
                      if (v1 instanceof Data_Ordering.GT) {
                          return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 238, column 3 - line 238, column 22): " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
  };
  var foldrLazy = function (dictLazy) {
      return function (op) {
          return function (z) {
              var go = function (xs) {
                  var v = Data_List_Lazy_Types.step(xs);
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      return Control_Lazy.defer(dictLazy)(function (v1) {
                          return op(v.value0)(go(v.value1));
                      });
                  };
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return z;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 768, column 13 - line 770, column 15): " + [ v.constructor.name ]);
              };
              return go;
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (xs) {
                  var v = uncons(xs);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(b);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.head))(function (b$prime) {
                          return foldM(dictMonad)(f)(b$prime)(v.value0.tail);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 759, column 5 - line 762, column 54): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (n) {
          return function (list) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (o) {
                  var $211 = fn(o.head);
                  if ($211) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                  };
                  return go(n + 1 | 0)(o.tail);
              });
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (list) {
              var v = uncons(list);
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (b) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (xs$prime) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (b) {
                                  return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
                              };
                              return xs$prime;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 431, column 5 - line 436, column 48): " + [ v.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 416, column 3 - line 416, column 15): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var $268 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $269 = Data_Newtype.unwrap();
      return function ($270) {
          return Data_List_Lazy_Types.List($268($269($270)));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubByEq = function (eq) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
          };
          if (v instanceof Data_List_Lazy_Types.Cons) {
              return new Data_List_Lazy_Types.Cons(v.value0, nubByEq(eq)(filter(function (y) {
                  return !eq(v.value0)(y);
              })(v.value1)));
          };
          throw new Error("Failed pattern match at Data.List.Lazy (line 633, column 3 - line 633, column 15): " + [ v.constructor.name ]);
      };
      var $271 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $272 = Data_Newtype.unwrap();
      return function ($273) {
          return Data_List_Lazy_Types.List($271($272($273)));
      };
  };
  var nubEq = function (dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
  };
  var eqPattern = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
          };
      });
  };
  var ordPattern = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqPattern(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                  $copy_v = Data_List_Lazy_Types.step(v.value1);
                  return;
              };
              $tco_done = true;
              return fromStep(v);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($274) {
          return go(Data_List_Lazy_Types.step($274));
      };
  };
  var drop = function (n) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v === 0) {
                      $tco_done = true;
                      return v1;
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      $tco_done = true;
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      $tco_var_v = v - 1 | 0;
                      $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 524, column 3 - line 524, column 15): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      var $275 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
      var $276 = Data_Newtype.unwrap();
      return function ($277) {
          return Data_List_Lazy_Types.List($275($276($277)));
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start | 0)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      if (eq(x)(v.value0)) {
                          return Data_List_Lazy_Types.step(v.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 662, column 3 - line 662, column 15): " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                      return Data_List_Lazy_Types.step(v1.value1);
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy (line 350, column 3 - line 350, column 17): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap()(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
          return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
      });
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                          var v2 = f(v1.value0);
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Data_List_Lazy_Types.step(v1.value1);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy (line 382, column 22 - line 384, column 26): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy (line 381, column 3 - line 381, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap()(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($278) {
              return Data_Maybe.Just.create(f($278));
          });
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["replicate"] = replicate;
  exports["replicateM"] = replicateM;
  exports["some"] = some;
  exports["many"] = many;
  exports["repeat"] = repeat;
  exports["iterate"] = iterate;
  exports["cycle"] = cycle;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["alterAt"] = alterAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["Pattern"] = Pattern;
  exports["stripPrefix"] = stripPrefix;
  exports["slice"] = slice;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["groupBy"] = groupBy;
  exports["partition"] = partition;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["nubEq"] = nubEq;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["transpose"] = transpose;
  exports["foldM"] = foldM;
  exports["foldrLazy"] = foldrLazy;
  exports["scanlLazy"] = scanlLazy;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
  exports["all"] = Data_Foldable.all;
  exports["any"] = Data_Foldable.any;
  exports["elem"] = Data_Foldable.elem;
  exports["find"] = Data_Foldable.find;
  exports["findMap"] = Data_Foldable.findMap;
  exports["fold"] = Data_Foldable.fold;
  exports["foldMap"] = Data_Foldable.foldMap;
  exports["foldl"] = Data_Foldable.foldl;
  exports["foldr"] = Data_Foldable.foldr;
  exports["intercalate"] = Data_Foldable.intercalate;
  exports["notElem"] = Data_Foldable.notElem;
  exports["List"] = Data_List_Lazy_Types.List;
  exports["Cons"] = Data_List_Lazy_Types.Cons;
  exports["Nil"] = Data_List_Lazy_Types.Nil;
  exports["cons"] = Data_List_Lazy_Types.cons;
  exports["nil"] = Data_List_Lazy_Types.nil;
  exports["step"] = Data_List_Lazy_Types.step;
  exports["scanl"] = Data_Traversable.scanl;
  exports["scanr"] = Data_Traversable.scanr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 676, column 1 - line 676, column 35): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var toUnfoldableUnordered = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                      };
                      if (v.value0 instanceof Three) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 18 - line 617, column 77): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 611, column 3 - line 611, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var showTree = function (dictShow) {
      return function (dictShow1) {
          return function (v) {
              if (v instanceof Leaf) {
                  return "Leaf";
              };
              if (v instanceof Two) {
                  return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
              };
              if (v instanceof Three) {
                  return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 164, column 1 - line 164, column 62): " + [ v.constructor.name ]);
          };
      };
  };
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };
  var lookupLE = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value1,
                          value: v.value2
                      });
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value3)));
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return go(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 236, column 33 - line 239, column 20): " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value4);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value4,
                          value: v.value5
                      });
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value4,
                          value: v.value5
                      })(go(v.value6)));
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return go(new Two(v.value0, v.value1, v.value2, v.value3));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 240, column 45 - line 243, column 36): " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 235, column 5 - line 235, column 22): " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var lookupGE = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value1,
                          value: v.value2
                      });
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return go(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 270, column 33 - line 273, column 21): " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value1);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value1,
                          value: v.value2
                      });
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return go(new Two(v.value3, v.value4, v.value5, v.value6));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 274, column 45 - line 277, column 37): " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 269, column 5 - line 269, column 22): " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var isSubmap = function (dictOrd) {
      return function (dictEq) {
          return function (m1) {
              return function (m2) {
                  var f = function (v) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                  };
                  return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorMap;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 106, column 1 - line 109, column 152): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableMap = new Data_Traversable.Traversable(function () {
      return foldableMap;
  }, function () {
      return functorMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 127, column 1 - line 142, column 31): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var foldSubmapBy = function (dictOrd) {
      return function (appendFn) {
          return function (memptyValue) {
              return function (kmin) {
                  return function (kmax) {
                      return function (f) {
                          var tooSmall = (function () {
                              if (kmin instanceof Data_Maybe.Just) {
                                  return function (k) {
                                      return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                                  };
                              };
                              if (kmin instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](false);
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 337, column 22): " + [ kmin.constructor.name ]);
                          })();
                          var tooLarge = (function () {
                              if (kmax instanceof Data_Maybe.Just) {
                                  return function (k) {
                                      return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                                  };
                              };
                              if (kmax instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](false);
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 340, column 7 - line 344, column 22): " + [ kmax.constructor.name ]);
                          })();
                          var inBounds = (function () {
                              if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
                                  return function (k) {
                                      return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                                  };
                              };
                              if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
                                  return function (k) {
                                      return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                                  };
                              };
                              if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
                                  return function (k) {
                                      return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                                  };
                              };
                              if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](true);
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 347, column 7 - line 355, column 21): " + [ kmin.constructor.name, kmax.constructor.name ]);
                          })();
                          var go = function (v) {
                              if (v instanceof Leaf) {
                                  return memptyValue;
                              };
                              if (v instanceof Two) {
                                  return appendFn(appendFn((function () {
                                      var $637 = tooSmall(v.value1);
                                      if ($637) {
                                          return memptyValue;
                                      };
                                      return go(v.value0);
                                  })())((function () {
                                      var $638 = inBounds(v.value1);
                                      if ($638) {
                                          return f(v.value1)(v.value2);
                                      };
                                      return memptyValue;
                                  })()))((function () {
                                      var $639 = tooLarge(v.value1);
                                      if ($639) {
                                          return memptyValue;
                                      };
                                      return go(v.value3);
                                  })());
                              };
                              if (v instanceof Three) {
                                  return appendFn(appendFn(appendFn(appendFn((function () {
                                      var $644 = tooSmall(v.value1);
                                      if ($644) {
                                          return memptyValue;
                                      };
                                      return go(v.value0);
                                  })())((function () {
                                      var $645 = inBounds(v.value1);
                                      if ($645) {
                                          return f(v.value1)(v.value2);
                                      };
                                      return memptyValue;
                                  })()))((function () {
                                      var $646 = tooSmall(v.value4) || tooLarge(v.value1);
                                      if ($646) {
                                          return memptyValue;
                                      };
                                      return go(v.value3);
                                  })()))((function () {
                                      var $647 = inBounds(v.value4);
                                      if ($647) {
                                          return f(v.value4)(v.value5);
                                      };
                                      return memptyValue;
                                  })()))((function () {
                                      var $648 = tooLarge(v.value4);
                                      if ($648) {
                                          return memptyValue;
                                      };
                                      return go(v.value6);
                                  })());
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 373, column 10 - line 385, column 67): " + [ v.constructor.name ]);
                          };
                          return go;
                      };
                  };
              };
          };
      };
  };
  var foldSubmap = function (dictOrd) {
      return function (dictMonoid) {
          return foldSubmapBy(dictOrd)(Data_Semigroup.append(dictMonoid.Semigroup0()))(Data_Monoid.mempty(dictMonoid));
      };
  };
  var findMin = (function () {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Leaf) {
                      $tco_done = true;
                      return v;
                  };
                  if (v1 instanceof Two) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value0;
                      return;
                  };
                  if (v1 instanceof Three) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value0;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 308, column 5 - line 308, column 22): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_Maybe.Nothing.value);
  })();
  var lookupGT = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return findMin(v.value3);
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return go(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 287, column 33 - line 290, column 21): " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value1);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return go(new Two(v.value3, v.value4, v.value5, v.value6));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 291, column 45 - line 294, column 37): " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 286, column 5 - line 286, column 22): " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var findMax = (function () {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Leaf) {
                      $tco_done = true;
                      return v;
                  };
                  if (v1 instanceof Two) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value3;
                      return;
                  };
                  if (v1 instanceof Three) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value4,
                          value: v1.value5
                      });
                      $copy_v1 = v1.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 300, column 5 - line 300, column 22): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_Maybe.Nothing.value);
  })();
  var lookupLT = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return findMax(v.value0);
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value3)));
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return go(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 253, column 33 - line 256, column 20): " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value4);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value4,
                          value: v.value5
                      })(go(v.value6)));
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return go(new Two(v.value0, v.value1, v.value2, v.value3));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 257, column 45 - line 260, column 36): " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 252, column 5 - line 252, column 22): " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (m1) {
              return function (m2) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
              };
          });
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (m1) {
              return function (m2) {
                  return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
              };
          });
      };
  };
  var eq1Map = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqMap(dictEq)(dictEq1));
      });
  };
  var ord1Map = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Map(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
      });
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          var $762 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
          var $763 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
          var $764 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
          return function ($765) {
              return $762($763($764($765)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var filterKeys = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(function ($766) {
              return Data_Function["const"](predicate($766));
          });
      };
  };
  var fromFoldableWithIndex = function (dictOrd) {
      return function (dictFoldableWithIndex) {
          return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
              return function (m) {
                  return function (v) {
                      return insert(dictOrd)(k)(v)(m);
                  };
              };
          })(empty);
      };
  };
  var intersectionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function ($copy_v) {
                      return function ($copy_v1) {
                          return function ($copy_m) {
                              var $tco_var_v = $copy_v;
                              var $tco_var_v1 = $copy_v1;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(v, v1, m) {
                                  if (v instanceof Data_List_Types.Nil) {
                                      $tco_done = true;
                                      return m;
                                  };
                                  if (v1 instanceof Data_List_Types.Nil) {
                                      $tco_done = true;
                                      return m;
                                  };
                                  if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                      var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);
                                      if (v2 instanceof Data_Ordering.LT) {
                                          $tco_var_v = v.value1;
                                          $tco_var_v1 = v1;
                                          $copy_m = m;
                                          return;
                                      };
                                      if (v2 instanceof Data_Ordering.EQ) {
                                          $tco_var_v = v.value1;
                                          $tco_var_v1 = v1.value1;
                                          $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                                          return;
                                      };
                                      if (v2 instanceof Data_Ordering.GT) {
                                          $tco_var_v = v;
                                          $tco_var_v1 = v1.value1;
                                          $copy_m = m;
                                          return;
                                      };
                                      throw new Error("Failed pattern match at Data.Map.Internal (line 655, column 5 - line 658, column 27): " + [ v2.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Map.Internal (line 652, column 3 - line 652, column 17): " + [ v.constructor.name, v1.constructor.name, m.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
                              };
                              return $tco_result;
                          };
                      };
                  };
                  return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
              };
          };
      };
  };
  var intersection = function (dictOrd) {
      return intersectionWith(dictOrd)(Data_Function["const"]);
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var difference = function (dictOrd) {
      return function (m1) {
          return function (m2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
          };
      };
  };
  var checkValid = function (tree) {
      var allHeights = function (v) {
          if (v instanceof Leaf) {
              return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
          };
          if (v instanceof Two) {
              return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                  return n + 1 | 0;
              })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
          };
          if (v instanceof Three) {
              return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                  return n + 1 | 0;
              })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 199, column 3 - line 199, column 36): " + [ v.constructor.name ]);
      };
      return Data_List.length(Data_List.nub(Data_Ord.ordInt)(allHeights(tree))) === 1;
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                  var $767 = Data_Function.flip(f);
                  return function ($768) {
                      return Data_Tuple.uncurry($767($768));
                  };
              })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  var mapMaybeWithKey = function (dictOrd) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
              return function (a) {
                  return function (acc) {
                      return Data_Maybe.maybe(acc)(function (b) {
                          return insert(dictOrd)(k)(b)(acc);
                      })(f(k)(a));
                  };
              };
          })(empty);
      };
  };
  var mapMaybe = function (dictOrd) {
      var $769 = mapMaybeWithKey(dictOrd);
      return function ($770) {
          return $769(Data_Function["const"]($770));
      };
  };
  var catMaybes = function (dictOrd) {
      return mapMaybe(dictOrd)(Control_Category.identity(Control_Category.categoryFn));
  };
  var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexMap;
  }, function () {
      return functorWithIndexMap;
  }, function () {
      return traversableMap;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 144, column 1 - line 158, column 40): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var applyMap = function (dictOrd) {
      return new Control_Apply.Apply(function () {
          return functorMap;
      }, intersectionWith(dictOrd)(Control_Category.identity(Control_Category.categoryFn)));
  };
  var bindMap = function (dictOrd) {
      return new Control_Bind.Bind(function () {
          return applyMap(dictOrd);
      }, function (m) {
          return function (f) {
              return mapMaybeWithKey(dictOrd)(function (k) {
                  var $771 = lookup(dictOrd)(k);
                  return function ($772) {
                      return $771(f($772));
                  };
              })(m);
          };
      });
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 580, column 3 - line 580, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var insertWith = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (v) {
                  return alter(dictOrd)((function () {
                      var $773 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                      return function ($774) {
                          return Data_Maybe.Just.create($773($774));
                      };
                  })())(k);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $775 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($776) {
                                  return Data_Maybe.Just.create($775($776));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var submap = function (dictOrd) {
      return function (kmin) {
          return function (kmax) {
              return foldSubmapBy(dictOrd)(union(dictOrd))(empty)(kmin)(kmax)(singleton);
          };
      };
  };
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  var altMap = function (dictOrd) {
      return new Control_Alt.Alt(function () {
          return functorMap;
      }, union(dictOrd));
  };
  var plusMap = function (dictOrd) {
      return new Control_Plus.Plus(function () {
          return altMap(dictOrd);
      }, empty);
  };
  exports["showTree"] = showTree;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["checkValid"] = checkValid;
  exports["insert"] = insert;
  exports["insertWith"] = insertWith;
  exports["lookup"] = lookup;
  exports["lookupLE"] = lookupLE;
  exports["lookupLT"] = lookupLT;
  exports["lookupGE"] = lookupGE;
  exports["lookupGT"] = lookupGT;
  exports["findMin"] = findMin;
  exports["findMax"] = findMax;
  exports["foldSubmap"] = foldSubmap;
  exports["submap"] = submap;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromFoldableWithIndex"] = fromFoldableWithIndex;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldableUnordered"] = toUnfoldableUnordered;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["unions"] = unions;
  exports["intersection"] = intersection;
  exports["intersectionWith"] = intersectionWith;
  exports["difference"] = difference;
  exports["isSubmap"] = isSubmap;
  exports["size"] = size;
  exports["filterWithKey"] = filterWithKey;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["mapMaybeWithKey"] = mapMaybeWithKey;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["eq1Map"] = eq1Map;
  exports["eqMap"] = eqMap;
  exports["ord1Map"] = ord1Map;
  exports["ordMap"] = ordMap;
  exports["showMap"] = showMap;
  exports["altMap"] = altMap;
  exports["plusMap"] = plusMap;
  exports["functorMap"] = functorMap;
  exports["functorWithIndexMap"] = functorWithIndexMap;
  exports["applyMap"] = applyMap;
  exports["bindMap"] = bindMap;
  exports["foldableMap"] = foldableMap;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
  exports["traversableMap"] = traversableMap;
  exports["traversableWithIndexMap"] = traversableWithIndexMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];                
  var $$Set = function (x) {
      return x;
  };
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toMap = function (v) {
      return v;
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $66 = Data_List.toUnfoldable(dictUnfoldable);
      return function ($67) {
          return $66(toList($67));
      };
  };
  var size = function (v) {
      return Data_Map_Internal.size(v);
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var showSet = function (dictShow) {
      return new Data_Show.Show(function (s) {
          return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(dictShow))(toUnfoldable(Data_Unfoldable.unfoldableArray)(s)) + ")");
      });
  };
  var semigroupSet = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var fromMap = $$Set;
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          var $68 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
          return function ($69) {
              return $68(toList($69));
          };
      };
  }, function (f) {
      return function (x) {
          var $70 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
          return function ($71) {
              return $70(toList($71));
          };
      };
  }, function (f) {
      return function (x) {
          var $72 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
          return function ($73) {
              return $72(toList($73));
          };
      };
  });
  var findMin = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return v1.key;
      })(Data_Map_Internal.findMin(v));
  };
  var findMax = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return v1.key;
      })(Data_Map_Internal.findMax(v));
  };
  var filter = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
                  return function (v1) {
                      return f(k);
                  };
              })(v);
          };
      };
  };
  var eqSet = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
          };
      });
  };
  var ordSet = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqSet(dictOrd.Eq0());
      }, function (s1) {
          return function (s2) {
              return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
          };
      });
  };
  var eq1Set = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqSet(dictEq));
  });
  var ord1Set = new Data_Ord.Ord1(function () {
      return eq1Set;
  }, function (dictOrd) {
      return Data_Ord.compare(ordSet(dictOrd));
  });
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var intersection = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              var toArray = (function () {
                  var $74 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                  return function ($75) {
                      return $74(toList($75));
                  };
              })();
              var rs = toArray(s2);
              var rl = Data_Array.length(rs);
              var ls = toArray(s1);
              var ll = Data_Array.length(ls);
              var intersect = function (acc) {
                  var go = function (l) {
                      return function (r) {
                          var $61 = l < ll && r < rl;
                          if ($61) {
                              var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);
                              if (v instanceof Data_Ordering.EQ) {
                                  return function __do() {
                                      Data_Array_ST.push(ls[l])(acc)();
                                      return new Control_Monad_Rec_Class.Loop({
                                          a: l + 1 | 0,
                                          b: r + 1 | 0
                                      });
                                  };
                              };
                              if (v instanceof Data_Ordering.LT) {
                                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                      a: l + 1 | 0,
                                      b: r
                                  }));
                              };
                              if (v instanceof Data_Ordering.GT) {
                                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                      a: l,
                                      b: r + 1 | 0
                                  }));
                              };
                              throw new Error("Failed pattern match at Data.Set (line 179, column 12 - line 184, column 43): " + [ v.constructor.name ]);
                          };
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
              };
              return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST["new"])(intersect))(Data_Array_ST.unsafeFreeze)());
          };
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldl(foldableSet)(function (m) {
              return function (a) {
                  return insert(dictOrd)(f(a))(m);
              };
          })(empty);
      };
  };
  var mapMaybe = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldr(foldableSet)(function (a) {
              return function (acc) {
                  return Data_Maybe.maybe(acc)(function (b) {
                      return insert(dictOrd)(b)(acc);
                  })(f(a));
              };
          })(empty);
      };
  };
  var monoidSet = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupSet(dictOrd);
      }, empty);
  };
  var unions = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  var difference = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
          };
      };
  };
  var subset = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return isEmpty(difference(dictOrd)(s1)(s2));
          };
      };
  };
  var properSubset = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd.Eq0()))(s1)(s2);
          };
      };
  };
  var checkValid = function (v) {
      return Data_Map_Internal.checkValid(v);
  };
  var catMaybes = function (dictOrd) {
      return mapMaybe(dictOrd)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["map"] = map;
  exports["checkValid"] = checkValid;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["findMin"] = findMin;
  exports["findMax"] = findMax;
  exports["union"] = union;
  exports["unions"] = unions;
  exports["difference"] = difference;
  exports["subset"] = subset;
  exports["properSubset"] = properSubset;
  exports["intersection"] = intersection;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["toMap"] = toMap;
  exports["fromMap"] = fromMap;
  exports["eqSet"] = eqSet;
  exports["eq1Set"] = eq1Set;
  exports["showSet"] = showSet;
  exports["ordSet"] = ordSet;
  exports["ord1Set"] = ord1Set;
  exports["monoidSet"] = monoidSet;
  exports["semigroupSet"] = semigroupSet;
  exports["foldableSet"] = foldableSet;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._codePointAt = function (fallback) {
    return function (Just) {
      return function (Nothing) {
        return function (unsafeCodePointAt0) {
          return function (index) {
            return function (str) {
              var length = str.length;
              if (index < 0 || index >= length) return Nothing;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index;; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing;
                  if (i === 0) return Just(unsafeCodePointAt0(o.value));
                }
              }
              return fallback(index)(str);
            };
          };
        };
      };
    };
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._fromCodePointArray = function (singleton) {
    return hasFromCodePoint
      ? function (cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10e3) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      }
      : function (cps) {
        return cps.map(singleton).join("");
      };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];
  var Data_Unit = $PS["Data.Unit"];                
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var Cardinality = function (x) {
      return x;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var upFromIncluding = function (dictEnum) {
      return function (dictUnfoldable1) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
      };
  };
  var showCardinality = new Data_Show.Show(function (v) {
      return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var pred = function (dict) {
      return dict.pred;
  };
  var ordCardinality = Data_Ord.ordInt;
  var newtypeCardinality = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var eqCardinality = Data_Eq.eqInt;
  var enumUnit = new Enum(function () {
      return Data_Ord.ordUnit;
  }, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
  var enumTuple = function (dictEnum) {
      return function (dictBoundedEnum) {
          return new Enum(function () {
              return Data_Tuple.ordTuple(dictEnum.Ord0())((dictBoundedEnum.Enum1()).Ord0());
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))((function () {
                  var $93 = Data_Tuple.Tuple.create(v.value0);
                  return function ($94) {
                      return Data_Maybe.Just.create($93($94));
                  };
              })())(pred(dictBoundedEnum.Enum1())(v.value1));
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))((function () {
                  var $95 = Data_Tuple.Tuple.create(v.value0);
                  return function ($96) {
                      return Data_Maybe.Just.create($95($96));
                  };
              })())(succ(dictBoundedEnum.Enum1())(v.value1));
          });
      };
  };
  var enumOrdering = new Enum(function () {
      return Data_Ord.ordOrdering;
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [ v.constructor.name ]);
  });
  var enumMaybe = function (dictBoundedEnum) {
      return new Enum(function () {
          return Data_Maybe.ordMaybe((dictBoundedEnum.Enum1()).Ord0());
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [ v.constructor.name ]);
      });
  };
  var enumInt = new Enum(function () {
      return Data_Ord.ordInt;
  }, function (n) {
      var $64 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
      if ($64) {
          return new Data_Maybe.Just(n - 1 | 0);
      };
      return Data_Maybe.Nothing.value;
  }, function (n) {
      var $65 = n < Data_Bounded.top(Data_Bounded.boundedInt);
      if ($65) {
          return new Data_Maybe.Just(n + 1 | 0);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumFromTo = function (dictEnum) {
      return function (dictUnfoldable1) {
          var go = function (step) {
              return function (op) {
                  return function (to) {
                      return function (a) {
                          return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
                              return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(op(a$prime)(to)))(a$prime);
                          }));
                      };
                  };
              };
          };
          return function (v) {
              return function (v1) {
                  if (Data_Eq.eq((dictEnum.Ord0()).Eq0())(v)(v1)) {
                      return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
                  };
                  if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
                      return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 186, column 14 - line 190, column 51): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var enumFromThenTo = function (dictUnfoldable) {
      return function (dictFunctor) {
          return function (dictBoundedEnum) {
              var go = function (step) {
                  return function (to) {
                      return function (e) {
                          if (e <= to) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                          };
                          if (Data_Boolean.otherwise) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Data.Enum (line 217, column 5 - line 219, column 28): " + [ step.constructor.name, to.constructor.name, e.constructor.name ]);
                      };
                  };
              };
              return function (a) {
                  return function (b) {
                      return function (c) {
                          var c$prime = fromEnum(dictBoundedEnum)(c);
                          var b$prime = fromEnum(dictBoundedEnum)(b);
                          var a$prime = fromEnum(dictBoundedEnum)(a);
                          return Data_Functor.map(dictFunctor)((function () {
                              var $97 = Data_Maybe.fromJust();
                              var $98 = toEnum(dictBoundedEnum);
                              return function ($99) {
                                  return $97($98($99));
                              };
                          })())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                      };
                  };
              };
          };
      };
  };
  var enumEither = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new Enum(function () {
              return Data_Either.ordEither((dictBoundedEnum.Enum1()).Ord0())((dictBoundedEnum1.Enum1()).Ord0());
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($100) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($100));
                  })(pred(dictBoundedEnum.Enum1())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($101) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($101));
                  })(pred(dictBoundedEnum1.Enum1())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [ v.constructor.name ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($102) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($102));
                  })(succ(dictBoundedEnum.Enum1())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($103) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($103));
                  })(succ(dictBoundedEnum1.Enum1())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [ v.constructor.name ]);
          });
      };
  };
  var enumBoolean = new Enum(function () {
      return Data_Ord.ordBoolean;
  }, function (v) {
      if (v) {
          return new Data_Maybe.Just(false);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      if (!v) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  var downFromIncluding = function (dictEnum) {
      return function (dictUnfoldable1) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
      };
  };
  var diag = function (a) {
      return new Data_Tuple.Tuple(a, a);
  };
  var downFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {
              var $104 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
              var $105 = pred(dictEnum);
              return function ($106) {
                  return $104($105($106));
              };
          })());
      };
  };
  var upFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {
              var $107 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
              var $108 = succ(dictEnum);
              return function ($109) {
                  return $107($108($109));
              };
          })());
      };
  };
  var defaultToEnum = function (dictBounded) {
      return function (dictEnum) {
          return function (i$prime) {
              var go = function ($copy_i) {
                  return function ($copy_x) {
                      var $tco_var_i = $copy_i;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(i, x) {
                          var $79 = i === 0;
                          if ($79) {
                              $tco_done = true;
                              return new Data_Maybe.Just(x);
                          };
                          var v = succ(dictEnum)(x);
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_i = i - 1 | 0;
                              $copy_x = v.value0;
                              return;
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Data.Enum (line 296, column 12 - line 298, column 33): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_i, $copy_x);
                      };
                      return $tco_result;
                  };
              };
              var $82 = i$prime < 0;
              if ($82) {
                  return Data_Maybe.Nothing.value;
              };
              return go(i$prime)(Data_Bounded.bottom(dictBounded));
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var defaultFromEnum = function (dictEnum) {
      var go = function ($copy_i) {
          return function ($copy_x) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i, x) {
                  var v = pred(dictEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      $tco_var_i = i + 1 | 0;
                      $copy_x = v.value0;
                      return;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return i;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 309, column 5 - line 311, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_i, $copy_x);
              };
              return $tco_result;
          };
      };
      return go(0);
  };
  var defaultCardinality = function (dictBounded) {
      return function (dictEnum) {
          var go = function ($copy_i) {
              return function ($copy_x) {
                  var $tco_var_i = $copy_i;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(i, x) {
                      var v = succ(dictEnum)(x);
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_i = i + 1 | 0;
                          $copy_x = v.value0;
                          return;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return i;
                      };
                      throw new Error("Failed pattern match at Data.Enum (line 276, column 5 - line 278, column 19): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_i, $copy_x);
                  };
                  return $tco_result;
              };
          };
          return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  var boundedEnumUnit = new BoundedEnum(function () {
      return Data_Bounded.boundedUnit;
  }, function () {
      return enumUnit;
  }, 1, Data_Function["const"](0), function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumOrdering = new BoundedEnum(function () {
      return Data_Bounded.boundedOrdering;
  }, function () {
      return enumOrdering;
  }, 3, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return 0;
      };
      if (v instanceof Data_Ordering.EQ) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return 2;
      };
      throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  var boundedEnumBoolean = new BoundedEnum(function () {
      return Data_Bounded.boundedBoolean;
  }, function () {
      return enumBoolean;
  }, 2, function (v) {
      if (!v) {
          return 0;
      };
      if (v) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(false);
      };
      if (v === 1) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["Cardinality"] = Cardinality;
  exports["enumFromTo"] = enumFromTo;
  exports["enumFromThenTo"] = enumFromThenTo;
  exports["upFrom"] = upFrom;
  exports["upFromIncluding"] = upFromIncluding;
  exports["downFrom"] = downFrom;
  exports["downFromIncluding"] = downFromIncluding;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["defaultCardinality"] = defaultCardinality;
  exports["defaultToEnum"] = defaultToEnum;
  exports["defaultFromEnum"] = defaultFromEnum;
  exports["enumBoolean"] = enumBoolean;
  exports["enumInt"] = enumInt;
  exports["enumChar"] = enumChar;
  exports["enumUnit"] = enumUnit;
  exports["enumOrdering"] = enumOrdering;
  exports["enumMaybe"] = enumMaybe;
  exports["enumEither"] = enumEither;
  exports["enumTuple"] = enumTuple;
  exports["boundedEnumBoolean"] = boundedEnumBoolean;
  exports["boundedEnumChar"] = boundedEnumChar;
  exports["boundedEnumUnit"] = boundedEnumUnit;
  exports["boundedEnumOrdering"] = boundedEnumOrdering;
  exports["newtypeCardinality"] = newtypeCardinality;
  exports["eqCardinality"] = eqCardinality;
  exports["ordCardinality"] = ordCardinality;
  exports["showCardinality"] = showCardinality;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var showCodePoint = new Data_Show.Show(function (v) {
      return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
  });
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var lastIndexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.lastIndexOf(p)(s));
      };
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };
  var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var lastIndexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var i$prime = Data_String_CodeUnits.length(take(i)(s));
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return length(Data_String_CodeUnits.take(k)(s));
              })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
          };
      };
  };
  var splitAt = function (i) {
      return function (s) {
          var before = take(i)(s);
          return {
              before: before,
              after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
          };
      };
  };
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var indexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var s$prime = drop(i)(s);
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
              })(Data_String_CodeUnits.indexOf(p)(s$prime));
          };
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
  var dropWhile = function (p) {
      return function (s) {
          return drop(countPrefix(p)(s))(s);
      };
  };
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var codePointAtFallback = function ($copy_n) {
      return function ($copy_s) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, s) {
              var v = uncons(s);
              if (v instanceof Data_Maybe.Just) {
                  var $44 = n === 0;
                  if ($44) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head);
                  };
                  $tco_var_n = n - 1 | 0;
                  $copy_s = v.value0.tail;
                  return;
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_s);
          };
          return $tco_result;
      };
  };
  var codePointAt = function (v) {
      return function (v1) {
          if (v < 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0 && v1 === "") {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0) {
              return new Data_Maybe.Just(unsafeCodePointAt0(v1));
          };
          return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
  };
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["toCodePointArray"] = toCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["countPrefix"] = countPrefix;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["splitAt"] = splitAt;
  exports["eqCodePoint"] = eqCodePoint;
  exports["ordCodePoint"] = ordCodePoint;
  exports["showCodePoint"] = showCodePoint;
  exports["boundedCodePoint"] = boundedCodePoint;
  exports["enumCodePoint"] = enumCodePoint;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
  exports["contains"] = Data_String_CodeUnits.contains;
  exports["stripPrefix"] = Data_String_CodeUnits.stripPrefix;
  exports["stripSuffix"] = Data_String_CodeUnits.stripSuffix;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.NonEmpty.Internal"] = $PS["Data.String.NonEmpty.Internal"] || {};
  var exports = $PS["Data.String.NonEmpty.Internal"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Symbol = $PS["Data.Symbol"];                
  var NonEmptyString = function (x) {
      return x;
  };
  var NonEmptyReplacement = function (x) {
      return x;
  };
  var MakeNonEmpty = function (nes) {
      this.nes = nes;
  };
  var toUpper = function (v) {
      return Data_String_Common.toUpper(v);
  };
  var toString = function (v) {
      return v;
  };
  var toLower = function (v) {
      return Data_String_Common.toLower(v);
  };
  var showNonEmptyString = new Data_Show.Show(function (v) {
      return "(NonEmptyString.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var showNonEmptyReplacement = new Data_Show.Show(function (v) {
      return "(NonEmptyReplacement " + (Data_Show.show(showNonEmptyString)(v) + ")");
  });
  var semigroupNonEmptyString = Data_Semigroup.semigroupString;
  var semigroupNonEmptyReplacement = semigroupNonEmptyString;
  var replaceAll = function (pat) {
      return function (v) {
          return function (v1) {
              return Data_String_Common.replaceAll(pat)(v)(v1);
          };
      };
  };
  var replace = function (pat) {
      return function (v) {
          return function (v1) {
              return Data_String_Common.replace(pat)(v)(v1);
          };
      };
  };
  var prependString = function (s1) {
      return function (v) {
          return s1 + v;
      };
  };
  var ordNonEmptyString = Data_Ord.ordString;
  var ordNonEmptyReplacement = ordNonEmptyString;
  var nonEmptyNonEmpty = function (dictIsSymbol) {
      return new MakeNonEmpty(function (p) {
          return Data_Symbol.reflectSymbol(dictIsSymbol)(p);
      });
  };
  var nes = function (dict) {
      return dict.nes;
  };
  var makeNonEmptyBad = function (dictFail) {
      return new MakeNonEmpty(function (v) {
          return "";
      });
  };
  var localeCompare = function (v) {
      return function (v1) {
          return Data_String_Common.localeCompare(v)(v1);
      };
  };
  var liftS = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var joinWith1 = function (dictFoldable1) {
      return function (v) {
          var $46 = Data_Foldable.intercalate(dictFoldable1.Foldable0())(Data_Monoid.monoidString)(v);
          return function ($47) {
              return NonEmptyString($46($47));
          };
      };
  };
  var joinWith = function (dictFoldable) {
      return function (splice) {
          var $48 = Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice);
          return function ($49) {
              return $48($49);
          };
      };
  };
  var join1With = function (dictFoldable1) {
      return function (splice) {
          var $50 = joinWith(dictFoldable1.Foldable0())(splice);
          return function ($51) {
              return NonEmptyString($50($51));
          };
      };
  };
  var fromString = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var stripPrefix = function (pat) {
      return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripPrefix(pat)));
  };
  var stripSuffix = function (pat) {
      return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripSuffix(pat)));
  };
  var trim = function (v) {
      return fromString(Data_String_Common.trim(v));
  };
  var unsafeFromString = function (dictPartial) {
      var $52 = Data_Maybe.fromJust();
      return function ($53) {
          return $52(fromString($53));
      };
  };
  var eqNonEmptyString = Data_Eq.eqString;
  var eqNonEmptyReplacement = eqNonEmptyString;
  var contains = function ($54) {
      return liftS(Data_String_CodeUnits.contains($54));
  };
  var appendString = function (v) {
      return function (s2) {
          return v + s2;
      };
  };
  exports["nes"] = nes;
  exports["NonEmptyString"] = NonEmptyString;
  exports["MakeNonEmpty"] = MakeNonEmpty;
  exports["NonEmptyReplacement"] = NonEmptyReplacement;
  exports["fromString"] = fromString;
  exports["unsafeFromString"] = unsafeFromString;
  exports["toString"] = toString;
  exports["appendString"] = appendString;
  exports["prependString"] = prependString;
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["contains"] = contains;
  exports["localeCompare"] = localeCompare;
  exports["replace"] = replace;
  exports["replaceAll"] = replaceAll;
  exports["toLower"] = toLower;
  exports["toUpper"] = toUpper;
  exports["trim"] = trim;
  exports["joinWith"] = joinWith;
  exports["join1With"] = join1With;
  exports["joinWith1"] = joinWith1;
  exports["liftS"] = liftS;
  exports["eqNonEmptyString"] = eqNonEmptyString;
  exports["ordNonEmptyString"] = ordNonEmptyString;
  exports["semigroupNonEmptyString"] = semigroupNonEmptyString;
  exports["showNonEmptyString"] = showNonEmptyString;
  exports["makeNonEmptyBad"] = makeNonEmptyBad;
  exports["nonEmptyNonEmpty"] = nonEmptyNonEmpty;
  exports["eqNonEmptyReplacement"] = eqNonEmptyReplacement;
  exports["ordNonEmptyReplacement"] = ordNonEmptyReplacement;
  exports["semigroupNonEmptyReplacement"] = semigroupNonEmptyReplacement;
  exports["showNonEmptyReplacement"] = showNonEmptyReplacement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var getFieldOptional$prime = function (decoder) {
      return function (obj) {
          return function (str) {
              var decode = function (json) {
                  var $5 = Data_Argonaut_Core.isNull(json);
                  if ($5) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                  };
                  return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(json)));
              };
              return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var getFieldOptional = function (decoder) {
      return function (obj) {
          return function (str) {
              var decode = (function () {
                  var $14 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($15) {
                      return $14(decoder($15));
                  };
              })();
              return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                  var $16 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                  return function ($17) {
                      return $16(decode($17));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var getField = function (decoder) {
      return function (obj) {
          return function (str) {
              return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                  var $18 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($19) {
                      return $18(decoder($19));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var decodeVoid = function (v) {
      return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Data_Argonaut_Core.fromString("Value cannot be Void")));
  };
  var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
  var decodeNull = Data_Argonaut_Core.caseJsonNull(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("null")))(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)));
  var decodeNonEmptyString = function (json) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.Named.create("NonEmptyString")(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Functor.map(Data_Either.functorEither)(Data_String_NonEmpty_Internal.fromString)(decodeString(json)));
  };
  var decodeMaybe = function (decoder) {
      return function (json) {
          if (Data_Argonaut_Core.isNull(json)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decoder(json));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 37, column 1 - line 41, column 38): " + [ decoder.constructor.name, json.constructor.name ]);
      };
  };
  var decodeJObject = (function () {
      var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
      return function ($21) {
          return $20(Data_Argonaut_Core.toObject($21));
      };
  })();
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();
  var decodeList = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $24 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("List"));
          var $25 = Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(decoder);
          return function ($26) {
              return $24($25($26));
          };
      })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray));
  };
  var decodeSet = function (dictOrd) {
      return function (decoder) {
          var $27 = Data_Functor.map(Data_Either.functorEither)(Data_Set.fromFoldable(Data_List_Types.foldableList)(dictOrd));
          var $28 = decodeList(decoder);
          return function ($29) {
              return $27($28($29));
          };
      };
  };
  var decodeNonEmptyArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $30 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyArray"));
          var $31 = Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(Data_Either.applicativeEither)(decoder);
          return function ($32) {
              return $30($31($32));
          };
      })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $33 = Data_Functor.map(Data_Either.functorEither)(function (x) {
              return Data_Array_NonEmpty["cons'"](x.head)(x.tail);
          });
          var $34 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyArray"));
          return function ($35) {
              return $33($34(Data_Array.uncons($35)));
          };
      })())(decodeJArray));
  };
  var decodeNonEmptyList = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $36 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyList"));
          var $37 = Data_Traversable.traverse(Data_List_Types.traversableNonEmptyList)(Data_Either.applicativeEither)(decoder);
          return function ($38) {
              return $36($37($38));
          };
      })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $39 = Data_Functor.map(Data_Either.functorEither)(function (x) {
              return Data_List_NonEmpty["cons'"](x.head)(x.tail);
          });
          var $40 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyList"));
          return function ($41) {
              return $39($40(Data_List.uncons($41)));
          };
      })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
  };
  var decodeNonEmpty_Array = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $42 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty Array"));
          var $43 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_Traversable.traversableArray))(Data_Either.applicativeEither)(decoder);
          return function ($44) {
              return $42($43($44));
          };
      })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $45 = Data_Functor.map(Data_Either.functorEither)(function (x) {
              return new Data_NonEmpty.NonEmpty(x.head, x.tail);
          });
          var $46 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty Array"));
          return function ($47) {
              return $45($46(Data_Array.uncons($47)));
          };
      })())(decodeJArray));
  };
  var decodeNonEmpty_List = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $48 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty List"));
          var $49 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_List_Types.traversableList))(Data_Either.applicativeEither)(decoder);
          return function ($50) {
              return $48($49($50));
          };
      })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $51 = Data_Functor.map(Data_Either.functorEither)(function (x) {
              return new Data_NonEmpty.NonEmpty(x.head, x.tail);
          });
          var $52 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty List"));
          return function ($53) {
              return $51($52(Data_List.uncons($53)));
          };
      })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
  };
  var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
      return function ($55) {
          return $54(Data_Int.fromNumber($55));
      };
  })())(decodeNumber);
  var decodeIdentity = function (decoder) {
      return function (json) {
          return Data_Functor.map(Data_Either.functorEither)(Data_Identity.Identity)(decoder(json));
      };
  };
  var decodeForeignObject = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $56 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
          var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
          return function ($58) {
              return $56($57($58));
          };
      })())(decodeJObject);
  };
  var decodeEither = function (decoderA) {
      return function (decoderB) {
          return function (json) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Either"))(Control_Bind.bind(Data_Either.bindEither)(decodeJObject(json))(function (obj) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("tag", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("tag")(obj)))(function (tag) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("value", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("value")(obj)))(function (val) {
                          var v = Data_Argonaut_Core.toString(tag);
                          if (v instanceof Data_Maybe.Just && v.value0 === "Right") {
                              return Data_Functor.map(Data_Either.functorEither)(Data_Either.Right.create)(decoderB(val));
                          };
                          if (v instanceof Data_Maybe.Just && v.value0 === "Left") {
                              return Data_Functor.map(Data_Either.functorEither)(Data_Either.Left.create)(decoderA(val));
                          };
                          return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey("tag", new Data_Argonaut_Decode_Error.UnexpectedValue(tag)));
                      });
                  });
              }));
          };
      };
  };
  var decodeCodePoint = function (json) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.Named.create("CodePoint")(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Functor.map(Data_Either.functorEither)(Data_String_CodePoints.codePointAt(0))(decodeString(json)));
  };
  var decodeBoolean = Data_Argonaut_Core.caseJsonBoolean(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Boolean")))(Data_Either.Right.create);
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  var decodeTuple = function (decoderA) {
      return function (decoderB) {
          return function (json) {
              var f = function (v) {
                  if (v.length === 2) {
                      return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decoderA(v[0])))(decoderB(v[1]));
                  };
                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Tuple"));
              };
              return Control_Bind.bind(Data_Either.bindEither)(decodeArray(Data_Either.Right.create)(json))(f);
          };
      };
  };
  var decodeMap = function (dictOrd) {
      return function (decoderA) {
          return function (decoderB) {
              var $64 = Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList));
              var $65 = decodeList(decodeTuple(decoderA)(decoderB));
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  exports["decodeIdentity"] = decodeIdentity;
  exports["decodeMaybe"] = decodeMaybe;
  exports["decodeTuple"] = decodeTuple;
  exports["decodeEither"] = decodeEither;
  exports["decodeNull"] = decodeNull;
  exports["decodeBoolean"] = decodeBoolean;
  exports["decodeNumber"] = decodeNumber;
  exports["decodeInt"] = decodeInt;
  exports["decodeString"] = decodeString;
  exports["decodeNonEmptyString"] = decodeNonEmptyString;
  exports["decodeNonEmpty_Array"] = decodeNonEmpty_Array;
  exports["decodeNonEmptyArray"] = decodeNonEmptyArray;
  exports["decodeNonEmpty_List"] = decodeNonEmpty_List;
  exports["decodeNonEmptyList"] = decodeNonEmptyList;
  exports["decodeCodePoint"] = decodeCodePoint;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
  exports["decodeList"] = decodeList;
  exports["decodeSet"] = decodeSet;
  exports["decodeMap"] = decodeMap;
  exports["decodeVoid"] = decodeVoid;
  exports["decodeJArray"] = decodeJArray;
  exports["decodeJObject"] = decodeJObject;
  exports["getField"] = getField;
  exports["getFieldOptional"] = getFieldOptional;
  exports["getFieldOptional'"] = getFieldOptional$prime;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                
  var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
  exports["unsafeUnion"] = unsafeUnion;
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var EqualFields = function (equalFields) {
      this.equalFields = equalFields;
  };
  var union = function (dictUnion) {
      return function (l) {
          return function (r) {
              return Record_Unsafe_Union.unsafeUnionFn(l, r);
          };
      };
  };
  var set = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var nub = function (dictNub) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var merge = function (dictUnion) {
      return function (dictNub) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  var modify = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (f) {
                      return function (r) {
                          return set(dictIsSymbol)()()(l)(f(get(dictIsSymbol)()(l)(r)))(r);
                      };
                  };
              };
          };
      };
  };
  var equalFieldsNil = new EqualFields(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var equalFields = function (dict) {
      return dict.equalFields;
  };
  var equalFieldsCons = function (dictIsSymbol) {
      return function (dictEq) {
          return function (dictCons) {
              return function (dictEqualFields) {
                  return new EqualFields(function (v) {
                      return function (a) {
                          return function (b) {
                              var get$prime = get(dictIsSymbol)()(Type_Proxy["Proxy"].value);
                              var equalRest = equalFields(dictEqualFields)(Type_Proxy["Proxy"].value);
                              return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
                          };
                      };
                  });
              };
          };
      };
  };
  var equal = function (dictRowToList) {
      return function (dictEqualFields) {
          return function (a) {
              return function (b) {
                  return equalFields(dictEqualFields)(Type_Proxy["Proxy"].value)(a)(b);
              };
          };
      };
  };
  var disjointUnion = function (dictUnion) {
      return function (dictNub) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  var $$delete = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (r) {
                      return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                  };
              };
          };
      };
  };
  var rename = function (dictIsSymbol) {
      return function (dictIsSymbol1) {
          return function (dictCons) {
              return function (dictLacks) {
                  return function (dictCons1) {
                      return function (dictLacks1) {
                          return function (prev) {
                              return function (next) {
                                  return function (record) {
                                      return insert(dictIsSymbol1)()()(next)(get(dictIsSymbol)()(prev)(record))($$delete(dictIsSymbol)()()(prev)(record));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
  exports["modify"] = modify;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["rename"] = rename;
  exports["equal"] = equal;
  exports["merge"] = merge;
  exports["union"] = union;
  exports["disjointUnion"] = disjointUnion;
  exports["nub"] = nub;
  exports["EqualFields"] = EqualFields;
  exports["equalFields"] = equalFields;
  exports["equalFieldsCons"] = equalFieldsCons;
  exports["equalFieldsNil"] = equalFieldsNil;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GDecodeJson = function (gDecodeJson) {
      this.gDecodeJson = gDecodeJson;
  };
  var DecodeJsonField = function (decodeJsonField) {
      this.decodeJsonField = decodeJsonField;
  };
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var gDecodeJsonNil = new GDecodeJson(function (v) {
      return function (v1) {
          return new Data_Either.Right({});
      };
  });
  var gDecodeJson = function (dict) {
      return dict.gDecodeJson;
  };
  var decodeVoid = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeVoid);
  var decodeRecord = function (dictGDecodeJson) {
      return function (dictRowToList) {
          return new DecodeJson(function (json) {
              var v = Data_Argonaut_Core.toObject(json);
              if (v instanceof Data_Maybe.Just) {
                  return gDecodeJson(dictGDecodeJson)(v.value0)(Type_Proxy["Proxy"].value);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
              };
              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 103, column 5 - line 105, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeString);
  var decodeJsonNumber = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNumber);
  var decodeJsonNull = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNull);
  var decodeJsonNonEmptyString = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmptyString);
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);
  var decodeJsonInt = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeInt);
  var decodeJsonField = function (dict) {
      return dict.decodeJsonField;
  };
  var gDecodeJsonCons = function (dictDecodeJsonField) {
      return function (dictGDecodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return new GDecodeJson(function (object) {
                          return function (v) {
                              var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var fieldValue = Foreign_Object.lookup(fieldName)(object);
                              var v1 = decodeJsonField(dictDecodeJsonField)(fieldValue);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function (val) {
                                      return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson(dictGDecodeJson)(object)(Type_Proxy["Proxy"].value))(function (rest) {
                                          return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                                      });
                                  });
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                              };
                              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 127, column 5 - line 134, column 44): " + [ v1.constructor.name ]);
                          };
                      });
                  };
              };
          };
      };
  };
  var decodeJsonCodePoint = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeCodePoint);
  var decodeJsonBoolean = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeBoolean);
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJsonEither = function (dictDecodeJson) {
      return function (dictDecodeJson1) {
          return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeEither(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1)));
      };
  };
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeMaybe(decodeJson(dictDecodeJson)));
  };
  var decodeJsonNonEmptyArray = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmptyArray(decodeJson(dictDecodeJson)));
  };
  var decodeJsonNonEmptyList = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmptyList(decodeJson(dictDecodeJson)));
  };
  var decodeJsonNonEmpty_Array = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmpty_Array(decodeJson(dictDecodeJson)));
  };
  var decodeJsonNonEmpty_List = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmpty_List(decodeJson(dictDecodeJson)));
  };
  var decodeJsonTuple = function (dictDecodeJson) {
      return function (dictDecodeJson1) {
          return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeTuple(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1)));
      };
  };
  var decodeList = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeList(decodeJson(dictDecodeJson)));
  };
  var decodeMap = function (dictOrd) {
      return function (dictDecodeJson) {
          return function (dictDecodeJson1) {
              return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeMap(dictOrd)(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1)));
          };
      };
  };
  var decodeSet = function (dictOrd) {
      return function (dictDecodeJson) {
          return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeSet(dictOrd)(decodeJson(dictDecodeJson)));
      };
  };
  var decodeIdentity = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeIdentity(decodeJson(dictDecodeJson)));
  };
  var decodeForeignObject = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeForeignObject(decodeJson(dictDecodeJson)));
  };
  var decodeFieldMaybe = function (dictDecodeJson) {
      return new DecodeJsonField(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Just.create(new Data_Either.Right(Data_Maybe.Nothing.value));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Maybe.Just.create(decodeJson(decodeJsonMaybe(dictDecodeJson))(v.value0));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 139, column 1 - line 143, column 49): " + [ v.constructor.name ]);
      });
  };
  var decodeFieldId = function (dictDecodeJson) {
      return new DecodeJsonField(function (j) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(decodeJson(dictDecodeJson))(j);
      });
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson)));
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonField"] = decodeJsonField;
  exports["gDecodeJson"] = gDecodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["GDecodeJson"] = GDecodeJson;
  exports["DecodeJsonField"] = DecodeJsonField;
  exports["decodeIdentity"] = decodeIdentity;
  exports["decodeJsonMaybe"] = decodeJsonMaybe;
  exports["decodeJsonTuple"] = decodeJsonTuple;
  exports["decodeJsonEither"] = decodeJsonEither;
  exports["decodeJsonNull"] = decodeJsonNull;
  exports["decodeJsonBoolean"] = decodeJsonBoolean;
  exports["decodeJsonNumber"] = decodeJsonNumber;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonNonEmptyString"] = decodeJsonNonEmptyString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeJsonNonEmpty_Array"] = decodeJsonNonEmpty_Array;
  exports["decodeJsonNonEmptyArray"] = decodeJsonNonEmptyArray;
  exports["decodeJsonNonEmpty_List"] = decodeJsonNonEmpty_List;
  exports["decodeJsonNonEmptyList"] = decodeJsonNonEmptyList;
  exports["decodeJsonCodePoint"] = decodeJsonCodePoint;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
  exports["decodeList"] = decodeList;
  exports["decodeSet"] = decodeSet;
  exports["decodeMap"] = decodeMap;
  exports["decodeVoid"] = decodeVoid;
  exports["decodeRecord"] = decodeRecord;
  exports["gDecodeJsonNil"] = gDecodeJsonNil;
  exports["gDecodeJsonCons"] = gDecodeJsonCons;
  exports["decodeFieldMaybe"] = decodeFieldMaybe;
  exports["decodeFieldId"] = decodeFieldId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Decode.Combinators"] = $PS["Data.Argonaut.Decode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var getFieldOptional$prime = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  var getFieldOptional = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getFieldOptional(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  var getField = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  var defaultField = function (parser) {
      return function ($$default) {
          return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe($$default))(parser);
      };
  };
  exports["getField"] = getField;
  exports["getFieldOptional"] = getFieldOptional;
  exports["getFieldOptional'"] = getFieldOptional$prime;
  exports["defaultField"] = defaultField;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Decode.Parser"] = $PS["Data.Argonaut.Decode.Parser"] || {};
  var exports = $PS["Data.Argonaut.Decode.Parser"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];                
  var parseJson = (function () {
      var $1 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v) {
          return new Data_Argonaut_Decode_Error.TypeMismatch("JSON");
      });
      return function ($2) {
          return $1(Data_Argonaut_Parser.jsonParser($2));
      };
  })();
  exports["parseJson"] = parseJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Decode"] = $PS["Data.Argonaut.Decode"] || {};
  var exports = $PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Decode_Parser = $PS["Data.Argonaut.Decode.Parser"];
  exports["DecodeJson"] = Data_Argonaut_Decode_Class.DecodeJson;
  exports["decodeJson"] = Data_Argonaut_Decode_Class.decodeJson;
  exports["defaultField"] = Data_Argonaut_Decode_Combinators.defaultField;
  exports["getField"] = Data_Argonaut_Decode_Combinators.getField;
  exports["getFieldOptional"] = Data_Argonaut_Decode_Combinators.getFieldOptional;
  exports["getFieldOptional'"] = Data_Argonaut_Decode_Combinators["getFieldOptional'"];
  exports["AtIndex"] = Data_Argonaut_Decode_Error.AtIndex;
  exports["AtKey"] = Data_Argonaut_Decode_Error.AtKey;
  exports["MissingValue"] = Data_Argonaut_Decode_Error.MissingValue;
  exports["Named"] = Data_Argonaut_Decode_Error.Named;
  exports["TypeMismatch"] = Data_Argonaut_Decode_Error.TypeMismatch;
  exports["UnexpectedValue"] = Data_Argonaut_Decode_Error.UnexpectedValue;
  exports["printJsonDecodeError"] = Data_Argonaut_Decode_Error.printJsonDecodeError;
  exports["parseJson"] = Data_Argonaut_Decode_Parser.parseJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Void = $PS["Data.Void"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var extend = function (encoder) {
      return function (v) {
          var $32 = Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))((function () {
              var $34 = Foreign_Object.insert(v.value0)(v.value1);
              return function ($35) {
                  return Data_Argonaut_Core.fromObject($34($35));
              };
          })());
          return function ($33) {
              return $32(encoder($33));
          };
      };
  };
  var extendOptional = function (encoder) {
      return function (v) {
          if (v instanceof Data_Maybe.Just) {
              return extend(encoder)(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return encoder;
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 121, column 26 - line 123, column 21): " + [ v.constructor.name ]);
      };
  };
  var encodeVoid = Data_Void.absurd;
  var encodeUnit = Data_Function["const"](Data_Argonaut_Core.jsonNull);
  var encodeTuple = function (encoderA) {
      return function (encoderB) {
          return function (v) {
              return Data_Argonaut_Core.fromArray([ encoderA(v.value0), encoderB(v.value1) ]);
          };
      };
  };
  var encodeString = Data_Argonaut_Core.fromString;
  var encodeNumber = Data_Argonaut_Core.fromNumber;
  var encodeNonEmptyString = function ($36) {
      return Data_Argonaut_Core.fromString(Data_String_NonEmpty_Internal.toString($36));
  };
  var encodeMaybe = function (encoder) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Maybe.Just) {
              return encoder(v.value0);
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 31, column 23 - line 33, column 22): " + [ v.constructor.name ]);
      };
  };
  var encodeList = function (encoder) {
      var $37 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      var $38 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
      return function ($39) {
          return Data_Argonaut_Core.fromArray($37($38($39)));
      };
  };
  var encodeMap = function (dictOrd) {
      return function (encoderA) {
          return function (encoderB) {
              var $40 = encodeList(encodeTuple(encoderA)(encoderB));
              var $41 = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
              return function ($42) {
                  return $40($41($42));
              };
          };
      };
  };
  var encodeNonEmptyList = function (encoder) {
      var $43 = encodeList(encoder);
      return function ($44) {
          return $43(Data_List_NonEmpty.toList($44));
      };
  };
  var encodeNonEmpty_List = function (encoder) {
      return function (v) {
          return encodeList(encoder)(new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  var encodeSet = function (dictOrd) {
      return function (encoder) {
          var $45 = encodeList(encoder);
          var $46 = Data_Set.toUnfoldable(Data_List_Types.unfoldableList);
          return function ($47) {
              return $45($46($47));
          };
      };
  };
  var encodeInt = function ($48) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($48));
  };
  var encodeIdentity = function (encoder) {
      return function (v) {
          return encoder(v);
      };
  };
  var encodeForeignObject = function (encoder) {
      var $49 = Data_Functor.map(Foreign_Object.functorObject)(encoder);
      return function ($50) {
          return Data_Argonaut_Core.fromObject($49($50));
      };
  };
  var encodeEither = function (encoderA) {
      return function (encoderB) {
          var obj = function (encoder) {
              return function (tag) {
                  return function (x) {
                      return Data_Argonaut_Core.fromObject(Foreign_Object.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("tag", Data_Argonaut_Core.fromString(tag)), new Data_List_Types.Cons(new Data_Tuple.Tuple("value", encoder(x)), Data_List_Types.Nil.value))));
                  };
              };
          };
          return Data_Either.either(obj(encoderA)("Left"))(obj(encoderB)("Right"));
      };
  };
  var encodeCodePoint = function ($51) {
      return encodeString(Data_String_CodePoints.singleton($51));
  };
  var encodeChar = function ($52) {
      return encodeString(Data_String_CodeUnits.singleton($52));
  };
  var encodeBoolean = Data_Argonaut_Core.fromBoolean;
  var encodeArray = function (encoder) {
      var $53 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      return function ($54) {
          return Data_Argonaut_Core.fromArray($53($54));
      };
  };
  var encodeNonEmptyArray = function (encoder) {
      var $55 = encodeArray(encoder);
      return function ($56) {
          return $55(Data_Array_NonEmpty.toArray($56));
      };
  };
  var encodeNonEmpty_Array = function (encoder) {
      return function (v) {
          return encodeArray(encoder)(Data_Array.cons(v.value0)(v.value1));
      };
  };
  var assocOptional = function (encoder) {
      return function (k) {
          return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $57 = Data_Tuple.Tuple.create(k);
              return function ($58) {
                  return $57(encoder($58));
              };
          })());
      };
  };
  var assoc = function (encoder) {
      return function (k) {
          var $59 = Data_Tuple.Tuple.create(k);
          return function ($60) {
              return $59(encoder($60));
          };
      };
  };
  exports["encodeIdentity"] = encodeIdentity;
  exports["encodeMaybe"] = encodeMaybe;
  exports["encodeTuple"] = encodeTuple;
  exports["encodeEither"] = encodeEither;
  exports["encodeUnit"] = encodeUnit;
  exports["encodeBoolean"] = encodeBoolean;
  exports["encodeNumber"] = encodeNumber;
  exports["encodeInt"] = encodeInt;
  exports["encodeString"] = encodeString;
  exports["encodeCodePoint"] = encodeCodePoint;
  exports["encodeNonEmptyString"] = encodeNonEmptyString;
  exports["encodeNonEmpty_Array"] = encodeNonEmpty_Array;
  exports["encodeNonEmptyArray"] = encodeNonEmptyArray;
  exports["encodeNonEmpty_List"] = encodeNonEmpty_List;
  exports["encodeNonEmptyList"] = encodeNonEmptyList;
  exports["encodeChar"] = encodeChar;
  exports["encodeArray"] = encodeArray;
  exports["encodeList"] = encodeList;
  exports["encodeForeignObject"] = encodeForeignObject;
  exports["encodeSet"] = encodeSet;
  exports["encodeMap"] = encodeMap;
  exports["encodeVoid"] = encodeVoid;
  exports["assoc"] = assoc;
  exports["assocOptional"] = assocOptional;
  exports["extend"] = extend;
  exports["extendOptional"] = extendOptional;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };
  var encodeVoid = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeVoid);
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Proxy["Proxy"].value));
          });
      };
  };
  var encodeNonEmptyString = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmptyString);
  var encodeJsonUnit = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeUnit);
  var encodeJsonJson = new EncodeJson(Control_Category.identity(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeString);
  var encodeJsonJNumber = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNumber);
  var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeBoolean);
  var encodeJsonInt = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeInt);
  var encodeJsonCodePoint = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeCodePoint);
  var encodeJsonChar = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeChar);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeArray(encodeJson(dictEncodeJson)));
  };
  var encodeJsonEither = function (dictEncodeJson) {
      return function (dictEncodeJson1) {
          return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeEither(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1)));
      };
  };
  var encodeJsonList = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeList(encodeJson(dictEncodeJson)));
  };
  var encodeJsonMaybe = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMaybe(encodeJson(dictEncodeJson)));
  };
  var encodeJsonNonEmptyArray = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmptyArray(encodeJson(dictEncodeJson)));
  };
  var encodeJsonNonEmptyList = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmptyList(encodeJson(dictEncodeJson)));
  };
  var encodeJsonNonEmpty_Array = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmpty_Array(encodeJson(dictEncodeJson)));
  };
  var encodeJsonNonEmpty_List = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmpty_List(encodeJson(dictEncodeJson)));
  };
  var encodeJsonTuple = function (dictEncodeJson) {
      return function (dictEncodeJson1) {
          return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeTuple(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1)));
      };
  };
  var encodeMap = function (dictOrd) {
      return function (dictEncodeJson) {
          return function (dictEncodeJson1) {
              return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMap(dictOrd)(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1)));
          };
      };
  };
  var encodeSet = function (dictOrd) {
      return function (dictEncodeJson) {
          return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeSet(dictOrd)(encodeJson(dictEncodeJson)));
      };
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Proxy["Proxy"].value));
                      };
                  });
              };
          };
      };
  };
  var encodeIdentity = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeIdentity(encodeJson(dictEncodeJson)));
  };
  var encodeForeignObject = function (dictEncodeJson) {
      return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeForeignObject(encodeJson(dictEncodeJson)));
  };
  exports["encodeJson"] = encodeJson;
  exports["gEncodeJson"] = gEncodeJson;
  exports["EncodeJson"] = EncodeJson;
  exports["GEncodeJson"] = GEncodeJson;
  exports["encodeIdentity"] = encodeIdentity;
  exports["encodeJsonMaybe"] = encodeJsonMaybe;
  exports["encodeJsonTuple"] = encodeJsonTuple;
  exports["encodeJsonEither"] = encodeJsonEither;
  exports["encodeJsonUnit"] = encodeJsonUnit;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeJsonJNumber"] = encodeJsonJNumber;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonCodePoint"] = encodeJsonCodePoint;
  exports["encodeNonEmptyString"] = encodeNonEmptyString;
  exports["encodeJsonNonEmpty_Array"] = encodeJsonNonEmpty_Array;
  exports["encodeJsonNonEmptyArray"] = encodeJsonNonEmptyArray;
  exports["encodeJsonNonEmpty_List"] = encodeJsonNonEmpty_List;
  exports["encodeJsonNonEmptyList"] = encodeJsonNonEmptyList;
  exports["encodeJsonChar"] = encodeJsonChar;
  exports["encodeJsonArray"] = encodeJsonArray;
  exports["encodeJsonList"] = encodeJsonList;
  exports["encodeForeignObject"] = encodeForeignObject;
  exports["encodeSet"] = encodeSet;
  exports["encodeMap"] = encodeMap;
  exports["encodeVoid"] = encodeVoid;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Encode.Combinators"] = $PS["Data.Argonaut.Encode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Encode.Combinators"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];                
  var extendOptional = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.extendOptional(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  var extend = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.extend(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  var assocOptional = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.assocOptional(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  var assoc = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.assoc(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
  };
  exports["assoc"] = assoc;
  exports["assocOptional"] = assocOptional;
  exports["extend"] = extend;
  exports["extendOptional"] = extendOptional;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Encode"] = $PS["Data.Argonaut.Encode"] || {};
  var exports = $PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Combinators = $PS["Data.Argonaut.Encode.Combinators"];
  exports["EncodeJson"] = Data_Argonaut_Encode_Class.EncodeJson;
  exports["encodeJson"] = Data_Argonaut_Encode_Class.encodeJson;
  exports["assoc"] = Data_Argonaut_Encode_Combinators.assoc;
  exports["assocOptional"] = Data_Argonaut_Encode_Combinators.assocOptional;
  exports["extend"] = Data_Argonaut_Encode_Combinators.extend;
  exports["extendOptional"] = Data_Argonaut_Encode_Combinators.extendOptional;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.JCursor"] = $PS["Data.Argonaut.JCursor"] || {};
  var exports = $PS["Data.Argonaut.JCursor"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var JsonPrim = function (x) {
      return x;
  };
  var JCursorTop = (function () {
      function JCursorTop() {

      };
      JCursorTop.value = new JCursorTop();
      return JCursorTop;
  })();
  var JField = (function () {
      function JField(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      JField.create = function (value0) {
          return function (value1) {
              return new JField(value0, value1);
          };
      };
      return JField;
  })();
  var JIndex = (function () {
      function JIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      JIndex.create = function (value0) {
          return function (value1) {
              return new JIndex(value0, value1);
          };
      };
      return JIndex;
  })();
  var showJCursor = new Data_Show.Show(function (v) {
      if (v instanceof JCursorTop) {
          return "JCursorTop";
      };
      if (v instanceof JField) {
          return "(JField " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJCursor)(v.value1) + ")")));
      };
      if (v instanceof JIndex) {
          return "(JIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJCursor)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 26, column 1 - line 29, column 67): " + [ v.constructor.name ]);
  });
  var semigroupJCursor = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof JCursorTop) {
              return v;
          };
          if (v instanceof JCursorTop) {
              return v1;
          };
          if (v instanceof JField) {
              return new JField(v.value0, Data_Semigroup.append(semigroupJCursor)(v.value1)(v1));
          };
          if (v instanceof JIndex) {
              return new JIndex(v.value0, Data_Semigroup.append(semigroupJCursor)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 36, column 1 - line 40, column 44): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var runJsonPrim = function (v) {
      return v;
  };
  var showJsonPrim = new Data_Show.Show(function (p) {
      return runJsonPrim(p)(Data_Show.show(Data_Unit.showUnit))(Data_Show.show(Data_Show.showBoolean))(Data_Show.show(Data_Show.showNumber))(Data_Show.show(Data_Show.showString));
  });
  var print = function (v) {
      if (v instanceof JCursorTop) {
          return "";
      };
      if (v instanceof JField) {
          return "." + (v.value0 + Data_Show.show(showJCursor)(v.value1));
      };
      if (v instanceof JIndex) {
          return "[" + (Data_Show.show(Data_Show.showInt)(v.value0) + ("]" + Data_Show.show(showJCursor)(v.value1)));
      };
      throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 31, column 1 - line 31, column 27): " + [ v.constructor.name ]);
  };
  var primToJson = function (p) {
      return runJsonPrim(p)(Data_Function["const"](Data_Argonaut_Core.jsonNull))(Data_Argonaut_Core.fromBoolean)(Data_Argonaut_Core.fromNumber)(Data_Argonaut_Core.fromString);
  };
  var primStr = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (f) {
                      return f(v);
                  };
              };
          };
      };
  };
  var primNum = function (v) {
      return function (v1) {
          return function (v2) {
              return function (f) {
                  return function (v3) {
                      return f(v);
                  };
              };
          };
      };
  };
  var primNull = function (f) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  return f(Data_Unit.unit);
              };
          };
      };
  };
  var primBool = function (v) {
      return function (v1) {
          return function (f) {
              return function (v2) {
                  return function (v3) {
                      return f(v);
                  };
              };
          };
      };
  };
  var toPrims = (function () {
      var objFn = function (obj) {
          var f = function (v) {
              return Data_Functor.map(Data_List_Types.functorList)(function (t) {
                  return new Data_Tuple.Tuple(new JField(v.value0, Data_Tuple.fst(t)), Data_Tuple.snd(t));
              })(toPrims(v.value1));
          };
          return Control_Bind.bind(Data_List_Types.bindList)(Foreign_Object.toUnfoldable(Data_List_Types.unfoldableList)(obj))(f);
      };
      var mkTop = function (p) {
          return Data_List.singleton(new Data_Tuple.Tuple(JCursorTop.value, p));
      };
      var nullFn = function (v) {
          return mkTop(primNull);
      };
      var numFn = function (n) {
          return mkTop(primNum(n));
      };
      var strFn = function (s) {
          return mkTop(primStr(s));
      };
      var boolFn = function (b) {
          return mkTop(primBool(b));
      };
      var arrFn$prime = function (v) {
          return Data_List.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(function (t) {
              return new Data_Tuple.Tuple(new JIndex(v.value0, Data_Tuple.fst(t)), Data_Tuple.snd(t));
          })(toPrims(v.value1)));
      };
      var arrFn = function (arr) {
          var zipped = Data_List.zipWith(Data_Tuple.Tuple.create)(Data_List.range(0)(Data_Array.length(arr) - 1 | 0))(Data_List.fromFoldable(Data_Foldable.foldableArray)(arr));
          return Control_Bind.bind(Data_List_Types.bindList)(zipped)(arrFn$prime);
      };
      return Data_Argonaut_Core.caseJson(nullFn)(boolFn)(numFn)(strFn)(arrFn)(objFn);
  })();
  var monoidJCursor = new Data_Monoid.Monoid(function () {
      return semigroupJCursor;
  }, JCursorTop.value);
  var inferEmpty = function (v) {
      if (v instanceof JCursorTop) {
          return Data_Argonaut_Core.jsonNull;
      };
      if (v instanceof JField) {
          return Data_Argonaut_Core.jsonEmptyObject;
      };
      if (v instanceof JIndex) {
          return Data_Argonaut_Core.jsonEmptyArray;
      };
      throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 109, column 1 - line 109, column 32): " + [ v.constructor.name ]);
  };
  var eqJCursor = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof JCursorTop && y instanceof JCursorTop) {
              return true;
          };
          if (x instanceof JField && y instanceof JField) {
              return x.value0 === y.value0 && Data_Eq.eq(eqJCursor)(x.value1)(y.value1);
          };
          if (x instanceof JIndex && y instanceof JIndex) {
              return x.value0 === y.value0 && Data_Eq.eq(eqJCursor)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var ordJCursor = new Data_Ord.Ord(function () {
      return eqJCursor;
  }, function (x) {
      return function (y) {
          if (x instanceof JCursorTop && y instanceof JCursorTop) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof JCursorTop) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof JCursorTop) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof JField && y instanceof JField) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordJCursor)(x.value1)(y.value1);
          };
          if (x instanceof JField) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof JField) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof JIndex && y instanceof JIndex) {
              var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordJCursor)(x.value1)(y.value1);
          };
          throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 24, column 1 - line 24, column 42): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var encodeJsonJCursor = new Data_Argonaut_Encode_Class.EncodeJson((function () {
      var loop = function (v) {
          if (v instanceof JCursorTop) {
              return [  ];
          };
          if (v instanceof JField) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0) ])(loop(v.value1));
          };
          if (v instanceof JIndex) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value0) ])(loop(v.value1));
          };
          throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 47, column 5 - line 47, column 25): " + [ v.constructor.name ]);
      };
      var $148 = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJson));
      return function ($149) {
          return $148(loop($149));
      };
  })());
  var downIndex = function (i) {
      var downIndex$prime = function (v) {
          if (v instanceof JCursorTop) {
              return new JIndex(i, JCursorTop.value);
          };
          if (v instanceof JField) {
              return new JField(v.value0, downIndex$prime(v.value1));
          };
          if (v instanceof JIndex) {
              return new JIndex(v.value0, downIndex$prime(v.value1));
          };
          throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 100, column 3 - line 100, column 46): " + [ v.constructor.name ]);
      };
      return downIndex$prime;
  };
  var downField = function (i) {
      var downField$prime = function (v) {
          if (v instanceof JCursorTop) {
              return new JField(i, JCursorTop.value);
          };
          if (v instanceof JField) {
              return new JField(v.value0, downField$prime(v.value1));
          };
          if (v instanceof JIndex) {
              return new JIndex(v.value0, downField$prime(v.value1));
          };
          throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 94, column 3 - line 94, column 46): " + [ v.constructor.name ]);
      };
      return downField$prime;
  };
  var insideOut = function (v) {
      if (v instanceof JCursorTop) {
          return JCursorTop.value;
      };
      if (v instanceof JField) {
          return downField(v.value0)(insideOut(v.value1));
      };
      if (v instanceof JIndex) {
          return downIndex(v.value0)(insideOut(v.value1));
      };
      throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 87, column 1 - line 87, column 32): " + [ v.constructor.name ]);
  };
  var decodeJsonJCursor = new Data_Argonaut_Decode_Class.DecodeJson(function (j) {
      var goNum = function (c) {
          var $150 = Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Int")))((function () {
              var $152 = Data_Function.flip(JIndex.create)(c);
              return function ($153) {
                  return Data_Either.Right.create($152($153));
              };
          })());
          return function ($151) {
              return $150(Data_Int.fromNumber($151));
          };
      };
      var loop = function (arr) {
          return Data_Maybe.maybe(new Data_Either.Right(JCursorTop.value))(goLoop)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Data_Array.head(arr)))(Data_Array.tail(arr)));
      };
      var goLoop = function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(loop(v.value1))(function (c) {
              var fail = new Data_Either.Left(Data_Argonaut_Decode_Error.Named.create("Int or String")(new Data_Argonaut_Decode_Error.UnexpectedValue(v.value0)));
              return Data_Argonaut_Core.caseJson(Data_Function["const"](fail))(Data_Function["const"](fail))(goNum(c))((function () {
                  var $154 = Data_Function.flip(JField.create)(c);
                  return function ($155) {
                      return Data_Either.Right.create($154($155));
                  };
              })())(Data_Function["const"](fail))(Data_Function["const"](fail))(v.value0);
          });
      };
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))(j))(loop);
  });
  var cursorSet = function (v) {
      return function (v1) {
          if (v instanceof JCursorTop) {
              var $156 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
              var $157 = Data_Function["const"](v1);
              return function ($158) {
                  return $156($157($158));
              };
          };
          if (v instanceof JField) {
              var mergeObjs = function (m) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $159 = Data_Function.flip(Foreign_Object.insert(v.value0))(m);
                      return function ($160) {
                          return Data_Argonaut_Core.fromObject($159($160));
                      };
                  })())(cursorSet(v.value1)(v1)(Data_Maybe.fromMaybe(inferEmpty(v.value1))(Foreign_Object.lookup(v.value0)(m))));
              };
              var defaultObj = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                  var $161 = Foreign_Object.singleton(v.value0);
                  return function ($162) {
                      return Data_Argonaut_Core.fromObject($161($162));
                  };
              })())(cursorSet(v.value1)(v1)(inferEmpty(v.value1)));
              return Data_Argonaut_Core.caseJsonObject(defaultObj)(mergeObjs);
          };
          if (v instanceof JIndex) {
              var setArr = function ($copy_xs) {
                  return function ($copy_i$prime) {
                      return function ($copy_v$prime) {
                          var $tco_var_xs = $copy_xs;
                          var $tco_var_i$prime = $copy_i$prime;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(xs, i$prime, v$prime) {
                              var len = Data_Array.length(xs);
                              var $135 = i$prime < 0;
                              if ($135) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              var $136 = i$prime >= len;
                              if ($136) {
                                  $tco_var_xs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)((i$prime - len | 0) + 1 | 0)(Data_Argonaut_Core.jsonNull));
                                  $tco_var_i$prime = i$prime;
                                  $copy_v$prime = v$prime;
                                  return;
                              };
                              $tco_done = true;
                              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Argonaut_Core.fromArray)(Data_Array.updateAt(i$prime)(v$prime)(xs));
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_xs, $tco_var_i$prime, $copy_v$prime);
                          };
                          return $tco_result;
                      };
                  };
              };
              var mergeArrs = function (a) {
                  return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(setArr(a)(v.value0))(cursorSet(v.value1)(v1)(Data_Maybe.fromMaybe(inferEmpty(v.value1))(Data_Array.index(a)(v.value0))));
              };
              var defaultArr = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Argonaut_Core.fromArray)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Function.flip(Data_Array.updateAt(v.value0))(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)(v.value0 + 1 | 0)(Data_Argonaut_Core.jsonNull)))(cursorSet(v.value1)(v1)(inferEmpty(v.value1))));
              return Data_Argonaut_Core.caseJsonArray(defaultArr)(mergeArrs);
          };
          throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 114, column 1 - line 114, column 57): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var fromPrims = function (lst) {
      var f = function (j) {
          return function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(j)(cursorSet(v.value0)(primToJson(v.value1)));
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($163) {
          return inferEmpty(Data_Tuple.fst($163));
      })(Data_List.head(lst)))(lst);
  };
  var cursorGet = function (v) {
      if (v instanceof JCursorTop) {
          return Data_Maybe.Just.create;
      };
      if (v instanceof JField) {
          return Data_Argonaut_Core.caseJsonObject(Data_Maybe.Nothing.value)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(cursorGet(v.value1))(Foreign_Object.lookup(v.value0)));
      };
      if (v instanceof JIndex) {
          return Data_Argonaut_Core.caseJsonArray(Data_Maybe.Nothing.value)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(cursorGet(v.value1))(function (v1) {
              return Data_Array.index(v1)(v.value0);
          }));
      };
      throw new Error("Failed pattern match at Data.Argonaut.JCursor (line 104, column 1 - line 104, column 47): " + [ v.constructor.name ]);
  };
  exports["JCursorTop"] = JCursorTop;
  exports["JField"] = JField;
  exports["JIndex"] = JIndex;
  exports["print"] = print;
  exports["JsonPrim"] = JsonPrim;
  exports["runJsonPrim"] = runJsonPrim;
  exports["primNull"] = primNull;
  exports["primBool"] = primBool;
  exports["primNum"] = primNum;
  exports["primStr"] = primStr;
  exports["primToJson"] = primToJson;
  exports["insideOut"] = insideOut;
  exports["downField"] = downField;
  exports["downIndex"] = downIndex;
  exports["cursorGet"] = cursorGet;
  exports["inferEmpty"] = inferEmpty;
  exports["cursorSet"] = cursorSet;
  exports["toPrims"] = toPrims;
  exports["fromPrims"] = fromPrims;
  exports["eqJCursor"] = eqJCursor;
  exports["ordJCursor"] = ordJCursor;
  exports["showJCursor"] = showJCursor;
  exports["semigroupJCursor"] = semigroupJCursor;
  exports["monoidJCursor"] = monoidJCursor;
  exports["encodeJsonJCursor"] = encodeJsonJCursor;
  exports["showJsonPrim"] = showJsonPrim;
  exports["decodeJsonJCursor"] = decodeJsonJCursor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Market"] = $PS["Data.Lens.Internal.Market"] || {};
  var exports = $PS["Data.Lens.Internal.Market"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];                
  var Market = (function () {
      function Market(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Market.create = function (value0) {
          return function (value1) {
              return new Market(value0, value1);
          };
      };
      return Market;
  })();
  var profunctorMarket = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Market(function ($19) {
                  return g(v.value0($19));
              }, (function () {
                  var $20 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(g);
                  return function ($21) {
                      return $20(v.value1(f($21)));
                  };
              })());
          };
      };
  });
  var functorMarket = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Market(function ($22) {
              return f(v.value0($22));
          }, (function () {
              var $23 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(f);
              return function ($24) {
                  return $23(v.value1($24));
              };
          })());
      };
  });
  var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
      return profunctorMarket;
  }, function (v) {
      return new Market(function ($25) {
          return Data_Either.Left.create(v.value0($25));
      }, Data_Either.either((function () {
          var $26 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Left.create);
          return function ($27) {
              return $26(v.value1($27));
          };
      })())(function ($28) {
          return Data_Either.Left.create(Data_Either.Right.create($28));
      }));
  }, function (v) {
      return new Market(function ($29) {
          return Data_Either.Right.create(v.value0($29));
      }, Data_Either.either(function ($30) {
          return Data_Either.Left.create(Data_Either.Left.create($30));
      })((function () {
          var $31 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Right.create);
          return function ($32) {
              return $31(v.value1($32));
          };
      })()));
  });
  exports["Market"] = Market;
  exports["functorMarket"] = functorMarket;
  exports["profunctorMarket"] = profunctorMarket;
  exports["choiceMarket"] = choiceMarket;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Costrong"] = $PS["Data.Profunctor.Costrong"] || {};
  var exports = $PS["Data.Profunctor.Costrong"];
  var Costrong = function (Profunctor0, unfirst, unsecond) {
      this.Profunctor0 = Profunctor0;
      this.unfirst = unfirst;
      this.unsecond = unsecond;
  };
  var unsecond = function (dict) {
      return dict.unsecond;
  };
  var unfirst = function (dict) {
      return dict.unfirst;
  };
  exports["unfirst"] = unfirst;
  exports["unsecond"] = unsecond;
  exports["Costrong"] = Costrong;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Tagged"] = $PS["Data.Lens.Internal.Tagged"] || {};
  var exports = $PS["Data.Lens.Internal.Tagged"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Closed = $PS["Data.Profunctor.Closed"];
  var Data_Profunctor_Costrong = $PS["Data.Profunctor.Costrong"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var Tagged = function (x) {
      return x;
  };
  var taggedProfunctor = new Data_Profunctor.Profunctor(function (v) {
      return function (g) {
          return function (v1) {
              return g(v1);
          };
      };
  });
  var taggedCostrong = new Data_Profunctor_Costrong.Costrong(function () {
      return taggedProfunctor;
  }, function (v) {
      return v.value0;
  }, function (v) {
      return v.value1;
  });
  var taggedClosed = new Data_Profunctor_Closed.Closed(function () {
      return taggedProfunctor;
  }, function (v) {
      return Data_Function["const"](v);
  });
  var taggedChoice = new Data_Profunctor_Choice.Choice(function () {
      return taggedProfunctor;
  }, function (v) {
      return new Data_Either.Left(v);
  }, function (v) {
      return new Data_Either.Right(v);
  });
  var newtypeTagged = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorTagged = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var foldableTagged = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return f(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return f(v)(b);
          };
      };
  });
  var traversableTagged = new Data_Traversable.Traversable(function () {
      return foldableTagged;
  }, function () {
      return functorTagged;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(f(v));
          };
      };
  });
  var eqTagged = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(x)(y);
          };
      });
  };
  var ordTagged = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqTagged(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(dictOrd)(x)(y);
          };
      });
  };
  var eq1Tagged = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqTagged(dictEq));
  });
  var ord1Tagged = new Data_Ord.Ord1(function () {
      return eq1Tagged;
  }, function (dictOrd) {
      return Data_Ord.compare(ordTagged(dictOrd));
  });
  exports["Tagged"] = Tagged;
  exports["newtypeTagged"] = newtypeTagged;
  exports["eqTagged"] = eqTagged;
  exports["eq1Tagged"] = eq1Tagged;
  exports["ordTagged"] = ordTagged;
  exports["ord1Tagged"] = ord1Tagged;
  exports["functorTagged"] = functorTagged;
  exports["taggedProfunctor"] = taggedProfunctor;
  exports["taggedChoice"] = taggedChoice;
  exports["taggedCostrong"] = taggedCostrong;
  exports["taggedClosed"] = taggedClosed;
  exports["foldableTagged"] = foldableTagged;
  exports["traversableTagged"] = traversableTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Exchange"] = $PS["Data.Lens.Internal.Exchange"] || {};
  var exports = $PS["Data.Lens.Internal.Exchange"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Exchange = (function () {
      function Exchange(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Exchange.create = function (value0) {
          return function (value1) {
              return new Exchange(value0, value1);
          };
      };
      return Exchange;
  })();
  var profunctorExchange = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Exchange(function ($11) {
                  return v.value0(f($11));
              }, function ($12) {
                  return g(v.value1($12));
              });
          };
      };
  });
  var functorExchange = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Exchange(v.value0, function ($13) {
              return f(v.value1($13));
          });
      };
  });
  exports["Exchange"] = Exchange;
  exports["functorExchange"] = functorExchange;
  exports["profunctorExchange"] = profunctorExchange;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Star = $PS["Data.Profunctor.Star"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderStar = function (dictApplicative) {
      return new Wander(function () {
          return Data_Profunctor_Star.choiceStar(dictApplicative);
      }, function () {
          return Data_Profunctor_Star.strongStar((dictApplicative.Apply0()).Functor0());
      }, function (t) {
          return function (v) {
              return t(dictApplicative)(v);
          };
      });
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF()()()()(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["Wander"] = Wander;
  exports["wanderFunction"] = wanderFunction;
  exports["wanderStar"] = wanderStar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Cochoice"] = $PS["Data.Profunctor.Cochoice"] || {};
  var exports = $PS["Data.Profunctor.Cochoice"];
  var Cochoice = function (Profunctor0, unleft, unright) {
      this.Profunctor0 = Profunctor0;
      this.unleft = unleft;
      this.unright = unright;
  };
  var unright = function (dict) {
      return dict.unright;
  };
  var unleft = function (dict) {
      return dict.unleft;
  };
  exports["unleft"] = unleft;
  exports["unright"] = unright;
  exports["Cochoice"] = Cochoice;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Const = $PS["Data.Const"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = $PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var semigroupForget = function (dictSemigroup) {
      return Data_Semigroup.semigroupFn(dictSemigroup);
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($24) {
                  return v1(f($24));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($25) {
          return v(Data_Tuple.fst($25));
      };
  }, function (v) {
      return function ($26) {
          return v(Data_Tuple.snd($26));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidForget = function (dictMonoid) {
      return Data_Monoid.monoidFn(dictMonoid);
  };
  var cochoiceForget = new Data_Profunctor_Cochoice.Cochoice(function () {
      return profunctorForget;
  }, function (v) {
      return function ($27) {
          return v(Data_Either.Left.create($27));
      };
  }, function (v) {
      return function ($28) {
          return v(Data_Either.Right.create($28));
      };
  });
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  var wanderForget = function (dictMonoid) {
      return new Data_Lens_Internal_Wander.Wander(function () {
          return choiceForget(dictMonoid);
      }, function () {
          return strongForget;
      }, function (f) {
          return function (v) {
              return Data_Newtype.alaF()()()()(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
          };
      });
  };
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["semigroupForget"] = semigroupForget;
  exports["monoidForget"] = monoidForget;
  exports["profunctorForget"] = profunctorForget;
  exports["choiceForget"] = choiceForget;
  exports["strongForget"] = strongForget;
  exports["cochoiceForget"] = cochoiceForget;
  exports["wanderForget"] = wanderForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Grating"] = $PS["Data.Lens.Internal.Grating"] || {};
  var exports = $PS["Data.Lens.Internal.Grating"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Closed = $PS["Data.Profunctor.Closed"];                
  var Grating = function (x) {
      return x;
  };
  var profunctorGrating = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return function (d) {
                  return g(v(function (k) {
                      return d(function ($6) {
                          return k(f($6));
                      });
                  }));
              };
          };
      };
  });
  var newtypeGrating = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var closedGrating = new Data_Profunctor_Closed.Closed(function () {
      return profunctorGrating;
  }, function (v) {
      return function (f) {
          return function (x) {
              return v(function (k) {
                  return f(function (g) {
                      return k(g(x));
                  });
              });
          };
      };
  });
  exports["Grating"] = Grating;
  exports["newtypeGrating"] = newtypeGrating;
  exports["profunctorGrating"] = profunctorGrating;
  exports["closedGrating"] = closedGrating;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Indexed"] = $PS["Data.Lens.Internal.Indexed"] || {};
  var exports = $PS["Data.Lens.Internal.Indexed"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Indexed = function (x) {
      return x;
  };
  var profunctorIndexed = function (dictProfunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Profunctor.dimap(dictProfunctor)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(f))(g)(v);
              };
          };
      });
  };
  var strongIndexed = function (dictStrong) {
      return new Data_Profunctor_Strong.Strong(function () {
          return profunctorIndexed(dictStrong.Profunctor0());
      }, function (v) {
          return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function (v1) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1.value0), v1.value1.value1);
          })(Data_Profunctor_Strong.first(dictStrong)(v)));
      }, function (v) {
          return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function (v1) {
              return new Data_Tuple.Tuple(v1.value1.value0, new Data_Tuple.Tuple(v1.value0, v1.value1.value1));
          })(Data_Profunctor_Strong.second(dictStrong)(v)));
      });
  };
  var newtypeIndexed = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var choiceIndexed = function (dictChoice) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorIndexed(dictChoice.Profunctor0());
      }, function (v) {
          return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function (v1) {
              return Data_Either.either((function () {
                  var $44 = Data_Tuple.Tuple.create(v1.value0);
                  return function ($45) {
                      return Data_Either.Left.create($44($45));
                  };
              })())(Data_Either.Right.create)(v1.value1);
          })(Data_Profunctor_Choice.left(dictChoice)(v)));
      }, function (v) {
          return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function (v1) {
              return Data_Either.either(Data_Either.Left.create)((function () {
                  var $46 = Data_Tuple.Tuple.create(v1.value0);
                  return function ($47) {
                      return Data_Either.Right.create($46($47));
                  };
              })())(v1.value1);
          })(Data_Profunctor_Choice.right(dictChoice)(v)));
      });
  };
  var wanderIndexed = function (dictWander) {
      return new Data_Lens_Internal_Wander.Wander(function () {
          return choiceIndexed(dictWander.Choice1());
      }, function () {
          return strongIndexed(dictWander.Strong0());
      }, function (trav) {
          return function (v) {
              return Indexed(Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                  return function (ia2fb) {
                      return function (v1) {
                          return trav(dictApplicative)((function () {
                              var $48 = Data_Tuple.Tuple.create(v1.value0);
                              return function ($49) {
                                  return ia2fb($48($49));
                              };
                          })())(v1.value1);
                      };
                  };
              })(v));
          };
      });
  };
  exports["Indexed"] = Indexed;
  exports["newtypeIndexed"] = newtypeIndexed;
  exports["profunctorIndexed"] = profunctorIndexed;
  exports["strongIndexed"] = strongIndexed;
  exports["choiceIndexed"] = choiceIndexed;
  exports["wanderIndexed"] = wanderIndexed;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Re"] = $PS["Data.Lens.Internal.Re"] || {};
  var exports = $PS["Data.Lens.Internal.Re"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = $PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Costrong = $PS["Data.Profunctor.Costrong"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var Re = function (x) {
      return x;
  };
  var profunctorRe = function (dictProfunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  var $25 = Data_Profunctor.dimap(dictProfunctor)(g)(f);
                  return function ($26) {
                      return v($25($26));
                  };
              };
          };
      });
  };
  var strongRe = function (dictStrong) {
      return new Data_Profunctor_Costrong.Costrong(function () {
          return profunctorRe(dictStrong.Profunctor0());
      }, function (v) {
          var $27 = Data_Profunctor_Strong.first(dictStrong);
          return function ($28) {
              return v($27($28));
          };
      }, function (v) {
          var $29 = Data_Profunctor_Strong.second(dictStrong);
          return function ($30) {
              return v($29($30));
          };
      });
  };
  var newtypeRe = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var costrongRe = function (dictCostrong) {
      return new Data_Profunctor_Strong.Strong(function () {
          return profunctorRe(dictCostrong.Profunctor0());
      }, function (v) {
          var $31 = Data_Profunctor_Costrong.unfirst(dictCostrong);
          return function ($32) {
              return v($31($32));
          };
      }, function (v) {
          var $33 = Data_Profunctor_Costrong.unsecond(dictCostrong);
          return function ($34) {
              return v($33($34));
          };
      });
  };
  var cochoiceRe = function (dictCochoice) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorRe(dictCochoice.Profunctor0());
      }, function (v) {
          var $35 = Data_Profunctor_Cochoice.unleft(dictCochoice);
          return function ($36) {
              return v($35($36));
          };
      }, function (v) {
          var $37 = Data_Profunctor_Cochoice.unright(dictCochoice);
          return function ($38) {
              return v($37($38));
          };
      });
  };
  var choiceRe = function (dictChoice) {
      return new Data_Profunctor_Cochoice.Cochoice(function () {
          return profunctorRe(dictChoice.Profunctor0());
      }, function (v) {
          var $39 = Data_Profunctor_Choice.left(dictChoice);
          return function ($40) {
              return v($39($40));
          };
      }, function (v) {
          var $41 = Data_Profunctor_Choice.right(dictChoice);
          return function ($42) {
              return v($41($42));
          };
      });
  };
  exports["Re"] = Re;
  exports["newtypeRe"] = newtypeRe;
  exports["profunctorRe"] = profunctorRe;
  exports["choiceRe"] = choiceRe;
  exports["cochoiceRe"] = cochoiceRe;
  exports["strongRe"] = strongRe;
  exports["costrongRe"] = costrongRe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Shop"] = $PS["Data.Lens.Internal.Shop"] || {};
  var exports = $PS["Data.Lens.Internal.Shop"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Shop = (function () {
      function Shop(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Shop.create = function (value0) {
          return function (value1) {
              return new Shop(value0, value1);
          };
      };
      return Shop;
  })();
  var profunctorShop = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Shop(function ($30) {
                  return v.value0(f($30));
              }, function (s) {
                  var $31 = v.value1(f(s));
                  return function ($32) {
                      return g($31($32));
                  };
              });
          };
      };
  });
  var strongShop = new Data_Profunctor_Strong.Strong(function () {
      return profunctorShop;
  }, function (v) {
      return new Shop(function (v1) {
          return v.value0(v1.value0);
      }, function (v1) {
          return function (b) {
              return new Data_Tuple.Tuple(v.value1(v1.value0)(b), v1.value1);
          };
      });
  }, function (v) {
      return new Shop(function (v1) {
          return v.value0(v1.value1);
      }, function (v1) {
          return function (b) {
              return new Data_Tuple.Tuple(v1.value0, v.value1(v1.value1)(b));
          };
      });
  });
  exports["Shop"] = Shop;
  exports["profunctorShop"] = profunctorShop;
  exports["strongShop"] = strongShop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Stall"] = $PS["Data.Lens.Internal.Stall"] || {};
  var exports = $PS["Data.Lens.Internal.Stall"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Stall = (function () {
      function Stall(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Stall.create = function (value0) {
          return function (value1) {
              return new Stall(value0, value1);
          };
      };
      return Stall;
  })();
  var profunctorStall = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Stall((function () {
                  var $61 = Data_Functor.map(Data_Functor.functorFn)(g);
                  return function ($62) {
                      return $61(v.value0(f($62)));
                  };
              })(), (function () {
                  var $63 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(g);
                  return function ($64) {
                      return $63(v.value1(f($64)));
                  };
              })());
          };
      };
  });
  var strongStall = new Data_Profunctor_Strong.Strong(function () {
      return profunctorStall;
  }, function (v) {
      return new Stall(function (v1) {
          return function (b) {
              return new Data_Tuple.Tuple(v.value0(v1.value0)(b), v1.value1);
          };
      }, function (v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (t) {
              return new Data_Tuple.Tuple(t, v1.value1);
          })(v.value1(v1.value0));
      });
  }, function (v) {
      return new Stall(function (v1) {
          return function (b) {
              return new Data_Tuple.Tuple(v1.value0, v.value0(v1.value1)(b));
          };
      }, function (v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Tuple.Tuple.create(v1.value0))(v.value1(v1.value1));
      });
  });
  var functorStall = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Stall((function () {
              var $65 = Data_Functor.map(Data_Functor.functorFn)(f);
              return function ($66) {
                  return $65(v.value0($66));
              };
          })(), (function () {
              var $67 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(f);
              return function ($68) {
                  return $67(v.value1($68));
              };
          })());
      };
  });
  var choiceStall = new Data_Profunctor_Choice.Choice(function () {
      return profunctorStall;
  }, function (v) {
      return new Stall(function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return function (b) {
                  return new Data_Either.Left(v.value0(v1.value0)(b));
              };
          };
          if (v1 instanceof Data_Either.Right) {
              return function (v2) {
                  return new Data_Either.Right(v1.value0);
              };
          };
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 36, column 8 - line 38, column 33): " + [ v1.constructor.name ]);
      }, function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Left.create)(v.value1(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Left(new Data_Either.Right(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 39, column 8 - line 41, column 34): " + [ v1.constructor.name ]);
      });
  }, function (v) {
      return new Stall(function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return function (v2) {
                  return new Data_Either.Left(v1.value0);
              };
          };
          if (v1 instanceof Data_Either.Right) {
              return function (b) {
                  return new Data_Either.Right(v.value0(v1.value0)(b));
              };
          };
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 45, column 8 - line 47, column 39): " + [ v1.constructor.name ]);
      }, function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return new Data_Either.Left(new Data_Either.Left(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Right.create)(v.value1(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 48, column 8 - line 50, column 36): " + [ v1.constructor.name ]);
      });
  });
  exports["Stall"] = Stall;
  exports["functorStall"] = functorStall;
  exports["profunctorStall"] = profunctorStall;
  exports["strongStall"] = strongStall;
  exports["choiceStall"] = choiceStall;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Types"] = $PS["Data.Lens.Types"] || {};
  var exports = $PS["Data.Lens.Types"];
  var Data_Lens_Internal_Exchange = $PS["Data.Lens.Internal.Exchange"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Grating = $PS["Data.Lens.Internal.Grating"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Market = $PS["Data.Lens.Internal.Market"];
  var Data_Lens_Internal_Re = $PS["Data.Lens.Internal.Re"];
  var Data_Lens_Internal_Shop = $PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Internal_Stall = $PS["Data.Lens.Internal.Stall"];
  var Data_Lens_Internal_Tagged = $PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  exports["Exchange"] = Data_Lens_Internal_Exchange.Exchange;
  exports["Forget"] = Data_Lens_Internal_Forget.Forget;
  exports["Indexed"] = Data_Lens_Internal_Indexed.Indexed;
  exports["Market"] = Data_Lens_Internal_Market.Market;
  exports["Re"] = Data_Lens_Internal_Re.Re;
  exports["Shop"] = Data_Lens_Internal_Shop.Shop;
  exports["Stall"] = Data_Lens_Internal_Stall.Stall;
  exports["Tagged"] = Data_Lens_Internal_Tagged.Tagged;
  exports["Wander"] = Data_Lens_Internal_Wander.Wander;
  exports["wander"] = Data_Lens_Internal_Wander.wander;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Prism"] = $PS["Data.Lens.Prism"] || {};
  var exports = $PS["Data.Lens.Prism"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Market = $PS["Data.Lens.Internal.Market"];
  var Data_Lens_Internal_Tagged = $PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];                
  var withPrism = function (l) {
      return function (f) {
          var v = l(new Data_Lens_Internal_Market.Market(Control_Category.identity(Control_Category.categoryFn), Data_Either.Right.create));
          return f(v.value0)(v.value1);
      };
  };
  var review = Data_Newtype.under()()(Data_Lens_Internal_Tagged.Tagged);
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  var prism$prime = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return prism(to)(function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
              })(dictChoice);
          };
      };
  };
  var nearly = function (x) {
      return function (f) {
          return function (dictChoice) {
              return prism$prime(Data_Function["const"](x))((function () {
                  var $14 = Control_Alternative.guard(Data_Maybe.alternativeMaybe);
                  return function ($15) {
                      return $14(f($15));
                  };
              })())(dictChoice);
          };
      };
  };
  var only = function (dictEq) {
      return function (x) {
          return function (dictChoice) {
              return nearly(x)(function (v) {
                  return Data_Eq.eq(dictEq)(v)(x);
              })(dictChoice);
          };
      };
  };
  var matching = function (l) {
      return withPrism(l)(function (v) {
          return function (f) {
              return f;
          };
      });
  };
  var is = function (dictHeytingAlgebra) {
      return function (l) {
          var $16 = Data_Either.either(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)))(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)));
          var $17 = matching(l);
          return function ($18) {
              return $16($17($18));
          };
      };
  };
  var isn$primet = function (dictHeytingAlgebra) {
      return function (l) {
          var $19 = Data_HeytingAlgebra.not(dictHeytingAlgebra);
          var $20 = is(dictHeytingAlgebra)(l);
          return function ($21) {
              return $19($20($21));
          };
      };
  };
  var clonePrism = function (l) {
      return function (dictChoice) {
          return withPrism(l)(function (x) {
              return function (y) {
                  return function (p) {
                      return prism(x)(y)(dictChoice)(p);
                  };
              };
          });
      };
  };
  exports["prism'"] = prism$prime;
  exports["prism"] = prism;
  exports["only"] = only;
  exports["nearly"] = nearly;
  exports["review"] = review;
  exports["is"] = is;
  exports["isn't"] = isn$primet;
  exports["matching"] = matching;
  exports["clonePrism"] = clonePrism;
  exports["withPrism"] = withPrism;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Prisms"] = $PS["Data.Argonaut.Prisms"] || {};
  var exports = $PS["Data.Argonaut.Prisms"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Prism = $PS["Data.Lens.Prism"];                
  var _String = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Argonaut_Core.fromString)(Data_Argonaut_Core.toString)(dictChoice);
  };
  var _Object = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Argonaut_Core.fromObject)(Data_Argonaut_Core.toObject)(dictChoice);
  };
  var _Number = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Argonaut_Core.fromNumber)(Data_Argonaut_Core.toNumber)(dictChoice);
  };
  var _Null = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Function["const"](Data_Argonaut_Core.jsonNull))(Data_Argonaut_Core.toNull)(dictChoice);
  };
  var _Boolean = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Argonaut_Core.fromBoolean)(Data_Argonaut_Core.toBoolean)(dictChoice);
  };
  var _Array = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Argonaut_Core.fromArray)(Data_Argonaut_Core.toArray)(dictChoice);
  };
  exports["_Null"] = _Null;
  exports["_Boolean"] = _Boolean;
  exports["_Number"] = _Number;
  exports["_String"] = _String;
  exports["_Array"] = _Array;
  exports["_Object"] = _Object;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Fold"] = $PS["Data.Lens.Fold"] || {};
  var exports = $PS["Data.Lens.Fold"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = $PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = $PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var unfolded = function (dictMonoid) {
      return function (f) {
          return function (p) {
              var go = (function () {
                  var $43 = Data_Maybe.maybe(Data_Monoid.mempty(dictMonoid))(function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Newtype.unwrap()(p)(v.value0))(go(v.value1));
                  });
                  return function ($44) {
                      return $43(f($44));
                  };
              })();
              return go;
          };
      };
  };
  var replicated = function (dictMonoid) {
      return function (i) {
          return function (v) {
              var go = function (v1) {
                  return function (x) {
                      if (v1 === 0) {
                          return Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid));
                      };
                      return Data_Semigroup.append(Data_Semigroup.semigroupFn(dictMonoid.Semigroup0()))(x)(go(v1 - 1 | 0)(x));
                  };
              };
              return go(i)(v);
          };
      };
  };
  var ifoldMapOf = function (p) {
      return function (f) {
          return Data_Newtype.unwrap()(p(Data_Lens_Internal_Indexed.Indexed(Data_Tuple.uncurry(f))));
      };
  };
  var ifoldlOf = function (p) {
      return function (f) {
          return function (r) {
              var $45 = Data_Function.flip(Data_Newtype.unwrap())(r);
              var $46 = Data_Newtype.unwrap();
              var $47 = ifoldMapOf(p)(function (i) {
                  var $49 = Data_Function.flip(f(i));
                  return function ($50) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($49($50)));
                  };
              });
              return function ($48) {
                  return $45($46($47($48)));
              };
          };
      };
  };
  var ifoldrOf = function (p) {
      return function (f) {
          return function (r) {
              var $51 = Data_Function.flip(Data_Newtype.unwrap())(r);
              var $52 = ifoldMapOf(p)(function (i) {
                  var $54 = f(i);
                  return function ($55) {
                      return Data_Monoid_Endo.Endo($54($55));
                  };
              });
              return function ($53) {
                  return $51($52($53));
              };
          };
      };
  };
  var itoListOf = function (p) {
      return ifoldrOf(p)(function (i) {
          return function (x) {
              return function (xs) {
                  return new Data_List_Types.Cons(new Data_Tuple.Tuple(i, x), xs);
              };
          };
      })(Data_List_Types.Nil.value);
  };
  var itraverseOf_ = function (dictApplicative) {
      return function (p) {
          return function (f) {
              return ifoldrOf(p)(function (i) {
                  return function (a) {
                      return function (fu) {
                          return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(i)(a)))(fu);
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var iforOf_ = function (dictApplicative) {
      var $56 = itraverseOf_(dictApplicative);
      return function ($57) {
          return Data_Function.flip($56($57));
      };
  };
  var ifindOf = function (p) {
      return function (f) {
          return ifoldrOf(p)(function (i) {
              return function (a) {
                  return Data_Maybe.maybe((function () {
                      var $37 = f(i)(a);
                      if ($37) {
                          return new Data_Maybe.Just(a);
                      };
                      return Data_Maybe.Nothing.value;
                  })())(Data_Maybe.Just.create);
              };
          })(Data_Maybe.Nothing.value);
      };
  };
  var ianyOf = function (dictHeytingAlgebra) {
      return function (p) {
          return function (f) {
              var $58 = Data_Newtype.unwrap();
              var $59 = ifoldMapOf(p)(function (i) {
                  var $61 = f(i);
                  return function ($62) {
                      return Data_Monoid_Disj.Disj($61($62));
                  };
              });
              return function ($60) {
                  return $58($59($60));
              };
          };
      };
  };
  var iallOf = function (dictHeytingAlgebra) {
      return function (p) {
          return function (f) {
              var $63 = Data_Newtype.unwrap();
              var $64 = ifoldMapOf(p)(function (i) {
                  var $66 = f(i);
                  return function ($67) {
                      return Data_Monoid_Conj.Conj($66($67));
                  };
              });
              return function ($65) {
                  return $63($64($65));
              };
          };
      };
  };
  var folded = function (dictMonoid) {
      return function (dictFoldable) {
          return function (v) {
              return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(v);
          };
      };
  };
  var foldMapOf = Data_Newtype.under()()(Data_Lens_Internal_Forget.Forget);
  var foldOf = function (p) {
      return foldMapOf(p)(Control_Category.identity(Control_Category.categoryFn));
  };
  var foldlOf = function (p) {
      return function (f) {
          return function (r) {
              var $68 = Data_Function.flip(Data_Newtype.unwrap())(r);
              var $69 = Data_Newtype.unwrap();
              var $70 = foldMapOf(p)((function () {
                  var $72 = Data_Function.flip(f);
                  return function ($73) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($72($73)));
                  };
              })());
              return function ($71) {
                  return $68($69($70($71)));
              };
          };
      };
  };
  var foldrOf = function (p) {
      return function (f) {
          return function (r) {
              var $74 = Data_Function.flip(Data_Newtype.unwrap())(r);
              var $75 = foldMapOf(p)(function ($77) {
                  return Data_Monoid_Endo.Endo(f($77));
              });
              return function ($76) {
                  return $74($75($76));
              };
          };
      };
  };
  var maximumOf = function (dictOrd) {
      return function (p) {
          var max = function (a) {
              return function (b) {
                  var $39 = Data_Ord.greaterThan(dictOrd)(a)(b);
                  if ($39) {
                      return a;
                  };
                  return b;
              };
          };
          return foldrOf(p)(function (a) {
              var $78 = Data_Maybe.maybe(a)(max(a));
              return function ($79) {
                  return Data_Maybe.Just.create($78($79));
              };
          })(Data_Maybe.Nothing.value);
      };
  };
  var minimumOf = function (dictOrd) {
      return function (p) {
          var min = function (a) {
              return function (b) {
                  var $40 = Data_Ord.lessThan(dictOrd)(a)(b);
                  if ($40) {
                      return a;
                  };
                  return b;
              };
          };
          return foldrOf(p)(function (a) {
              var $80 = Data_Maybe.maybe(a)(min(a));
              return function ($81) {
                  return Data_Maybe.Just.create($80($81));
              };
          })(Data_Maybe.Nothing.value);
      };
  };
  var toListOf = function (p) {
      return foldrOf(p)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var toArrayOf = function (p) {
      var $82 = Data_Array.fromFoldable(Data_List_Types.foldableList);
      var $83 = toListOf(p);
      return function ($84) {
          return $82($83($84));
      };
  };
  var toArrayOfOn = function (s) {
      return function (p) {
          return toArrayOf(p)(s);
      };
  };
  var toListOfOn = function (s) {
      return function (p) {
          return toListOf(p)(s);
      };
  };
  var traverseOf_ = function (dictApplicative) {
      return function (p) {
          return function (f) {
              return foldrOf(p)(function (a) {
                  return function (fu) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(a)))(fu);
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var has = function (dictHeytingAlgebra) {
      return function (p) {
          var $85 = Data_Newtype.unwrap();
          var $86 = foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)));
          return function ($87) {
              return $85($86($87));
          };
      };
  };
  var hasn$primet = function (dictHeytingAlgebra) {
      return function (p) {
          var $88 = Data_Newtype.unwrap();
          var $89 = foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)));
          return function ($90) {
              return $88($89($90));
          };
      };
  };
  var lastOf = function (p) {
      var $91 = Data_Newtype.unwrap();
      var $92 = foldMapOf(p)(function ($94) {
          return Data_Maybe_Last.Last(Data_Maybe.Just.create($94));
      });
      return function ($93) {
          return $91($92($93));
      };
  };
  var lengthOf = function (p) {
      var $95 = Data_Newtype.unwrap();
      var $96 = foldMapOf(p)(Data_Function["const"](1));
      return function ($97) {
          return $95($96($97));
      };
  };
  var preview = function (p) {
      var $98 = Data_Newtype.unwrap();
      var $99 = foldMapOf(p)(function ($101) {
          return Data_Maybe_First.First(Data_Maybe.Just.create($101));
      });
      return function ($100) {
          return $98($99($100));
      };
  };
  var previewOn = function (s) {
      return function (p) {
          return preview(p)(s);
      };
  };
  var productOf = function (dictSemiring) {
      return function (p) {
          var $102 = Data_Newtype.unwrap();
          var $103 = foldMapOf(p)(Data_Monoid_Multiplicative.Multiplicative);
          return function ($104) {
              return $102($103($104));
          };
      };
  };
  var sequenceOf_ = function (dictApplicative) {
      return function (p) {
          var $105 = Data_Function.flip(Data_Newtype.unwrap())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          var $106 = foldMapOf(p)(function (f) {
              return function (v) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f)(v);
              };
          });
          return function ($107) {
              return $105($106($107));
          };
      };
  };
  var sumOf = function (dictSemiring) {
      return function (p) {
          var $108 = Data_Newtype.unwrap();
          var $109 = foldMapOf(p)(Data_Monoid_Additive.Additive);
          return function ($110) {
              return $108($109($110));
          };
      };
  };
  var firstOf = function (p) {
      var $111 = Data_Newtype.unwrap();
      var $112 = foldMapOf(p)(function ($114) {
          return Data_Maybe_First.First(Data_Maybe.Just.create($114));
      });
      return function ($113) {
          return $111($112($113));
      };
  };
  var findOf = function (p) {
      return function (f) {
          return foldrOf(p)(function (a) {
              return Data_Maybe.maybe((function () {
                  var $41 = f(a);
                  if ($41) {
                      return new Data_Maybe.Just(a);
                  };
                  return Data_Maybe.Nothing.value;
              })())(Data_Maybe.Just.create);
          })(Data_Maybe.Nothing.value);
      };
  };
  var filtered = function (dictChoice) {
      return function (f) {
          var $115 = Data_Profunctor.dimap(dictChoice.Profunctor0())(function (x) {
              var $42 = f(x);
              if ($42) {
                  return new Data_Either.Right(x);
              };
              return new Data_Either.Left(x);
          })(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)));
          var $116 = Data_Profunctor_Choice.right(dictChoice);
          return function ($117) {
              return $115($116($117));
          };
      };
  };
  var anyOf = function (dictHeytingAlgebra) {
      return function (p) {
          return function (f) {
              var $118 = Data_Newtype.unwrap();
              var $119 = foldMapOf(p)(function ($121) {
                  return Data_Monoid_Disj.Disj(f($121));
              });
              return function ($120) {
                  return $118($119($120));
              };
          };
      };
  };
  var elemOf = function (dictEq) {
      return function (p) {
          return function (a) {
              return anyOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                  return Data_Eq.eq(dictEq)(v)(a);
              });
          };
      };
  };
  var orOf = function (dictHeytingAlgebra) {
      return function (p) {
          return anyOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var allOf = function (dictHeytingAlgebra) {
      return function (p) {
          return function (f) {
              var $122 = Data_Newtype.unwrap();
              var $123 = foldMapOf(p)(function ($125) {
                  return Data_Monoid_Conj.Conj(f($125));
              });
              return function ($124) {
                  return $122($123($124));
              };
          };
      };
  };
  var andOf = function (dictHeytingAlgebra) {
      return function (p) {
          return allOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var notElemOf = function (dictEq) {
      return function (p) {
          return function (a) {
              return allOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                  return Data_Eq.notEq(dictEq)(v)(a);
              });
          };
      };
  };
  exports["previewOn"] = previewOn;
  exports["toListOfOn"] = toListOfOn;
  exports["preview"] = preview;
  exports["foldOf"] = foldOf;
  exports["foldMapOf"] = foldMapOf;
  exports["foldrOf"] = foldrOf;
  exports["foldlOf"] = foldlOf;
  exports["toListOf"] = toListOf;
  exports["firstOf"] = firstOf;
  exports["lastOf"] = lastOf;
  exports["maximumOf"] = maximumOf;
  exports["minimumOf"] = minimumOf;
  exports["allOf"] = allOf;
  exports["anyOf"] = anyOf;
  exports["andOf"] = andOf;
  exports["orOf"] = orOf;
  exports["elemOf"] = elemOf;
  exports["notElemOf"] = notElemOf;
  exports["sumOf"] = sumOf;
  exports["productOf"] = productOf;
  exports["lengthOf"] = lengthOf;
  exports["findOf"] = findOf;
  exports["sequenceOf_"] = sequenceOf_;
  exports["traverseOf_"] = traverseOf_;
  exports["has"] = has;
  exports["hasn't"] = hasn$primet;
  exports["replicated"] = replicated;
  exports["filtered"] = filtered;
  exports["folded"] = folded;
  exports["unfolded"] = unfolded;
  exports["toArrayOf"] = toArrayOf;
  exports["toArrayOfOn"] = toArrayOfOn;
  exports["ifoldMapOf"] = ifoldMapOf;
  exports["ifoldrOf"] = ifoldrOf;
  exports["ifoldlOf"] = ifoldlOf;
  exports["iallOf"] = iallOf;
  exports["ianyOf"] = ianyOf;
  exports["itoListOf"] = itoListOf;
  exports["itraverseOf_"] = itraverseOf_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Traversals"] = $PS["Data.Argonaut.Traversals"] || {};
  var exports = $PS["Data.Argonaut.Traversals"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];                
  var _JsonString = function (dictWander) {
      var $6 = Control_Category.identity(Control_Category.categoryFn);
      var $7 = Data_Lens_Fold.filtered(dictWander.Choice1())(Data_Argonaut_Core.isString);
      return function ($8) {
          return $6($7($8));
      };
  };
  var _JsonObject = function (dictWander) {
      var $9 = Control_Category.identity(Control_Category.categoryFn);
      var $10 = Data_Lens_Fold.filtered(dictWander.Choice1())(Data_Argonaut_Core.isObject);
      return function ($11) {
          return $9($10($11));
      };
  };
  var _JsonNumber = function (dictWander) {
      var $12 = Control_Category.identity(Control_Category.categoryFn);
      var $13 = Data_Lens_Fold.filtered(dictWander.Choice1())(Data_Argonaut_Core.isNumber);
      return function ($14) {
          return $12($13($14));
      };
  };
  var _JsonNull = function (dictWander) {
      var $15 = Control_Category.identity(Control_Category.categoryFn);
      var $16 = Data_Lens_Fold.filtered(dictWander.Choice1())(Data_Argonaut_Core.isNull);
      return function ($17) {
          return $15($16($17));
      };
  };
  var _JsonBoolean = function (dictWander) {
      var $18 = Control_Category.identity(Control_Category.categoryFn);
      var $19 = Data_Lens_Fold.filtered(dictWander.Choice1())(Data_Argonaut_Core.isBoolean);
      return function ($20) {
          return $18($19($20));
      };
  };
  var _JsonArray = function (dictWander) {
      var $21 = Control_Category.identity(Control_Category.categoryFn);
      var $22 = Data_Lens_Fold.filtered(dictWander.Choice1())(Data_Argonaut_Core.isArray);
      return function ($23) {
          return $21($22($23));
      };
  };
  exports["_JsonNull"] = _JsonNull;
  exports["_JsonBoolean"] = _JsonBoolean;
  exports["_JsonNumber"] = _JsonNumber;
  exports["_JsonString"] = _JsonString;
  exports["_JsonArray"] = _JsonArray;
  exports["_JsonObject"] = _JsonObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut"] = $PS["Data.Argonaut"] || {};
  var exports = $PS["Data.Argonaut"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = $PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Encode = $PS["Data.Argonaut.Encode"];
  var Data_Argonaut_JCursor = $PS["Data.Argonaut.JCursor"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Prisms = $PS["Data.Argonaut.Prisms"];
  var Data_Argonaut_Traversals = $PS["Data.Argonaut.Traversals"];
  exports["caseJson"] = Data_Argonaut_Core.caseJson;
  exports["caseJsonArray"] = Data_Argonaut_Core.caseJsonArray;
  exports["caseJsonBoolean"] = Data_Argonaut_Core.caseJsonBoolean;
  exports["caseJsonNull"] = Data_Argonaut_Core.caseJsonNull;
  exports["caseJsonNumber"] = Data_Argonaut_Core.caseJsonNumber;
  exports["caseJsonObject"] = Data_Argonaut_Core.caseJsonObject;
  exports["caseJsonString"] = Data_Argonaut_Core.caseJsonString;
  exports["fromArray"] = Data_Argonaut_Core.fromArray;
  exports["fromBoolean"] = Data_Argonaut_Core.fromBoolean;
  exports["fromNumber"] = Data_Argonaut_Core.fromNumber;
  exports["fromObject"] = Data_Argonaut_Core.fromObject;
  exports["fromString"] = Data_Argonaut_Core.fromString;
  exports["isArray"] = Data_Argonaut_Core.isArray;
  exports["isBoolean"] = Data_Argonaut_Core.isBoolean;
  exports["isNull"] = Data_Argonaut_Core.isNull;
  exports["isNumber"] = Data_Argonaut_Core.isNumber;
  exports["isObject"] = Data_Argonaut_Core.isObject;
  exports["isString"] = Data_Argonaut_Core.isString;
  exports["jsonEmptyArray"] = Data_Argonaut_Core.jsonEmptyArray;
  exports["jsonEmptyObject"] = Data_Argonaut_Core.jsonEmptyObject;
  exports["jsonEmptyString"] = Data_Argonaut_Core.jsonEmptyString;
  exports["jsonFalse"] = Data_Argonaut_Core.jsonFalse;
  exports["jsonNull"] = Data_Argonaut_Core.jsonNull;
  exports["jsonSingletonArray"] = Data_Argonaut_Core.jsonSingletonArray;
  exports["jsonSingletonObject"] = Data_Argonaut_Core.jsonSingletonObject;
  exports["jsonTrue"] = Data_Argonaut_Core.jsonTrue;
  exports["jsonZero"] = Data_Argonaut_Core.jsonZero;
  exports["stringify"] = Data_Argonaut_Core.stringify;
  exports["stringifyWithIndent"] = Data_Argonaut_Core.stringifyWithIndent;
  exports["toArray"] = Data_Argonaut_Core.toArray;
  exports["toBoolean"] = Data_Argonaut_Core.toBoolean;
  exports["toNull"] = Data_Argonaut_Core.toNull;
  exports["toNumber"] = Data_Argonaut_Core.toNumber;
  exports["toObject"] = Data_Argonaut_Core.toObject;
  exports["toString"] = Data_Argonaut_Core.toString;
  exports["AtIndex"] = Data_Argonaut_Decode.AtIndex;
  exports["AtKey"] = Data_Argonaut_Decode.AtKey;
  exports["MissingValue"] = Data_Argonaut_Decode.MissingValue;
  exports["Named"] = Data_Argonaut_Decode.Named;
  exports["TypeMismatch"] = Data_Argonaut_Decode.TypeMismatch;
  exports["UnexpectedValue"] = Data_Argonaut_Decode.UnexpectedValue;
  exports["DecodeJson"] = Data_Argonaut_Decode.DecodeJson;
  exports["decodeJson"] = Data_Argonaut_Decode.decodeJson;
  exports["defaultField"] = Data_Argonaut_Decode.defaultField;
  exports["getField"] = Data_Argonaut_Decode.getField;
  exports["getFieldOptional"] = Data_Argonaut_Decode.getFieldOptional;
  exports["getFieldOptional'"] = Data_Argonaut_Decode["getFieldOptional'"];
  exports["parseJson"] = Data_Argonaut_Decode.parseJson;
  exports["printJsonDecodeError"] = Data_Argonaut_Decode.printJsonDecodeError;
  exports["EncodeJson"] = Data_Argonaut_Encode.EncodeJson;
  exports["assoc"] = Data_Argonaut_Encode.assoc;
  exports["assocOptional"] = Data_Argonaut_Encode.assocOptional;
  exports["encodeJson"] = Data_Argonaut_Encode.encodeJson;
  exports["extend"] = Data_Argonaut_Encode.extend;
  exports["extendOptional"] = Data_Argonaut_Encode.extendOptional;
  exports["JCursorTop"] = Data_Argonaut_JCursor.JCursorTop;
  exports["JField"] = Data_Argonaut_JCursor.JField;
  exports["JIndex"] = Data_Argonaut_JCursor.JIndex;
  exports["JsonPrim"] = Data_Argonaut_JCursor.JsonPrim;
  exports["cursorGet"] = Data_Argonaut_JCursor.cursorGet;
  exports["cursorSet"] = Data_Argonaut_JCursor.cursorSet;
  exports["downField"] = Data_Argonaut_JCursor.downField;
  exports["downIndex"] = Data_Argonaut_JCursor.downIndex;
  exports["fromPrims"] = Data_Argonaut_JCursor.fromPrims;
  exports["inferEmpty"] = Data_Argonaut_JCursor.inferEmpty;
  exports["insideOut"] = Data_Argonaut_JCursor.insideOut;
  exports["primBool"] = Data_Argonaut_JCursor.primBool;
  exports["primNull"] = Data_Argonaut_JCursor.primNull;
  exports["primNum"] = Data_Argonaut_JCursor.primNum;
  exports["primStr"] = Data_Argonaut_JCursor.primStr;
  exports["primToJson"] = Data_Argonaut_JCursor.primToJson;
  exports["print"] = Data_Argonaut_JCursor.print;
  exports["runJsonPrim"] = Data_Argonaut_JCursor.runJsonPrim;
  exports["toPrims"] = Data_Argonaut_JCursor.toPrims;
  exports["jsonParser"] = Data_Argonaut_Parser.jsonParser;
  exports["_Array"] = Data_Argonaut_Prisms["_Array"];
  exports["_Boolean"] = Data_Argonaut_Prisms["_Boolean"];
  exports["_Null"] = Data_Argonaut_Prisms["_Null"];
  exports["_Number"] = Data_Argonaut_Prisms["_Number"];
  exports["_Object"] = Data_Argonaut_Prisms["_Object"];
  exports["_String"] = Data_Argonaut_Prisms["_String"];
  exports["_JsonArray"] = Data_Argonaut_Traversals["_JsonArray"];
  exports["_JsonBoolean"] = Data_Argonaut_Traversals["_JsonBoolean"];
  exports["_JsonNull"] = Data_Argonaut_Traversals["_JsonNull"];
  exports["_JsonNumber"] = Data_Argonaut_Traversals["_JsonNumber"];
  exports["_JsonObject"] = Data_Argonaut_Traversals["_JsonObject"];
  exports["_JsonString"] = Data_Argonaut_Traversals["_JsonString"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Char.Gen"] = $PS["Data.Char.Gen"] || {};
  var exports = $PS["Data.Char.Gen"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];                
  var genUnicodeChar = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(65536));
  };
  var genDigitChar = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(48)(57));
  };
  var genAsciiChar$prime = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(127));
  };
  var genAsciiChar = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(32)(127));
  };
  var genAlphaUppercase = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(65)(90));
  };
  var genAlphaLowercase = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(97)(122));
  };
  var genAlpha = function (dictMonadGen) {
      return Control_Monad_Gen.oneOf(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(genAlphaLowercase(dictMonadGen), [ genAlphaUppercase(dictMonadGen) ]));
  };
  exports["genUnicodeChar"] = genUnicodeChar;
  exports["genAsciiChar"] = genAsciiChar;
  exports["genAsciiChar'"] = genAsciiChar$prime;
  exports["genDigitChar"] = genDigitChar;
  exports["genAlpha"] = genAlpha;
  exports["genAlphaLowercase"] = genAlphaLowercase;
  exports["genAlphaUppercase"] = genAlphaUppercase;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Gen"] = $PS["Data.String.Gen"] || {};
  var exports = $PS["Data.String.Gen"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Char_Gen = $PS["Data.Char.Gen"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var genString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (genChar) {
              return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                  return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(1)(Data_Ord.max(Data_Ord.ordInt)(1)(size)))(function (newSize) {
                      return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](newSize))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_String_CodeUnits.fromCharArray)(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(genChar)));
                  });
              });
          };
      };
  };
  var genUnicodeString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genUnicodeChar(dictMonadGen));
      };
  };
  var genDigitString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genDigitChar(dictMonadGen));
      };
  };
  var genAsciiString$prime = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen["genAsciiChar'"](dictMonadGen));
      };
  };
  var genAsciiString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAsciiChar(dictMonadGen));
      };
  };
  var genAlphaUppercaseString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlphaUppercase(dictMonadGen));
      };
  };
  var genAlphaString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlpha(dictMonadGen));
      };
  };
  var genAlphaLowercaseString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlphaLowercase(dictMonadGen));
      };
  };
  exports["genString"] = genString;
  exports["genUnicodeString"] = genUnicodeString;
  exports["genAsciiString"] = genAsciiString;
  exports["genAsciiString'"] = genAsciiString$prime;
  exports["genDigitString"] = genDigitString;
  exports["genAlphaString"] = genAlphaString;
  exports["genAlphaLowercaseString"] = genAlphaLowercaseString;
  exports["genAlphaUppercaseString"] = genAlphaUppercaseString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.Gen"] = $PS["Data.Argonaut.Gen"] || {};
  var exports = $PS["Data.Argonaut.Gen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_Gen = $PS["Data.String.Gen"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var genJson = function (dictMonadGen) {
      return function (dictMonadRec) {
          return function (dictLazy) {
              var genJString = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromString)(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen));
              var genJNumber = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromNumber)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(-1000000.0)(1000000.0));
              var genJBoolean = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromBoolean)(Control_Monad_Gen_Class.chooseBool(dictMonadGen));
              var genLeaf = Control_Monad_Gen.oneOf(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Argonaut_Core.jsonNull), [ genJBoolean, genJNumber, genJString ]));
              var genJArray = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromArray)(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(Control_Lazy.defer(dictLazy)(function (v) {
                  return genJson(dictMonadGen)(dictMonadRec)(dictLazy);
              })));
              var extendJObj = function (obj) {
                  return function (k) {
                      return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(genJson(dictMonadGen)(dictMonadRec)(dictLazy))(function (v) {
                          return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(k)(v))((function () {
                              var $6 = Foreign_Object.insert(k)(v);
                              return function ($7) {
                                  return Data_Argonaut_Core.fromObject($6($7));
                              };
                          })())(obj));
                      });
                  };
              };
              var genJObject = Control_Bind.bindFlipped((dictMonadGen.Monad0()).Bind1())(Data_Array.foldM(dictMonadGen.Monad0())(extendJObj)(Data_Argonaut_Core.jsonEmptyObject))(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen)));
              var genJson$prime = function (size) {
                  if (size > 1) {
                      return Control_Monad_Gen_Class.resize(dictMonadGen)(function (v) {
                          return v - 1 | 0;
                      })(Control_Monad_Gen.choose(dictMonadGen)(genJArray)(genJObject));
                  };
                  if (Data_Boolean.otherwise) {
                      return genLeaf;
                  };
                  throw new Error("Failed pattern match at Data.Argonaut.Gen (line 20, column 3 - line 20, column 30): " + [ size.constructor.name ]);
              };
              return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Ord.min(Data_Ord.ordInt)(5))(Control_Monad_Gen_Class.sized(dictMonadGen)(genJson$prime));
          };
      };
  };
  exports["genJson"] = genJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Argonaut.JCursor.Gen"] = $PS["Data.Argonaut.JCursor.Gen"] || {};
  var exports = $PS["Data.Argonaut.JCursor.Gen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Argonaut_JCursor = $PS["Data.Argonaut.JCursor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_Gen = $PS["Data.String.Gen"];                
  var genJCursor = function (dictMonadGen) {
      return function (dictMonadRec) {
          return function (dictLazy) {
              var genIndex = Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_JCursor.JIndex.create)(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(1000)))(Control_Lazy.defer(dictLazy)(function (v) {
                  return genJCursor(dictMonadGen)(dictMonadRec)(dictLazy);
              }));
              var genField = Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_JCursor.JField.create)(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen)))(Control_Lazy.defer(dictLazy)(function (v) {
                  return genJCursor(dictMonadGen)(dictMonadRec)(dictLazy);
              }));
              var genJCursor$prime = function (size) {
                  if (size > 0) {
                      return Control_Monad_Gen_Class.resize(dictMonadGen)(function (v) {
                          return v - 1 | 0;
                      })(Control_Monad_Gen.choose(dictMonadGen)(genField)(genIndex));
                  };
                  if (Data_Boolean.otherwise) {
                      return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Argonaut_JCursor.JCursorTop.value);
                  };
                  throw new Error("Failed pattern match at Data.Argonaut.JCursor.Gen (line 16, column 3 - line 18, column 34): " + [ size.constructor.name ]);
              };
              return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Ord.min(Data_Ord.ordInt)(10))(Control_Monad_Gen_Class.sized(dictMonadGen)(genJCursor$prime));
          };
      };
  };
  exports["genJCursor"] = genJCursor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.Partial"] = $PS["Data.Array.Partial"] || {};
  var exports = $PS["Data.Array.Partial"];
  var Data_Array = $PS["Data.Array"];                
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS);
(function(exports) {
  "use strict";

  exports.peekImpl = function (i) {
    return function (xs) {
      return function () {
        return xs[i];
      };
    };
  };

  exports.pokeImpl = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          xs[i] = a;
        };
      };
    };
  };
})(PS["Data.Array.ST.Partial"] = PS["Data.Array.ST.Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.ST.Partial"] = $PS["Data.Array.ST.Partial"] || {};
  var exports = $PS["Data.Array.ST.Partial"];
  var $foreign = $PS["Data.Array.ST.Partial"];
  var poke = function (dictPartial) {
      return $foreign.pokeImpl;
  };
  var peek = function (dictPartial) {
      return $foreign.peekImpl;
  };
  exports["peek"] = peek;
  exports["poke"] = poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bifoldable"] = $PS["Data.Bifoldable"] || {};
  var exports = $PS["Data.Bifoldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = $PS["Data.Monoid.Endo"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)((function () {
                      var $147 = Control_Apply.applySecond(dictApplicative.Apply0());
                      return function ($148) {
                          return $147(f($148));
                      };
                  })())((function () {
                      var $149 = Control_Apply.applySecond(dictApplicative.Apply0());
                      return function ($150) {
                          return $149(g($150));
                      };
                  })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldableTuple = new Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bifoldableJoker = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldableEither = new Bifoldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return v(v2.value0);
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return v1(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return v(z)(v2.value0);
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return v1(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return v(v2.value0)(z);
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return v1(v2.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bifoldableConst = new Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return function (v1) {
                  return f(v1);
              };
          };
      };
  }, function (f) {
      return function (v) {
          return function (z) {
              return function (v1) {
                  return f(z)(v1);
              };
          };
      };
  }, function (f) {
      return function (v) {
          return function (z) {
              return function (v1) {
                  return f(v1)(z);
              };
          };
      };
  });
  var bifoldableClown = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)((function () {
                      var $151 = Data_Semigroup.append(dictMonoid.Semigroup0());
                      return function ($152) {
                          return $151(f($152));
                      };
                  })())((function () {
                      var $153 = Data_Semigroup.append(dictMonoid.Semigroup0());
                      return function ($154) {
                          return $153(g($154));
                      };
                  })())(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldl(dictBifoldable)(function (m) {
                      return function (a) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                      };
                  })(function (m) {
                      return function (b) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                      };
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldableFlip = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap()(Data_Newtype.unwrap()(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                          var $155 = Data_Function.flip(f);
                          return function ($156) {
                              return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($155($156)));
                          };
                      })())((function () {
                          var $157 = Data_Function.flip(g);
                          return function ($158) {
                              return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($157($158)));
                          };
                      })())(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap()(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($159) {
                          return Data_Monoid_Endo.Endo(f($159));
                      })(function ($160) {
                          return Data_Monoid_Endo.Endo(g($160));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifoldableProduct2 = function (dictBifoldable) {
      return function (dictBifoldable1) {
          return new Bifoldable(function (dictMonoid) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldlDefault(bifoldableProduct2(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldrDefault(bifoldableProduct2(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          });
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  var $161 = Data_Newtype.unwrap();
                  var $162 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($164) {
                      return Data_Monoid_Disj.Disj(p($164));
                  })(function ($165) {
                      return Data_Monoid_Disj.Disj(q($165));
                  });
                  return function ($163) {
                      return $161($162($163));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  var $166 = Data_Newtype.unwrap();
                  var $167 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($169) {
                      return Data_Monoid_Conj.Conj(p($169));
                  })(function ($170) {
                      return Data_Monoid_Conj.Conj(q($170));
                  });
                  return function ($168) {
                      return $166($167($168));
                  };
              };
          };
      };
  };
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;
  exports["Bifoldable"] = Bifoldable;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifold"] = bifold;
  exports["bitraverse_"] = bitraverse_;
  exports["bifor_"] = bifor_;
  exports["bisequence_"] = bisequence_;
  exports["biany"] = biany;
  exports["biall"] = biall;
  exports["bifoldableClown"] = bifoldableClown;
  exports["bifoldableJoker"] = bifoldableJoker;
  exports["bifoldableFlip"] = bifoldableFlip;
  exports["bifoldableProduct2"] = bifoldableProduct2;
  exports["bifoldableEither"] = bifoldableEither;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["bifoldableConst"] = bifoldableConst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bifunctor.Join"] = $PS["Data.Bifunctor.Join"] || {};
  var exports = $PS["Data.Bifunctor.Join"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Biapplicative = $PS["Control.Biapplicative"];
  var Control_Biapply = $PS["Control.Biapply"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];                
  var Join = function (x) {
      return x;
  };
  var showJoin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Join " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoin = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoin = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqJoin = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoin = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(v);
          };
      });
  };
  var biapplyJoin = function (dictBiapply) {
      return new Control_Apply.Apply(function () {
          return bifunctorJoin(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeJoin = function (dictBiapplicative) {
      return new Control_Applicative.Applicative(function () {
          return biapplyJoin(dictBiapplicative.Biapply0());
      }, function (a) {
          return Control_Biapplicative.bipure(dictBiapplicative)(a)(a);
      });
  };
  exports["Join"] = Join;
  exports["newtypeJoin"] = newtypeJoin;
  exports["eqJoin"] = eqJoin;
  exports["ordJoin"] = ordJoin;
  exports["showJoin"] = showJoin;
  exports["bifunctorJoin"] = bifunctorJoin;
  exports["biapplyJoin"] = biapplyJoin;
  exports["biapplicativeJoin"] = biapplicativeJoin;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Clown"] = $PS["Data.Functor.Clown"] || {};
  var exports = $PS["Data.Functor.Clown"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Biapplicative = $PS["Control.Biapplicative"];
  var Control_Biapply = $PS["Control.Biapply"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Show = $PS["Data.Show"];                
  var Clown = function (x) {
      return x;
  };
  var showClown = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var profunctorClown = function (dictContravariant) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Functor_Contravariant.cmap(dictContravariant)(f)(v);
              };
          };
      });
  };
  var ordClown = function (dictOrd) {
      return dictOrd;
  };
  var newtypeClown = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var hoistClown = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorClown = new Data_Functor.Functor(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var eqClown = function (dictEq) {
      return dictEq;
  };
  var bifunctorClown = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(f)(v1);
              };
          };
      });
  };
  var biapplyClown = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorClown(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeClown = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyClown(dictApplicative.Apply0());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  exports["Clown"] = Clown;
  exports["hoistClown"] = hoistClown;
  exports["newtypeClown"] = newtypeClown;
  exports["eqClown"] = eqClown;
  exports["ordClown"] = ordClown;
  exports["showClown"] = showClown;
  exports["functorClown"] = functorClown;
  exports["bifunctorClown"] = bifunctorClown;
  exports["biapplyClown"] = biapplyClown;
  exports["biapplicativeClown"] = biapplicativeClown;
  exports["profunctorClown"] = profunctorClown;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Flip"] = $PS["Data.Functor.Flip"] || {};
  var exports = $PS["Data.Functor.Flip"];
  var Control_Biapplicative = $PS["Control.Biapplicative"];
  var Control_Biapply = $PS["Control.Biapply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Show = $PS["Data.Show"];                
  var Flip = function (x) {
      return x;
  };
  var showFlip = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupoidFlip = function (dictSemigroupoid) {
      return new Control_Semigroupoid.Semigroupoid(function (v) {
          return function (v1) {
              return Flip(Control_Semigroupoid.compose(dictSemigroupoid)(v1)(v));
          };
      });
  };
  var ordFlip = function (dictOrd) {
      return dictOrd;
  };
  var newtypeFlip = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var functorFlip = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqFlip = function (dictEq) {
      return dictEq;
  };
  var contravariantFlip = function (dictProfunctor) {
      return new Data_Functor_Contravariant.Contravariant(function (f) {
          return function (v) {
              return Data_Profunctor.lcmap(dictProfunctor)(f)(v);
          };
      });
  };
  var categoryFlip = function (dictCategory) {
      return new Control_Category.Category(function () {
          return semigroupoidFlip(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  var bifunctorFlip = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
              };
          };
      });
  };
  var biapplyFlip = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorFlip(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeFlip = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyFlip(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
          };
      });
  };
  exports["Flip"] = Flip;
  exports["newtypeFlip"] = newtypeFlip;
  exports["eqFlip"] = eqFlip;
  exports["ordFlip"] = ordFlip;
  exports["showFlip"] = showFlip;
  exports["functorFlip"] = functorFlip;
  exports["bifunctorFlip"] = bifunctorFlip;
  exports["biapplyFlip"] = biapplyFlip;
  exports["biapplicativeFlip"] = biapplicativeFlip;
  exports["contravariantFlip"] = contravariantFlip;
  exports["semigroupoidFlip"] = semigroupoidFlip;
  exports["categoryFlip"] = categoryFlip;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Joker"] = $PS["Data.Functor.Joker"] || {};
  var exports = $PS["Data.Functor.Joker"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Biapplicative = $PS["Control.Biapplicative"];
  var Control_Biapply = $PS["Control.Biapply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Show = $PS["Data.Show"];                
  var Joker = function (x) {
      return x;
  };
  var showJoker = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var profunctorJoker = function (dictFunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Functor.map(dictFunctor)(g)(v);
              };
          };
      });
  };
  var ordJoker = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoker = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var hoistJoker = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorJoker = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(f)(v);
          };
      });
  };
  var eqJoker = function (dictEq) {
      return dictEq;
  };
  var choiceJoker = function (dictFunctor) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorJoker(dictFunctor);
      }, function (v) {
          return Joker(Data_Functor.map(dictFunctor)(Data_Either.Left.create)(v));
      }, function (v) {
          return Joker(Data_Functor.map(dictFunctor)(Data_Either.Right.create)(v));
      });
  };
  var bifunctorJoker = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(g)(v1);
              };
          };
      });
  };
  var biapplyJoker = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorJoker(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeJoker = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyJoker(dictApplicative.Apply0());
      }, function (v) {
          return function (b) {
              return Control_Applicative.pure(dictApplicative)(b);
          };
      });
  };
  var applyJoker = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorJoker(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Joker(Control_Apply.apply(dictApply)(v)(v1));
          };
      });
  };
  var bindJoker = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyJoker(dictBind.Apply0());
      }, function (v) {
          return function (amb) {
              return Joker(Control_Bind.bind(dictBind)(v)((function () {
                  var $46 = Data_Newtype.un()(Joker);
                  return function ($47) {
                      return $46(amb($47));
                  };
              })()));
          };
      });
  };
  var applicativeJoker = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyJoker(dictApplicative.Apply0());
      }, (function () {
          var $48 = Control_Applicative.pure(dictApplicative);
          return function ($49) {
              return Joker($48($49));
          };
      })());
  };
  var monadJoker = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeJoker(dictMonad.Applicative0());
      }, function () {
          return bindJoker(dictMonad.Bind1());
      });
  };
  exports["Joker"] = Joker;
  exports["hoistJoker"] = hoistJoker;
  exports["newtypeJoker"] = newtypeJoker;
  exports["eqJoker"] = eqJoker;
  exports["ordJoker"] = ordJoker;
  exports["showJoker"] = showJoker;
  exports["functorJoker"] = functorJoker;
  exports["applyJoker"] = applyJoker;
  exports["applicativeJoker"] = applicativeJoker;
  exports["bindJoker"] = bindJoker;
  exports["monadJoker"] = monadJoker;
  exports["bifunctorJoker"] = bifunctorJoker;
  exports["biapplyJoker"] = biapplyJoker;
  exports["biapplicativeJoker"] = biapplicativeJoker;
  exports["profunctorJoker"] = profunctorJoker;
  exports["choiceJoker"] = choiceJoker;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Product2"] = $PS["Data.Functor.Product2"] || {};
  var exports = $PS["Data.Functor.Product2"];
  var Control_Biapplicative = $PS["Control.Biapplicative"];
  var Control_Biapply = $PS["Control.Biapply"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Show = $PS["Data.Show"];                
  var Product2 = (function () {
      function Product2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product2.create = function (value0) {
          return function (value1) {
              return new Product2(value0, value1);
          };
      };
      return Product2;
  })();
  var showProduct2 = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Product2 " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var profunctorProduct2 = function (dictProfunctor) {
      return function (dictProfunctor1) {
          return new Data_Profunctor.Profunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Product2(Data_Profunctor.dimap(dictProfunctor)(f)(g)(v.value0), Data_Profunctor.dimap(dictProfunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var functorProduct2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return new Product2(Data_Functor.map(dictFunctor)(f)(v.value0), Data_Functor.map(dictFunctor1)(f)(v.value1));
              };
          });
      };
  };
  var eqProduct2 = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordProduct2 = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqProduct2(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorProduct2 = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Product2(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var biapplyProduct2 = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return bifunctorProduct2(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
          }, function (v) {
              return function (v1) {
                  return new Product2(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var biapplicativeProduct2 = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return biapplyProduct2(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
          }, function (a) {
              return function (b) {
                  return new Product2(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Product2"] = Product2;
  exports["eqProduct2"] = eqProduct2;
  exports["ordProduct2"] = ordProduct2;
  exports["showProduct2"] = showProduct2;
  exports["functorProduct2"] = functorProduct2;
  exports["bifunctorProduct2"] = bifunctorProduct2;
  exports["biapplyProduct2"] = biapplyProduct2;
  exports["biapplicativeProduct2"] = biapplicativeProduct2;
  exports["profunctorProduct2"] = profunctorProduct2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bitraversable"] = $PS["Data.Bitraversable"] || {};
  var exports = $PS["Data.Bitraversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Bifoldable = $PS["Data.Bifoldable"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Const = $PS["Data.Const"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Clown = $PS["Data.Functor.Clown"];
  var Data_Functor_Flip = $PS["Data.Functor.Flip"];
  var Data_Functor_Joker = $PS["Data.Functor.Joker"];
  var Data_Functor_Product2 = $PS["Data.Functor.Product2"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
      this.Bifoldable1 = Bifoldable1;
      this.Bifunctor0 = Bifunctor0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var lfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
              };
          };
      };
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var rfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
              };
          };
      };
  };
  var rtraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
      };
  };
  var bitraversableTuple = new Bitraversable(function () {
      return Data_Bifoldable.bifoldableTuple;
  }, function () {
      return Data_Bifunctor.bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var bitraversableJoker = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
      }, function () {
          return Data_Functor_Joker.bifunctorJoker(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                  };
              };
          };
      });
  };
  var bitraversableEither = new Bitraversable(function () {
      return Data_Bifoldable.bifoldableEither;
  }, function () {
      return Data_Bifunctor.bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Left.create)(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Bitraversable (line 57, column 1 - line 61, column 37): " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Left.create)(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create)(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bitraversable (line 57, column 1 - line 61, column 37): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableConst = new Bitraversable(function () {
      return Data_Bifoldable.bifoldableConst;
  }, function () {
      return Data_Bifunctor.bifunctorConst;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Const.Const)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return function (v1) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Const.Const)(f(v1));
              };
          };
      };
  });
  var bitraversableClown = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
      }, function () {
          return Data_Functor_Clown.bifunctorClown(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                  };
              };
          };
      });
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraversableFlip = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Functor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraversableProduct2 = function (dictBitraversable) {
      return function (dictBitraversable1) {
          return new Bitraversable(function () {
              return Data_Bifoldable.bifoldableProduct2(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
          }, function () {
              return Data_Functor_Product2.bifunctorProduct2(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
          }, function (dictApplicative) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Product2.Product2.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
              };
          }, function (dictApplicative) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor_Product2.Product2.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                      };
                  };
              };
          });
      };
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bitraverse"] = bitraverse;
  exports["bisequence"] = bisequence;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["ltraverse"] = ltraverse;
  exports["rtraverse"] = rtraverse;
  exports["bifor"] = bifor;
  exports["lfor"] = lfor;
  exports["rfor"] = rfor;
  exports["bitraversableClown"] = bitraversableClown;
  exports["bitraversableJoker"] = bitraversableJoker;
  exports["bitraversableFlip"] = bitraversableFlip;
  exports["bitraversableProduct2"] = bitraversableProduct2;
  exports["bitraversableEither"] = bitraversableEither;
  exports["bitraversableTuple"] = bitraversableTuple;
  exports["bitraversableConst"] = bitraversableConst;
  exports["Bifoldable"] = Data_Bifoldable.Bifoldable;
  exports["biall"] = Data_Bifoldable.biall;
  exports["biany"] = Data_Bifoldable.biany;
  exports["bifold"] = Data_Bifoldable.bifold;
  exports["bifoldMap"] = Data_Bifoldable.bifoldMap;
  exports["bifoldMapDefaultL"] = Data_Bifoldable.bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = Data_Bifoldable.bifoldMapDefaultR;
  exports["bifoldl"] = Data_Bifoldable.bifoldl;
  exports["bifoldlDefault"] = Data_Bifoldable.bifoldlDefault;
  exports["bifoldr"] = Data_Bifoldable.bifoldr;
  exports["bifoldrDefault"] = Data_Bifoldable.bifoldrDefault;
  exports["bifor_"] = Data_Bifoldable.bifor_;
  exports["bisequence_"] = Data_Bifoldable.bisequence_;
  exports["bitraverse_"] = Data_Bifoldable.bitraverse_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bounded.Generic"] = $PS["Data.Bounded.Generic"] || {};
  var exports = $PS["Data.Bounded.Generic"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];                
  var GenericTop = function (genericTop$prime) {
      this["genericTop'"] = genericTop$prime;
  };
  var GenericBottom = function (genericBottom$prime) {
      this["genericBottom'"] = genericBottom$prime;
  };
  var genericTopNoArguments = new GenericTop(Data_Generic_Rep.NoArguments.value);
  var genericTopArgument = function (dictBounded) {
      return new GenericTop(Data_Bounded.top(dictBounded));
  };
  var genericTop$prime = function (dict) {
      return dict["genericTop'"];
  };
  var genericTopConstructor = function (dictGenericTop) {
      return new GenericTop(genericTop$prime(dictGenericTop));
  };
  var genericTopProduct = function (dictGenericTop) {
      return function (dictGenericTop1) {
          return new GenericTop(new Data_Generic_Rep.Product(genericTop$prime(dictGenericTop), genericTop$prime(dictGenericTop1)));
      };
  };
  var genericTopSum = function (dictGenericTop) {
      return new GenericTop(new Data_Generic_Rep.Inr(genericTop$prime(dictGenericTop)));
  };
  var genericTop = function (dictGeneric) {
      return function (dictGenericTop) {
          return Data_Generic_Rep.to(dictGeneric)(genericTop$prime(dictGenericTop));
      };
  };
  var genericBottomNoArguments = new GenericBottom(Data_Generic_Rep.NoArguments.value);
  var genericBottomArgument = function (dictBounded) {
      return new GenericBottom(Data_Bounded.bottom(dictBounded));
  };
  var genericBottom$prime = function (dict) {
      return dict["genericBottom'"];
  };
  var genericBottomConstructor = function (dictGenericBottom) {
      return new GenericBottom(genericBottom$prime(dictGenericBottom));
  };
  var genericBottomProduct = function (dictGenericBottom) {
      return function (dictGenericBottom1) {
          return new GenericBottom(new Data_Generic_Rep.Product(genericBottom$prime(dictGenericBottom), genericBottom$prime(dictGenericBottom1)));
      };
  };
  var genericBottomSum = function (dictGenericBottom) {
      return new GenericBottom(new Data_Generic_Rep.Inl(genericBottom$prime(dictGenericBottom)));
  };
  var genericBottom = function (dictGeneric) {
      return function (dictGenericBottom) {
          return Data_Generic_Rep.to(dictGeneric)(genericBottom$prime(dictGenericBottom));
      };
  };
  exports["GenericBottom"] = GenericBottom;
  exports["genericBottom'"] = genericBottom$prime;
  exports["genericBottom"] = genericBottom;
  exports["GenericTop"] = GenericTop;
  exports["genericTop'"] = genericTop$prime;
  exports["genericTop"] = genericTop;
  exports["genericBottomNoArguments"] = genericBottomNoArguments;
  exports["genericBottomArgument"] = genericBottomArgument;
  exports["genericBottomSum"] = genericBottomSum;
  exports["genericBottomProduct"] = genericBottomProduct;
  exports["genericBottomConstructor"] = genericBottomConstructor;
  exports["genericTopNoArguments"] = genericTopNoArguments;
  exports["genericTopArgument"] = genericTopArgument;
  exports["genericTopSum"] = genericTopSum;
  exports["genericTopProduct"] = genericTopProduct;
  exports["genericTopConstructor"] = genericTopConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Compactable"] = $PS["Data.Compactable"] || {};
  var exports = $PS["Data.Compactable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];                
  var Compactable = function (compact, separate) {
      this.compact = compact;
      this.separate = separate;
  };
  var separate = function (dict) {
      return dict.separate;
  };
  var mapToList = function (dictOrd) {
      return Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
  };
  var compactableMaybe = new Compactable(Control_Bind.join(Data_Maybe.bindMaybe), function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return {
              left: Data_Maybe.Nothing.value,
              right: Data_Maybe.Nothing.value
          };
      };
      if (v instanceof Data_Maybe.Just) {
          if (v.value0 instanceof Data_Either.Left) {
              return {
                  left: new Data_Maybe.Just(v.value0.value0),
                  right: Data_Maybe.Nothing.value
              };
          };
          if (v.value0 instanceof Data_Either.Right) {
              return {
                  left: Data_Maybe.Nothing.value,
                  right: new Data_Maybe.Just(v.value0.value0)
              };
          };
          throw new Error("Failed pattern match at Data.Compactable (line 91, column 23 - line 93, column 48): " + [ v.value0.constructor.name ]);
      };
      throw new Error("Failed pattern match at Data.Compactable (line 87, column 1 - line 93, column 48): " + [ v.constructor.name ]);
  });
  var compactableMap = function (dictOrd) {
      return new Compactable((function () {
          var select = function (v) {
              return function (m) {
                  return Data_Map_Internal.alter(dictOrd)(Data_Function["const"](v.value1))(v.value0)(m);
              };
          };
          var $71 = Data_Foldable.foldr(Data_List_Types.foldableList)(select)(Data_Map_Internal.empty);
          var $72 = mapToList(dictOrd);
          return function ($73) {
              return $71($72($73));
          };
      })(), (function () {
          var select = function (v) {
              return function (v1) {
                  if (v.value1 instanceof Data_Either.Left) {
                      return {
                          left: Data_Map_Internal.insert(dictOrd)(v.value0)(v.value1.value0)(v1.left),
                          right: v1.right
                      };
                  };
                  if (v.value1 instanceof Data_Either.Right) {
                      return {
                          left: v1.left,
                          right: Data_Map_Internal.insert(dictOrd)(v.value0)(v.value1.value0)(v1.right)
                      };
                  };
                  throw new Error("Failed pattern match at Data.Compactable (line 142, column 44 - line 144, column 63): " + [ v.value1.constructor.name ]);
              };
          };
          var $74 = Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              left: Data_Map_Internal.empty,
              right: Data_Map_Internal.empty
          });
          var $75 = mapToList(dictOrd);
          return function ($76) {
              return $74($75($76));
          };
      })());
  };
  var compactableList = new Compactable(Data_List.catMaybes, (function () {
      var go = function (acc) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return {
                      left: Control_Alt.alt(Data_List_Types.altList)(acc.left)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
                      right: acc.right
                  };
              };
              if (v instanceof Data_Either.Right) {
                  return {
                      right: Control_Alt.alt(Data_List_Types.altList)(acc.right)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
                      left: acc.left
                  };
              };
              throw new Error("Failed pattern match at Data.Compactable (line 131, column 14 - line 133, column 54): " + [ v.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(go)({
          left: Control_Plus.empty(Data_List_Types.plusList),
          right: Control_Plus.empty(Data_List_Types.plusList)
      });
  })());
  var compactableEither = function (dictMonoid) {
      return new Compactable(function (v) {
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right(v.value0.value0);
              };
              if (v.value0 instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
              };
              throw new Error("Failed pattern match at Data.Compactable (line 97, column 23 - line 99, column 27): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Data.Compactable (line 95, column 1 - line 104, column 53): " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Either.Left) {
              return {
                  left: new Data_Either.Left(v.value0),
                  right: new Data_Either.Left(v.value0)
              };
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0 instanceof Data_Either.Left) {
                  return {
                      left: new Data_Either.Right(v.value0.value0),
                      right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
                  };
              };
              if (v.value0 instanceof Data_Either.Right) {
                  return {
                      left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
                      right: new Data_Either.Right(v.value0.value0)
                  };
              };
              throw new Error("Failed pattern match at Data.Compactable (line 102, column 24 - line 104, column 53): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Data.Compactable (line 95, column 1 - line 104, column 53): " + [ v.constructor.name ]);
      });
  };
  var compactableArray = new Compactable(function (xs) {
      return (function __do() {
          var result = Data_Array_ST["new"]();
          var iter = Data_Array_ST_Iterator.iterator(function (v) {
              return Data_Array.index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)((function () {
              var $77 = Data_Functor["void"](Control_Monad_ST_Internal.functorST);
              return function ($78) {
                  return $77((function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(0);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Data_Array_ST.push(v.value0)(result);
                      };
                      throw new Error("Failed pattern match at Data.Compactable (line 111, column 34 - line 113, column 35): " + [ v.constructor.name ]);
                  })($78));
              };
          })())();
          return Data_Array_ST.unsafeFreeze(result)();
      })();
  }, function (xs) {
      return (function __do() {
          var ls = Data_Array_ST["new"]();
          var rs = Data_Array_ST["new"]();
          var iter = Data_Array_ST_Iterator.iterator(function (v) {
              return Data_Array.index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)((function () {
              var $79 = Data_Functor["void"](Control_Monad_ST_Internal.functorST);
              return function ($80) {
                  return $79((function (v) {
                      if (v instanceof Data_Either.Left) {
                          return Data_Array_ST.push(v.value0)(ls);
                      };
                      if (v instanceof Data_Either.Right) {
                          return Data_Array_ST.push(v.value0)(rs);
                      };
                      throw new Error("Failed pattern match at Data.Compactable (line 122, column 34 - line 124, column 31): " + [ v.constructor.name ]);
                  })($80));
              };
          })())();
          return Control_Apply.apply(Control_Monad_ST_Internal.applyST)(Data_Functor.map(Control_Monad_ST_Internal.functorST)(function (v) {
              return function (v1) {
                  return {
                      left: v,
                      right: v1
                  };
              };
          })(Data_Array_ST.unsafeFreeze(ls)))(Data_Array_ST.unsafeFreeze(rs))();
      })();
  });
  var compactDefault = function (dictFunctor) {
      return function (dictCompactable) {
          var $81 = separate(dictCompactable);
          var $82 = Data_Functor.map(dictFunctor)(Data_Either.note(Data_Unit.unit));
          return function ($83) {
              return (function (v) {
                  return v.right;
              })($81($82($83)));
          };
      };
  };
  var compact = function (dict) {
      return dict.compact;
  };
  var separateDefault = function (dictFunctor) {
      return function (dictCompactable) {
          return function (xs) {
              var swapEither = function (e) {
                  if (e instanceof Data_Either.Left) {
                      return new Data_Either.Right(e.value0);
                  };
                  if (e instanceof Data_Either.Right) {
                      return new Data_Either.Left(e.value0);
                  };
                  throw new Error("Failed pattern match at Data.Compactable (line 83, column 20 - line 85, column 24): " + [ e.constructor.name ]);
              };
              return {
                  left: compact(dictCompactable)(Data_Functor.map(dictFunctor)(function ($84) {
                      return Data_Either.hush(swapEither($84));
                  })(xs)),
                  right: compact(dictCompactable)(Data_Functor.map(dictFunctor)(Data_Either.hush)(xs))
              };
          };
      };
  };
  var bindMaybe = function (dictBind) {
      return function (dictCompactable) {
          return function (x) {
              var $85 = compact(dictCompactable);
              var $86 = Control_Bind.bind(dictBind)(x);
              return function ($87) {
                  return $85($86($87));
              };
          };
      };
  };
  var bindEither = function (dictBind) {
      return function (dictCompactable) {
          return function (x) {
              var $88 = separate(dictCompactable);
              var $89 = Control_Bind.bind(dictBind)(x);
              return function ($90) {
                  return $88($89($90));
              };
          };
      };
  };
  var applyMaybe = function (dictApply) {
      return function (dictCompactable) {
          return function (p) {
              var $91 = compact(dictCompactable);
              var $92 = Control_Apply.apply(dictApply)(p);
              return function ($93) {
                  return $91($92($93));
              };
          };
      };
  };
  var applyEither = function (dictApply) {
      return function (dictCompactable) {
          return function (p) {
              var $94 = separate(dictCompactable);
              var $95 = Control_Apply.apply(dictApply)(p);
              return function ($96) {
                  return $94($95($96));
              };
          };
      };
  };
  exports["Compactable"] = Compactable;
  exports["compact"] = compact;
  exports["separate"] = separate;
  exports["compactDefault"] = compactDefault;
  exports["separateDefault"] = separateDefault;
  exports["applyMaybe"] = applyMaybe;
  exports["applyEither"] = applyEither;
  exports["bindMaybe"] = bindMaybe;
  exports["bindEither"] = bindEither;
  exports["compactableMaybe"] = compactableMaybe;
  exports["compactableEither"] = compactableEither;
  exports["compactableArray"] = compactableArray;
  exports["compactableList"] = compactableList;
  exports["compactableMap"] = compactableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Comparison"] = $PS["Data.Comparison"] || {};
  var exports = $PS["Data.Comparison"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Comparison = function (x) {
      return x;
  };
  var semigroupComparison = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Ordering.semigroupOrdering)))(v)(v1);
      };
  });
  var newtypeComparison = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidComparison = new Data_Monoid.Monoid(function () {
      return semigroupComparison;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var defaultComparison = function (dictOrd) {
      return Data_Ord.compare(dictOrd);
  };
  var contravariantComparison = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return Data_Function.on(v)(f);
      };
  });
  exports["Comparison"] = Comparison;
  exports["defaultComparison"] = defaultComparison;
  exports["newtypeComparison"] = newtypeComparison;
  exports["contravariantComparison"] = contravariantComparison;
  exports["semigroupComparison"] = semigroupComparison;
  exports["monoidComparison"] = monoidComparison;
})(PS);
(function(exports) {
  "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };

  exports.calcWeekday = function (y, m, d) {
    return createDate(y, m - 1, d).getUTCDay();
  };

  exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
    var dt1 = createDate(y1, m1 - 1, d1);
    var dt2 = createDate(y2, m2 - 1, d2);
    return dt1.getTime() - dt2.getTime();
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Date.Component"] = $PS["Data.Date.Component"] || {};
  var exports = $PS["Data.Date.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Year = function (x) {
      return x;
  };
  var Monday = (function () {
      function Monday() {

      };
      Monday.value = new Monday();
      return Monday;
  })();
  var Tuesday = (function () {
      function Tuesday() {

      };
      Tuesday.value = new Tuesday();
      return Tuesday;
  })();
  var Wednesday = (function () {
      function Wednesday() {

      };
      Wednesday.value = new Wednesday();
      return Wednesday;
  })();
  var Thursday = (function () {
      function Thursday() {

      };
      Thursday.value = new Thursday();
      return Thursday;
  })();
  var Friday = (function () {
      function Friday() {

      };
      Friday.value = new Friday();
      return Friday;
  })();
  var Saturday = (function () {
      function Saturday() {

      };
      Saturday.value = new Saturday();
      return Saturday;
  })();
  var Sunday = (function () {
      function Sunday() {

      };
      Sunday.value = new Sunday();
      return Sunday;
  })();
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var Day = function (x) {
      return x;
  };
  var showYear = new Data_Show.Show(function (v) {
      return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showWeekday = new Data_Show.Show(function (v) {
      if (v instanceof Monday) {
          return "Monday";
      };
      if (v instanceof Tuesday) {
          return "Tuesday";
      };
      if (v instanceof Wednesday) {
          return "Wednesday";
      };
      if (v instanceof Thursday) {
          return "Thursday";
      };
      if (v instanceof Friday) {
          return "Friday";
      };
      if (v instanceof Saturday) {
          return "Saturday";
      };
      if (v instanceof Sunday) {
          return "Sunday";
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 184, column 1 - line 191, column 25): " + [ v.constructor.name ]);
  });
  var showMonth = new Data_Show.Show(function (v) {
      if (v instanceof January) {
          return "January";
      };
      if (v instanceof February) {
          return "February";
      };
      if (v instanceof March) {
          return "March";
      };
      if (v instanceof April) {
          return "April";
      };
      if (v instanceof May) {
          return "May";
      };
      if (v instanceof June) {
          return "June";
      };
      if (v instanceof July) {
          return "July";
      };
      if (v instanceof August) {
          return "August";
      };
      if (v instanceof September) {
          return "September";
      };
      if (v instanceof October) {
          return "October";
      };
      if (v instanceof November) {
          return "November";
      };
      if (v instanceof December) {
          return "December";
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [ v.constructor.name ]);
  });
  var showDay = new Data_Show.Show(function (v) {
      return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqYear = Data_Eq.eqInt;
  var eqWeekday = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Monday && y instanceof Monday) {
              return true;
          };
          if (x instanceof Tuesday && y instanceof Tuesday) {
              return true;
          };
          if (x instanceof Wednesday && y instanceof Wednesday) {
              return true;
          };
          if (x instanceof Thursday && y instanceof Thursday) {
              return true;
          };
          if (x instanceof Friday && y instanceof Friday) {
              return true;
          };
          if (x instanceof Saturday && y instanceof Saturday) {
              return true;
          };
          if (x instanceof Sunday && y instanceof Sunday) {
              return true;
          };
          return false;
      };
  });
  var ordWeekday = new Data_Ord.Ord(function () {
      return eqWeekday;
  }, function (x) {
      return function (y) {
          if (x instanceof Monday && y instanceof Monday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Monday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Monday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Tuesday && y instanceof Tuesday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Tuesday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Tuesday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Wednesday && y instanceof Wednesday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Wednesday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Wednesday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Thursday && y instanceof Thursday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Thursday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Thursday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Friday && y instanceof Friday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Friday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Friday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Saturday && y instanceof Saturday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Saturday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Saturday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Sunday && y instanceof Sunday) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 154, column 1 - line 154, column 42): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqMonth = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return true;
          };
          if (x instanceof February && y instanceof February) {
              return true;
          };
          if (x instanceof March && y instanceof March) {
              return true;
          };
          if (x instanceof April && y instanceof April) {
              return true;
          };
          if (x instanceof May && y instanceof May) {
              return true;
          };
          if (x instanceof June && y instanceof June) {
              return true;
          };
          if (x instanceof July && y instanceof July) {
              return true;
          };
          if (x instanceof August && y instanceof August) {
              return true;
          };
          if (x instanceof September && y instanceof September) {
              return true;
          };
          if (x instanceof October && y instanceof October) {
              return true;
          };
          if (x instanceof November && y instanceof November) {
              return true;
          };
          if (x instanceof December && y instanceof December) {
              return true;
          };
          return false;
      };
  });
  var ordMonth = new Data_Ord.Ord(function () {
      return eqMonth;
  }, function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof January) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof January) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof February && y instanceof February) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof February) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof February) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof March && y instanceof March) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof March) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof March) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof April && y instanceof April) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof April) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof April) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof May && y instanceof May) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof May) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof May) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof June && y instanceof June) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof June) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof June) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof July && y instanceof July) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof July) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof July) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof August && y instanceof August) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof August) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof August) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof September && y instanceof September) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof September) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof September) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof October && y instanceof October) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof October) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof October) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof November && y instanceof November) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof November) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof November) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof December && y instanceof December) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqDay = Data_Eq.eqInt;
  var boundedYear = new Data_Bounded.Bounded(function () {
      return ordYear;
  }, -271820 | 0, 275759);
  var boundedWeekday = new Data_Bounded.Bounded(function () {
      return ordWeekday;
  }, Monday.value, Sunday.value);
  var boundedMonth = new Data_Bounded.Bounded(function () {
      return ordMonth;
  }, January.value, December.value);
  var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
      return boundedYear;
  }, function () {
      return enumYear;
  }, 547580, function (v) {
      return v;
  }, function (n) {
      if (n >= (-271820 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [ n.constructor.name ]);
  });
  var enumYear = new Data_Enum.Enum(function () {
      return ordYear;
  }, (function () {
      var $46 = Data_Enum.toEnum(boundedEnumYear);
      var $47 = Data_Enum.fromEnum(boundedEnumYear);
      return function ($48) {
          return $46((function (v) {
              return v - 1 | 0;
          })($47($48)));
      };
  })(), (function () {
      var $49 = Data_Enum.toEnum(boundedEnumYear);
      var $50 = Data_Enum.fromEnum(boundedEnumYear);
      return function ($51) {
          return $49((function (v) {
              return v + 1 | 0;
          })($50($51)));
      };
  })());
  var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
      return boundedWeekday;
  }, function () {
      return enumWeekday;
  }, 7, function (v) {
      if (v instanceof Monday) {
          return 1;
      };
      if (v instanceof Tuesday) {
          return 2;
      };
      if (v instanceof Wednesday) {
          return 3;
      };
      if (v instanceof Thursday) {
          return 4;
      };
      if (v instanceof Friday) {
          return 5;
      };
      if (v instanceof Saturday) {
          return 6;
      };
      if (v instanceof Sunday) {
          return 7;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 182, column 16): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(Monday.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Tuesday.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Wednesday.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(Thursday.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(Friday.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(Saturday.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(Sunday.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumWeekday = new Data_Enum.Enum(function () {
      return ordWeekday;
  }, (function () {
      var $52 = Data_Enum.toEnum(boundedEnumWeekday);
      var $53 = Data_Enum.fromEnum(boundedEnumWeekday);
      return function ($54) {
          return $52((function (v) {
              return v - 1 | 0;
          })($53($54)));
      };
  })(), (function () {
      var $55 = Data_Enum.toEnum(boundedEnumWeekday);
      var $56 = Data_Enum.fromEnum(boundedEnumWeekday);
      return function ($57) {
          return $55((function (v) {
              return v + 1 | 0;
          })($56($57)));
      };
  })());
  var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
      return boundedMonth;
  }, function () {
      return enumMonth;
  }, 12, function (v) {
      if (v instanceof January) {
          return 1;
      };
      if (v instanceof February) {
          return 2;
      };
      if (v instanceof March) {
          return 3;
      };
      if (v instanceof April) {
          return 4;
      };
      if (v instanceof May) {
          return 5;
      };
      if (v instanceof June) {
          return 6;
      };
      if (v instanceof July) {
          return 7;
      };
      if (v instanceof August) {
          return 8;
      };
      if (v instanceof September) {
          return 9;
      };
      if (v instanceof October) {
          return 10;
      };
      if (v instanceof November) {
          return 11;
      };
      if (v instanceof December) {
          return 12;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumMonth = new Data_Enum.Enum(function () {
      return ordMonth;
  }, (function () {
      var $58 = Data_Enum.toEnum(boundedEnumMonth);
      var $59 = Data_Enum.fromEnum(boundedEnumMonth);
      return function ($60) {
          return $58((function (v) {
              return v - 1 | 0;
          })($59($60)));
      };
  })(), (function () {
      var $61 = Data_Enum.toEnum(boundedEnumMonth);
      var $62 = Data_Enum.fromEnum(boundedEnumMonth);
      return function ($63) {
          return $61((function (v) {
              return v + 1 | 0;
          })($62($63)));
      };
  })());
  var boundedDay = new Data_Bounded.Bounded(function () {
      return ordDay;
  }, 1, 31);
  var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
      return boundedDay;
  }, function () {
      return enumDay;
  }, 31, function (v) {
      return v;
  }, function (n) {
      if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [ n.constructor.name ]);
  });
  var enumDay = new Data_Enum.Enum(function () {
      return ordDay;
  }, (function () {
      var $64 = Data_Enum.toEnum(boundedEnumDay);
      var $65 = Data_Enum.fromEnum(boundedEnumDay);
      return function ($66) {
          return $64((function (v) {
              return v - 1 | 0;
          })($65($66)));
      };
  })(), (function () {
      var $67 = Data_Enum.toEnum(boundedEnumDay);
      var $68 = Data_Enum.fromEnum(boundedEnumDay);
      return function ($69) {
          return $67((function (v) {
              return v + 1 | 0;
          })($68($69)));
      };
  })());
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["Monday"] = Monday;
  exports["Tuesday"] = Tuesday;
  exports["Wednesday"] = Wednesday;
  exports["Thursday"] = Thursday;
  exports["Friday"] = Friday;
  exports["Saturday"] = Saturday;
  exports["Sunday"] = Sunday;
  exports["eqYear"] = eqYear;
  exports["ordYear"] = ordYear;
  exports["boundedYear"] = boundedYear;
  exports["enumYear"] = enumYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["showYear"] = showYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["showMonth"] = showMonth;
  exports["eqDay"] = eqDay;
  exports["ordDay"] = ordDay;
  exports["boundedDay"] = boundedDay;
  exports["enumDay"] = enumDay;
  exports["boundedEnumDay"] = boundedEnumDay;
  exports["showDay"] = showDay;
  exports["eqWeekday"] = eqWeekday;
  exports["ordWeekday"] = ordWeekday;
  exports["boundedWeekday"] = boundedWeekday;
  exports["enumWeekday"] = enumWeekday;
  exports["boundedEnumWeekday"] = boundedEnumWeekday;
  exports["showWeekday"] = showWeekday;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Date"] = $PS["Data.Date"] || {};
  var exports = $PS["Data.Date"];
  var $foreign = $PS["Data.Date"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var year = function (v) {
      return v.value0;
  };
  var weekday = function (v) {
      var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
      var $41 = n === 0;
      if ($41) {
          return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
      };
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
  };
  var showDate = new Data_Show.Show(function (v) {
      return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
  });
  var month = function (v) {
      return v.value1;
  };
  var isLeapYear = function (y) {
      var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
  };
  var lastDayOfMonth = function (y) {
      return function (m) {
          var unsafeDay = (function () {
              var $108 = Data_Maybe.fromJust();
              var $109 = Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
              return function ($110) {
                  return $108($109($110));
              };
          })();
          if (m instanceof Data_Date_Component.January) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.February) {
              if (isLeapYear(y)) {
                  return unsafeDay(29);
              };
              if (Data_Boolean.otherwise) {
                  return unsafeDay(28);
              };
          };
          if (m instanceof Data_Date_Component.March) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.April) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.May) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.June) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.July) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.August) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.September) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.October) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.November) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.December) {
              return unsafeDay(31);
          };
          throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 141, column 27): " + [ m.constructor.name ]);
      };
  };
  var eqDate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
      };
  });
  var ordDate = new Data_Ord.Ord(function () {
      return eqDate;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
      };
  });
  var enumDate = new Data_Enum.Enum(function () {
      return ordDate;
  }, function (v) {
      var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
      var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);
      var y$prime = (function () {
          var $73 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);
          if ($73) {
              return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
          };
          return new Data_Maybe.Just(v.value0);
      })();
      var m$prime = (function () {
          var $74 = Data_Maybe.isNothing(pd);
          if ($74) {
              return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
          };
          return v.value1;
      })();
      var l = lastDayOfMonth(v.value0)(m$prime);
      var d$prime = (function () {
          var $75 = Data_Maybe.isNothing(pd);
          if ($75) {
              return new Data_Maybe.Just(l);
          };
          return pd;
      })();
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
  }, function (v) {
      var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
      var l = lastDayOfMonth(v.value0)(v.value1);
      var sd = (function () {
          var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
          var $80 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));
          if ($80) {
              return Data_Maybe.Nothing.value;
          };
          return v1;
      })();
      var m$prime = (function () {
          var $81 = Data_Maybe.isNothing(sd);
          if ($81) {
              return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
          };
          return v.value1;
      })();
      var y$prime = (function () {
          var $82 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);
          if ($82) {
              return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
          };
          return new Data_Maybe.Just(v.value0);
      })();
      var d$prime = (function () {
          var $83 = Data_Maybe.isNothing(sd);
          if ($83) {
              return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
          };
          return sd;
      })();
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
  });
  var diff = function (dictDuration) {
      return function (v) {
          return function (v1) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
          };
      };
  };
  var day = function (v) {
      return v.value2;
  };
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  var exactDate = function (y) {
      return function (m) {
          return function (d) {
              var dt = new $$Date(y, m, d);
              var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
              if ($99) {
                  return new Data_Maybe.Just(dt);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var boundedDate = new Data_Bounded.Bounded(function () {
      return ordDate;
  }, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
  var adjust = function (v) {
      return function (date) {
          var adj = function (v1) {
              return function (v2) {
                  if (v1 === 0) {
                      return new Data_Maybe.Just(v2);
                  };
                  var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
                  var low = j < 1;
                  var l = lastDayOfMonth(v2.value0)((function () {
                      if (low) {
                          return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
                      };
                      return v2.value1;
                  })());
                  var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);
                  var i$prime = (function () {
                      if (low) {
                          return j;
                      };
                      if (hi) {
                          return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
                      };
                      if (Data_Boolean.otherwise) {
                          return 0;
                      };
                      throw new Error("Failed pattern match at Data.Date (line 101, column 9 - line 103, column 28): " + [  ]);
                  })();
                  var dt$prime = (function () {
                      if (low) {
                          return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
                      };
                      if (hi) {
                          return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
                      };
                      throw new Error("Failed pattern match at Data.Date (line 104, column 9 - line 106, column 48): " + [  ]);
                  })();
                  return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
              };
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
      };
  };
  exports["canonicalDate"] = canonicalDate;
  exports["exactDate"] = exactDate;
  exports["year"] = year;
  exports["month"] = month;
  exports["day"] = day;
  exports["weekday"] = weekday;
  exports["diff"] = diff;
  exports["isLeapYear"] = isLeapYear;
  exports["lastDayOfMonth"] = lastDayOfMonth;
  exports["adjust"] = adjust;
  exports["eqDate"] = eqDate;
  exports["ordDate"] = ordDate;
  exports["boundedDate"] = boundedDate;
  exports["showDate"] = showDate;
  exports["enumDate"] = enumDate;
  exports["April"] = Data_Date_Component.April;
  exports["August"] = Data_Date_Component.August;
  exports["December"] = Data_Date_Component.December;
  exports["February"] = Data_Date_Component.February;
  exports["January"] = Data_Date_Component.January;
  exports["July"] = Data_Date_Component.July;
  exports["June"] = Data_Date_Component.June;
  exports["March"] = Data_Date_Component.March;
  exports["May"] = Data_Date_Component.May;
  exports["November"] = Data_Date_Component.November;
  exports["October"] = Data_Date_Component.October;
  exports["September"] = Data_Date_Component.September;
  exports["Friday"] = Data_Date_Component.Friday;
  exports["Monday"] = Data_Date_Component.Monday;
  exports["Saturday"] = Data_Date_Component.Saturday;
  exports["Sunday"] = Data_Date_Component.Sunday;
  exports["Thursday"] = Data_Date_Component.Thursday;
  exports["Tuesday"] = Data_Date_Component.Tuesday;
  exports["Wednesday"] = Data_Date_Component.Wednesday;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum.Gen"] = $PS["Data.Enum.Gen"] || {};
  var exports = $PS["Data.Enum.Gen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var genBoundedEnum = function (dictMonadGen) {
      return function (dictBoundedEnum) {
          var v = Data_Enum.succ(dictBoundedEnum.Enum1())(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
          if (v instanceof Data_Maybe.Just) {
              var possibilities = Data_Enum.enumFromTo(dictBoundedEnum.Enum1())(Data_Unfoldable1.unfoldable1Array)(v.value0)(Data_Bounded.top(dictBoundedEnum.Bounded0()));
              return Control_Monad_Gen.elements(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(Data_Bounded.bottom(dictBoundedEnum.Bounded0()), possibilities));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
          };
          throw new Error("Failed pattern match at Data.Enum.Gen (line 13, column 3 - line 18, column 18): " + [ v.constructor.name ]);
      };
  };
  exports["genBoundedEnum"] = genBoundedEnum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Date.Component.Gen"] = $PS["Data.Date.Component.Gen"] || {};
  var exports = $PS["Data.Date.Component.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Enum_Gen = $PS["Data.Enum.Gen"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var genYear = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())((function () {
          var $5 = Data_Maybe.fromJust();
          var $6 = Data_Enum.toEnum(Data_Date_Component.boundedEnumYear);
          return function ($7) {
              return $5($6($7));
          };
      })())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(1900)(2100));
  };
  var genWeekday = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Date_Component.boundedEnumWeekday);
  };
  var genMonth = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Date_Component.boundedEnumMonth);
  };
  var genDay = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Date_Component.boundedEnumDay);
  };
  exports["genYear"] = genYear;
  exports["genMonth"] = genMonth;
  exports["genDay"] = genDay;
  exports["genWeekday"] = genWeekday;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Date.Gen"] = $PS["Data.Date.Gen"] || {};
  var exports = $PS["Data.Date.Gen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Date_Component_Gen = $PS["Data.Date.Component.Gen"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var genDate = function (dictMonadGen) {
      return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Data_Date_Component_Gen.genYear(dictMonadGen))(function (year) {
          var maxDays = (function () {
              var $2 = Data_Date.isLeapYear(year);
              if ($2) {
                  return 365;
              };
              return 364;
          })();
          return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(function ($3) {
              return Data_Time_Duration.Days(Data_Int.toNumber($3));
          })(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(maxDays)))(function (days) {
              return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Maybe.fromJust()(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Date.exactDate(year)(Data_Bounded.bottom(Data_Date_Component.boundedMonth))(Data_Bounded.bottom(Data_Date_Component.boundedDay)))(function (janFirst) {
                  return Data_Date.adjust(days)(janFirst);
              })));
          });
      });
  };
  exports["genDate"] = genDate;
  exports["genDay"] = Data_Date_Component_Gen.genDay;
  exports["genMonth"] = Data_Date_Component_Gen.genMonth;
  exports["genWeekday"] = Data_Date_Component_Gen.genWeekday;
  exports["genYear"] = Data_Date_Component_Gen.genYear;
})(PS);
(function(exports) {
  "use strict";

  var createUTC = function (y, mo, d, h, m, s, ms) {
    var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date.getTime();
  };

  exports.calcDiff = function (rec1, rec2) {
    var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
    var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
    return msUTC1 - msUTC2;
  };

  exports.adjustImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (rec) {
          var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
          var dt = new Date(msUTC + offset);
          return isNaN(dt.getTime()) ? nothing : just({
            year: dt.getUTCFullYear(),
            month: dt.getUTCMonth() + 1,
            day: dt.getUTCDate(),
            hour: dt.getUTCHours(),
            minute: dt.getUTCMinutes(),
            second: dt.getUTCSeconds(),
            millisecond: dt.getUTCMilliseconds()
          });
        };
      };
    };
  };
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Time.Component"] = $PS["Data.Time.Component"] || {};
  var exports = $PS["Data.Time.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var Second = function (x) {
      return x;
  };
  var Minute = function (x) {
      return x;
  };
  var Millisecond = function (x) {
      return x;
  };
  var Hour = function (x) {
      return x;
  };
  var showSecond = new Data_Show.Show(function (v) {
      return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showMinute = new Data_Show.Show(function (v) {
      return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showMillisecond = new Data_Show.Show(function (v) {
      return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showHour = new Data_Show.Show(function (v) {
      return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var eqSecond = Data_Eq.eqInt;
  var eqMinute = Data_Eq.eqInt;
  var eqMillisecond = Data_Eq.eqInt;
  var eqHour = Data_Eq.eqInt;
  var boundedSecond = new Data_Bounded.Bounded(function () {
      return ordSecond;
  }, 0, 59);
  var boundedMinute = new Data_Bounded.Bounded(function () {
      return ordMinute;
  }, 0, 59);
  var boundedMillisecond = new Data_Bounded.Bounded(function () {
      return ordMillisecond;
  }, 0, 999);
  var boundedHour = new Data_Bounded.Bounded(function () {
      return ordHour;
  }, 0, 23);
  var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
      return boundedSecond;
  }, function () {
      return enumSecond;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [ n.constructor.name ]);
  });
  var enumSecond = new Data_Enum.Enum(function () {
      return ordSecond;
  }, (function () {
      var $28 = Data_Enum.toEnum(boundedEnumSecond);
      var $29 = Data_Enum.fromEnum(boundedEnumSecond);
      return function ($30) {
          return $28((function (v) {
              return v - 1 | 0;
          })($29($30)));
      };
  })(), (function () {
      var $31 = Data_Enum.toEnum(boundedEnumSecond);
      var $32 = Data_Enum.fromEnum(boundedEnumSecond);
      return function ($33) {
          return $31((function (v) {
              return v + 1 | 0;
          })($32($33)));
      };
  })());
  var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
      return boundedMinute;
  }, function () {
      return enumMinute;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [ n.constructor.name ]);
  });
  var enumMinute = new Data_Enum.Enum(function () {
      return ordMinute;
  }, (function () {
      var $34 = Data_Enum.toEnum(boundedEnumMinute);
      var $35 = Data_Enum.fromEnum(boundedEnumMinute);
      return function ($36) {
          return $34((function (v) {
              return v - 1 | 0;
          })($35($36)));
      };
  })(), (function () {
      var $37 = Data_Enum.toEnum(boundedEnumMinute);
      var $38 = Data_Enum.fromEnum(boundedEnumMinute);
      return function ($39) {
          return $37((function (v) {
              return v + 1 | 0;
          })($38($39)));
      };
  })());
  var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
      return boundedMillisecond;
  }, function () {
      return enumMillisecond;
  }, 1000, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 999) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [ n.constructor.name ]);
  });
  var enumMillisecond = new Data_Enum.Enum(function () {
      return ordMillisecond;
  }, (function () {
      var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
      var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
      return function ($42) {
          return $40((function (v) {
              return v - 1 | 0;
          })($41($42)));
      };
  })(), (function () {
      var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
      var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
      return function ($45) {
          return $43((function (v) {
              return v + 1 | 0;
          })($44($45)));
      };
  })());
  var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
      return boundedHour;
  }, function () {
      return enumHour;
  }, 24, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [ n.constructor.name ]);
  });
  var enumHour = new Data_Enum.Enum(function () {
      return ordHour;
  }, (function () {
      var $46 = Data_Enum.toEnum(boundedEnumHour);
      var $47 = Data_Enum.fromEnum(boundedEnumHour);
      return function ($48) {
          return $46((function (v) {
              return v - 1 | 0;
          })($47($48)));
      };
  })(), (function () {
      var $49 = Data_Enum.toEnum(boundedEnumHour);
      var $50 = Data_Enum.fromEnum(boundedEnumHour);
      return function ($51) {
          return $49((function (v) {
              return v + 1 | 0;
          })($50($51)));
      };
  })());
  exports["eqHour"] = eqHour;
  exports["ordHour"] = ordHour;
  exports["boundedHour"] = boundedHour;
  exports["enumHour"] = enumHour;
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["showHour"] = showHour;
  exports["eqMinute"] = eqMinute;
  exports["ordMinute"] = ordMinute;
  exports["boundedMinute"] = boundedMinute;
  exports["enumMinute"] = enumMinute;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["showMinute"] = showMinute;
  exports["eqSecond"] = eqSecond;
  exports["ordSecond"] = ordSecond;
  exports["boundedSecond"] = boundedSecond;
  exports["enumSecond"] = enumSecond;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["showSecond"] = showSecond;
  exports["eqMillisecond"] = eqMillisecond;
  exports["ordMillisecond"] = ordMillisecond;
  exports["boundedMillisecond"] = boundedMillisecond;
  exports["enumMillisecond"] = enumMillisecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
  exports["showMillisecond"] = showMillisecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Time"] = $PS["Data.Time"] || {};
  var exports = $PS["Data.Time"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Tuple = $PS["Data.Tuple"];
  var $$Math = $PS["Math"];                
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  var showTime = new Data_Show.Show(function (v) {
      return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
  });
  var setSecond = function (s) {
      return function (v) {
          return new Time(v.value0, v.value1, s, v.value3);
      };
  };
  var setMinute = function (m) {
      return function (v) {
          return new Time(v.value0, m, v.value2, v.value3);
      };
  };
  var setMillisecond = function (ms) {
      return function (v) {
          return new Time(v.value0, v.value1, v.value2, ms);
      };
  };
  var setHour = function (h) {
      return function (v) {
          return new Time(h, v.value1, v.value2, v.value3);
      };
  };
  var second = function (v) {
      return v.value2;
  };
  var minute = function (v) {
      return v.value1;
  };
  var millisecond = function (v) {
      return v.value3;
  };
  var millisToTime = function (v) {
      var hours = $$Math.floor(v / 3600000.0);
      var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
      var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
      var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
      return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
  };
  var hour = function (v) {
      return v.value0;
  };
  var timeToMillis = function (t) {
      return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
  };
  var eqTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
      };
  });
  var ordTime = new Data_Ord.Ord(function () {
      return eqTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
          if (v2 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v2 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
      };
  });
  var diff = function (dictDuration) {
      return function (t1) {
          return function (t2) {
              return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
          };
      };
  };
  var boundedTime = new Data_Bounded.Bounded(function () {
      return ordTime;
  }, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
  var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
  var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));
  var adjust = function (dictDuration) {
      return function (d) {
          return function (t) {
              var tLength = timeToMillis(t);
              var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
              var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap()(d$prime) / 8.64e7));
              var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
              var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);
              var wrap = (function () {
                  var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
                  if ($112) {
                      return 1.0;
                  };
                  var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);
                  if ($113) {
                      return -1.0;
                  };
                  return 0.0;
              })();
              return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(8.64e7 * -wrap)));
          };
      };
  };
  exports["Time"] = Time;
  exports["hour"] = hour;
  exports["setHour"] = setHour;
  exports["minute"] = minute;
  exports["setMinute"] = setMinute;
  exports["second"] = second;
  exports["setSecond"] = setSecond;
  exports["millisecond"] = millisecond;
  exports["setMillisecond"] = setMillisecond;
  exports["adjust"] = adjust;
  exports["diff"] = diff;
  exports["eqTime"] = eqTime;
  exports["ordTime"] = ordTime;
  exports["boundedTime"] = boundedTime;
  exports["showTime"] = showTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.DateTime"] = $PS["Data.DateTime"] || {};
  var exports = $PS["Data.DateTime"];
  var $foreign = $PS["Data.DateTime"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var toRecord = function (v) {
      return {
          year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
          month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
          day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
          hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
          minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
          second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
          millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
  };
  var time = function (v) {
      return v.value1;
  };
  var showDateTime = new Data_Show.Show(function (v) {
      return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
  });
  var modifyTimeF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
          };
      };
  };
  var modifyTime = function (f) {
      return function (v) {
          return new DateTime(v.value0, f(v.value1));
      };
  };
  var modifyDateF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
          };
      };
  };
  var modifyDate = function (f) {
      return function (v) {
          return new DateTime(f(v.value0), v.value1);
      };
  };
  var eqDateTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
      };
  });
  var ordDateTime = new Data_Ord.Ord(function () {
      return eqDateTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
      };
  });
  var diff = function (dictDuration) {
      return function (dt1) {
          return function (dt2) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
          };
      };
  };
  var date = function (v) {
      return v.value0;
  };
  var boundedDateTime = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));
  var adjust = function (dictDuration) {
      return function (d) {
          return function (dt) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function (rec) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
              });
          };
      };
  };
  exports["DateTime"] = DateTime;
  exports["date"] = date;
  exports["modifyDate"] = modifyDate;
  exports["modifyDateF"] = modifyDateF;
  exports["time"] = time;
  exports["modifyTime"] = modifyTime;
  exports["modifyTimeF"] = modifyTimeF;
  exports["adjust"] = adjust;
  exports["diff"] = diff;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["boundedDateTime"] = boundedDateTime;
  exports["showDateTime"] = showDateTime;
  exports["April"] = Data_Date.April;
  exports["August"] = Data_Date.August;
  exports["December"] = Data_Date.December;
  exports["February"] = Data_Date.February;
  exports["January"] = Data_Date.January;
  exports["July"] = Data_Date.July;
  exports["June"] = Data_Date.June;
  exports["March"] = Data_Date.March;
  exports["May"] = Data_Date.May;
  exports["November"] = Data_Date.November;
  exports["October"] = Data_Date.October;
  exports["September"] = Data_Date.September;
  exports["Friday"] = Data_Date.Friday;
  exports["Monday"] = Data_Date.Monday;
  exports["Saturday"] = Data_Date.Saturday;
  exports["Sunday"] = Data_Date.Sunday;
  exports["Thursday"] = Data_Date.Thursday;
  exports["Tuesday"] = Data_Date.Tuesday;
  exports["Wednesday"] = Data_Date.Wednesday;
  exports["canonicalDate"] = Data_Date.canonicalDate;
  exports["day"] = Data_Date.day;
  exports["exactDate"] = Data_Date.exactDate;
  exports["month"] = Data_Date.month;
  exports["weekday"] = Data_Date.weekday;
  exports["year"] = Data_Date.year;
  exports["Time"] = Data_Time.Time;
  exports["hour"] = Data_Time.hour;
  exports["millisecond"] = Data_Time.millisecond;
  exports["minute"] = Data_Time.minute;
  exports["second"] = Data_Time.second;
  exports["setHour"] = Data_Time.setHour;
  exports["setMillisecond"] = Data_Time.setMillisecond;
  exports["setMinute"] = Data_Time.setMinute;
  exports["setSecond"] = Data_Time.setSecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Time.Component.Gen"] = $PS["Data.Time.Component.Gen"] || {};
  var exports = $PS["Data.Time.Component.Gen"];
  var Data_Enum_Gen = $PS["Data.Enum.Gen"];
  var Data_Time_Component = $PS["Data.Time.Component"];                
  var genSecond = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumSecond);
  };
  var genMinute = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumMinute);
  };
  var genMillisecond = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumMillisecond);
  };
  var genHour = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumHour);
  };
  exports["genHour"] = genHour;
  exports["genMinute"] = genMinute;
  exports["genSecond"] = genSecond;
  exports["genMillisecond"] = genMillisecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Time.Gen"] = $PS["Data.Time.Gen"] || {};
  var exports = $PS["Data.Time.Gen"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Component_Gen = $PS["Data.Time.Component.Gen"];                
  var genTime = function (dictMonadGen) {
      return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time.Time.create)(Data_Time_Component_Gen.genHour(dictMonadGen)))(Data_Time_Component_Gen.genMinute(dictMonadGen)))(Data_Time_Component_Gen.genSecond(dictMonadGen)))(Data_Time_Component_Gen.genMillisecond(dictMonadGen));
  };
  exports["genTime"] = genTime;
  exports["genHour"] = Data_Time_Component_Gen.genHour;
  exports["genMillisecond"] = Data_Time_Component_Gen.genMillisecond;
  exports["genMinute"] = Data_Time_Component_Gen.genMinute;
  exports["genSecond"] = Data_Time_Component_Gen.genSecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.DateTime.Gen"] = $PS["Data.DateTime.Gen"] || {};
  var exports = $PS["Data.DateTime.Gen"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Date_Gen = $PS["Data.Date.Gen"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Time_Gen = $PS["Data.Time.Gen"];                
  var genDateTime = function (dictMonadGen) {
      return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_DateTime.DateTime.create)(Data_Date_Gen.genDate(dictMonadGen)))(Data_Time_Gen.genTime(dictMonadGen));
  };
  exports["genDateTime"] = genDateTime;
  exports["genDate"] = Data_Date_Gen.genDate;
  exports["genDay"] = Data_Date_Gen.genDay;
  exports["genMonth"] = Data_Date_Gen.genMonth;
  exports["genWeekday"] = Data_Date_Gen.genWeekday;
  exports["genYear"] = Data_Date_Gen.genYear;
  exports["genHour"] = Data_Time_Gen.genHour;
  exports["genMillisecond"] = Data_Time_Gen.genMillisecond;
  exports["genMinute"] = Data_Time_Gen.genMinute;
  exports["genSecond"] = Data_Time_Gen.genSecond;
  exports["genTime"] = Data_Time_Gen.genTime;
})(PS);
(function(exports) {
  "use strict";

  var createDateTime = function (y, m, d, h, mi, s, ms) {
    var dateTime = new Date(Date.UTC(y, m, d, h, mi, s, ms));
    if (y >= 0 && y < 100) {
      dateTime.setUTCFullYear(y);
    }
    return dateTime;
  };

  exports.fromDateTimeImpl = function (y, mo, d, h, mi, s, ms) {
    return createDateTime(y, mo - 1, d, h, mi, s, ms).getTime();
  };

  exports.toDateTimeImpl = function (ctor) {
    return function (instant) {
      var dt = new Date(instant);
      return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  };
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var $foreign = $PS["Data.DateTime.Instant"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var Instant = function (x) {
      return x;
  };
  var unInstant = function (v) {
      return v;
  };
  var toDateTime = (function () {
      var mkDateTime = function (y) {
          return function (mo) {
              return function (d) {
                  return function (h) {
                      return function (mi) {
                          return function (s) {
                              return function (ms) {
                                  return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                              };
                          };
                      };
                  };
              };
          };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
  })();
  var showInstant = new Data_Show.Show(function (v) {
      return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
  });
  var ordDateTime = Data_Time_Duration.ordMilliseconds;
  var instant = function (v) {
      if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
          return new Data_Maybe.Just(v);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [ v.constructor.name ]);
  };
  var fromDateTime = function (v) {
      return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
  };
  var fromDate = function (d) {
      return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
  };
  var eqDateTime = Data_Time_Duration.eqMilliseconds;
  var boundedInstant = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, -8.6399778816e15, 8.639977881599999e15);
  exports["instant"] = instant;
  exports["unInstant"] = unInstant;
  exports["fromDateTime"] = fromDateTime;
  exports["fromDate"] = fromDate;
  exports["toDateTime"] = toDateTime;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["boundedInstant"] = boundedInstant;
  exports["showInstant"] = showInstant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Equivalence"] = $PS["Data.Equivalence"] || {};
  var exports = $PS["Data.Equivalence"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Equivalence = function (x) {
      return x;
  };
  var semigroupEquivalence = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (a) {
              return function (b) {
                  return v(a)(b) && v1(a)(b);
              };
          };
      };
  });
  var newtypeEquivalence = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidEquivalence = new Data_Monoid.Monoid(function () {
      return semigroupEquivalence;
  }, function (v) {
      return function (v1) {
          return true;
      };
  });
  var defaultEquivalence = function (dictEq) {
      return Data_Eq.eq(dictEq);
  };
  var contravariantEquivalence = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return Data_Function.on(v)(f);
      };
  });
  var comparisonEquivalence = function (v) {
      return function (a) {
          return function (b) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(v(a)(b))(Data_Ordering.EQ.value);
          };
      };
  };
  exports["Equivalence"] = Equivalence;
  exports["defaultEquivalence"] = defaultEquivalence;
  exports["comparisonEquivalence"] = comparisonEquivalence;
  exports["newtypeEquivalence"] = newtypeEquivalence;
  exports["contravariantEquivalence"] = contravariantEquivalence;
  exports["semigroupEquivalence"] = semigroupEquivalence;
  exports["monoidEquivalence"] = monoidEquivalence;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Op"] = $PS["Data.Op"] || {};
  var exports = $PS["Data.Op"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Op = function (x) {
      return x;
  };
  var semigroupoidOp = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return function ($9) {
              return v1(v($9));
          };
      };
  });
  var semigroupOp = function (dictSemigroup) {
      return Data_Semigroup.semigroupFn(dictSemigroup);
  };
  var newtypeOp = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidOp = function (dictMonoid) {
      return Data_Monoid.monoidFn(dictMonoid);
  };
  var contravariantOp = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return function ($10) {
              return v(f($10));
          };
      };
  });
  var categoryOp = new Control_Category.Category(function () {
      return semigroupoidOp;
  }, Control_Category.identity(Control_Category.categoryFn));
  exports["Op"] = Op;
  exports["newtypeOp"] = newtypeOp;
  exports["semigroupOp"] = semigroupOp;
  exports["monoidOp"] = monoidOp;
  exports["semigroupoidOp"] = semigroupoidOp;
  exports["categoryOp"] = categoryOp;
  exports["contravariantOp"] = contravariantOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Predicate"] = $PS["Data.Predicate"] || {};
  var exports = $PS["Data.Predicate"];
  var Data_BooleanAlgebra = $PS["Data.BooleanAlgebra"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var Predicate = function (x) {
      return x;
  };
  var newtypePredicate = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var heytingAlgebraPredicate = Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean);
  var contravariantPredicate = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return function ($3) {
              return v(f($3));
          };
      };
  });
  var booleanAlgebraPredicate = Data_BooleanAlgebra.booleanAlgebraFn(Data_BooleanAlgebra.booleanAlgebraBoolean);
  exports["Predicate"] = Predicate;
  exports["newtypePredicate"] = newtypePredicate;
  exports["heytingAlgebraPredicate"] = heytingAlgebraPredicate;
  exports["booleanAlgebraPredicate"] = booleanAlgebraPredicate;
  exports["contravariantPredicate"] = contravariantPredicate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Divide"] = $PS["Data.Divide"] || {};
  var exports = $PS["Data.Divide"];
  var Control_Category = $PS["Control.Category"];
  var Data_Comparison = $PS["Data.Comparison"];
  var Data_Equivalence = $PS["Data.Equivalence"];
  var Data_Op = $PS["Data.Op"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Predicate = $PS["Data.Predicate"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Divide = function (Contravariant0, divide) {
      this.Contravariant0 = Contravariant0;
      this.divide = divide;
  };
  var dividePredicate = new Divide(function () {
      return Data_Predicate.contravariantPredicate;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  var v2 = f(a);
                  return v(v2.value0) && v1(v2.value1);
              };
          };
      };
  });
  var divideOp = function (dictSemigroup) {
      return new Divide(function () {
          return Data_Op.contravariantOp;
      }, function (f) {
          return function (v) {
              return function (v1) {
                  return function (a) {
                      var v2 = f(a);
                      return Data_Semigroup.append(dictSemigroup)(v(v2.value0))(v1(v2.value1));
                  };
              };
          };
      });
  };
  var divideEquivalence = new Divide(function () {
      return Data_Equivalence.contravariantEquivalence;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      var v3 = f(b);
                      return v(v2.value0)(v3.value0) && v1(v2.value1)(v3.value1);
                  };
              };
          };
      };
  });
  var divideComparison = new Divide(function () {
      return Data_Comparison.contravariantComparison;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      var v3 = f(b);
                      return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(v(v2.value0)(v3.value0))(v1(v2.value1)(v3.value1));
                  };
              };
          };
      };
  });
  var divide = function (dict) {
      return dict.divide;
  };
  var divided = function (dictDivide) {
      return divide(dictDivide)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["divide"] = divide;
  exports["Divide"] = Divide;
  exports["divided"] = divided;
  exports["divideComparison"] = divideComparison;
  exports["divideEquivalence"] = divideEquivalence;
  exports["dividePredicate"] = dividePredicate;
  exports["divideOp"] = divideOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Decide"] = $PS["Data.Decide"] || {};
  var exports = $PS["Data.Decide"];
  var Control_Category = $PS["Control.Category"];
  var Data_Divide = $PS["Data.Divide"];
  var Data_Either = $PS["Data.Either"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Decide = function (Divide0, choose) {
      this.Divide0 = Divide0;
      this.choose = choose;
  };
  var choosePredicate = new Decide(function () {
      return Data_Divide.dividePredicate;
  }, function (f) {
      return function (v) {
          return function (v1) {
              var $52 = Data_Either.either(v)(v1);
              return function ($53) {
                  return $52(f($53));
              };
          };
      };
  });
  var chooseOp = function (dictSemigroup) {
      return new Decide(function () {
          return Data_Divide.divideOp(dictSemigroup);
      }, function (f) {
          return function (v) {
              return function (v1) {
                  var $54 = Data_Either.either(v)(v1);
                  return function ($55) {
                      return $54(f($55));
                  };
              };
          };
      });
  };
  var chooseEquivalence = new Decide(function () {
      return Data_Divide.divideEquivalence;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return v(v2.value0)(v3.value0);
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return false;
                          };
                          throw new Error("Failed pattern match at Data.Decide (line 27, column 15 - line 29, column 23): " + [ v3.constructor.name ]);
                      };
                      if (v2 instanceof Data_Either.Right) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return false;
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return v1(v2.value0)(v3.value0);
                          };
                          throw new Error("Failed pattern match at Data.Decide (line 30, column 16 - line 32, column 23): " + [ v3.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Decide (line 26, column 66 - line 32, column 23): " + [ v2.constructor.name ]);
                  };
              };
          };
      };
  });
  var chooseComparison = new Decide(function () {
      return Data_Divide.divideComparison;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return v(v2.value0)(v3.value0);
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return Data_Ordering.LT.value;
                          };
                          throw new Error("Failed pattern match at Data.Decide (line 18, column 15 - line 20, column 20): " + [ v3.constructor.name ]);
                      };
                      if (v2 instanceof Data_Either.Right) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return Data_Ordering.GT.value;
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return v1(v2.value0)(v3.value0);
                          };
                          throw new Error("Failed pattern match at Data.Decide (line 21, column 16 - line 23, column 23): " + [ v3.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Decide (line 17, column 63 - line 23, column 23): " + [ v2.constructor.name ]);
                  };
              };
          };
      };
  });
  var choose = function (dict) {
      return dict.choose;
  };
  var chosen = function (dictDecide) {
      return choose(dictDecide)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["choose"] = choose;
  exports["Decide"] = Decide;
  exports["chosen"] = chosen;
  exports["chooseComparison"] = chooseComparison;
  exports["chooseEquivalence"] = chooseEquivalence;
  exports["choosePredicate"] = choosePredicate;
  exports["chooseOp"] = chooseOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Divisible"] = $PS["Data.Divisible"] || {};
  var exports = $PS["Data.Divisible"];
  var Data_Comparison = $PS["Data.Comparison"];
  var Data_Divide = $PS["Data.Divide"];
  var Data_Equivalence = $PS["Data.Equivalence"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Op = $PS["Data.Op"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Divisible = function (Divide0, conquer) {
      this.Divide0 = Divide0;
      this.conquer = conquer;
  };
  var divisiblePredicate = new Divisible(function () {
      return Data_Divide.dividePredicate;
  }, Data_Function["const"](true));
  var divisibleOp = function (dictMonoid) {
      return new Divisible(function () {
          return Data_Divide.divideOp(dictMonoid.Semigroup0());
      }, Data_Op.Op(Data_Function["const"](Data_Monoid.mempty(dictMonoid))));
  };
  var divisibleEquivalence = new Divisible(function () {
      return Data_Divide.divideEquivalence;
  }, Data_Equivalence.Equivalence(function (v) {
      return function (v1) {
          return true;
      };
  }));
  var divisibleComparison = new Divisible(function () {
      return Data_Divide.divideComparison;
  }, Data_Comparison.Comparison(function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  }));
  var conquer = function (dict) {
      return dict.conquer;
  };
  exports["conquer"] = conquer;
  exports["Divisible"] = Divisible;
  exports["divisibleComparison"] = divisibleComparison;
  exports["divisibleEquivalence"] = divisibleEquivalence;
  exports["divisiblePredicate"] = divisiblePredicate;
  exports["divisibleOp"] = divisibleOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Decidable"] = $PS["Data.Decidable"] || {};
  var exports = $PS["Data.Decidable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Decide = $PS["Data.Decide"];
  var Data_Divisible = $PS["Data.Divisible"];
  var Data_Void = $PS["Data.Void"];                
  var Decidable = function (Decide0, Divisible1, lose) {
      this.Decide0 = Decide0;
      this.Divisible1 = Divisible1;
      this.lose = lose;
  };
  var lose = function (dict) {
      return dict.lose;
  };
  var lost = function (dictDecidable) {
      return lose(dictDecidable)(Control_Category.identity(Control_Category.categoryFn));
  };
  var decidablePredicate = new Decidable(function () {
      return Data_Decide.choosePredicate;
  }, function () {
      return Data_Divisible.divisiblePredicate;
  }, function (f) {
      return function (a) {
          return Data_Void.absurd(f(a));
      };
  });
  var decidableOp = function (dictMonoid) {
      return new Decidable(function () {
          return Data_Decide.chooseOp(dictMonoid.Semigroup0());
      }, function () {
          return Data_Divisible.divisibleOp(dictMonoid);
      }, function (f) {
          return function (a) {
              return Data_Void.absurd(f(a));
          };
      });
  };
  var decidableEquivalence = new Decidable(function () {
      return Data_Decide.chooseEquivalence;
  }, function () {
      return Data_Divisible.divisibleEquivalence;
  }, function (f) {
      return function (a) {
          return Data_Void.absurd(f(a));
      };
  });
  var decidableComparison = new Decidable(function () {
      return Data_Decide.chooseComparison;
  }, function () {
      return Data_Divisible.divisibleComparison;
  }, function (f) {
      return function (a) {
          return function (v) {
              return Data_Void.absurd(f(a));
          };
      };
  });
  exports["lose"] = lose;
  exports["Decidable"] = Decidable;
  exports["lost"] = lost;
  exports["decidableComparison"] = decidableComparison;
  exports["decidableEquivalence"] = decidableEquivalence;
  exports["decidablePredicate"] = decidablePredicate;
  exports["decidableOp"] = decidableOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Either.Inject"] = $PS["Data.Either.Inject"] || {};
  var exports = $PS["Data.Either.Inject"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Inject = function (inj, prj) {
      this.inj = inj;
      this.prj = prj;
  };
  var prj = function (dict) {
      return dict.prj;
  };
  var injectReflexive = new Inject(Control_Category.identity(Control_Category.categoryFn), Data_Maybe.Just.create);
  var injectLeft = new Inject(Data_Either.Left.create, Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value)));
  var inj = function (dict) {
      return dict.inj;
  };
  var injectRight = function (dictInject) {
      return new Inject((function () {
          var $1 = inj(dictInject);
          return function ($2) {
              return Data_Either.Right.create($1($2));
          };
      })(), Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(prj(dictInject)));
  };
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["Inject"] = Inject;
  exports["injectReflexive"] = injectReflexive;
  exports["injectLeft"] = injectLeft;
  exports["injectRight"] = injectRight;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Either.Nested"] = $PS["Data.Either.Nested"] || {};
  var exports = $PS["Data.Either.Nested"];
  var Data_Either = $PS["Data.Either"];
  var Data_Void = $PS["Data.Void"];                
  var in9 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))))));
  };
  var in8 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))));
  };
  var in7 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))));
  };
  var in6 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))));
  };
  var in5 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))));
  };
  var in4 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))));
  };
  var in3 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)));
  };
  var in2 = function (v) {
      return new Data_Either.Right(new Data_Either.Left(v));
  };
  var in10 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))))));
  };
  var in1 = Data_Either.Left.create;
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (y) {
                                          if (y instanceof Data_Either.Left) {
                                              return a(y.value0);
                                          };
                                          if (y instanceof Data_Either.Right) {
                                              if (y.value0 instanceof Data_Either.Left) {
                                                  return b(y.value0.value0);
                                              };
                                              if (y.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                                      return c(y.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return d(y.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return e(y.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return f(y.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested (line 253, column 29 - line 255, column 40): " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested (line 251, column 27 - line 255, column 40): " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 249, column 25 - line 255, column 40): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested (line 247, column 23 - line 255, column 40): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested (line 245, column 21 - line 255, column 40): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested (line 243, column 19 - line 255, column 40): " + [ y.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 241, column 17 - line 255, column 40): " + [ y.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested (line 239, column 15 - line 255, column 40): " + [ y.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested (line 237, column 31 - line 255, column 40): " + [ y.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (y) {
                                      if (y instanceof Data_Either.Left) {
                                          return a(y.value0);
                                      };
                                      if (y instanceof Data_Either.Right) {
                                          if (y.value0 instanceof Data_Either.Left) {
                                              return b(y.value0.value0);
                                          };
                                          if (y.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0 instanceof Data_Either.Left) {
                                                  return c(y.value0.value0.value0);
                                              };
                                              if (y.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return d(y.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return e(y.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return f(y.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 232, column 27 - line 234, column 38): " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested (line 230, column 25 - line 234, column 38): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested (line 228, column 23 - line 234, column 38): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested (line 226, column 21 - line 234, column 38): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 224, column 19 - line 234, column 38): " + [ y.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested (line 222, column 17 - line 234, column 38): " + [ y.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested (line 220, column 15 - line 234, column 38): " + [ y.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested (line 218, column 29 - line 234, column 38): " + [ y.constructor.name ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (y) {
                                  if (y instanceof Data_Either.Left) {
                                      return a(y.value0);
                                  };
                                  if (y instanceof Data_Either.Right) {
                                      if (y.value0 instanceof Data_Either.Left) {
                                          return b(y.value0.value0);
                                      };
                                      if (y.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0 instanceof Data_Either.Left) {
                                              return c(y.value0.value0.value0);
                                          };
                                          if (y.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return d(y.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return e(y.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return f(y.value0.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested (line 213, column 25 - line 215, column 36): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested (line 211, column 23 - line 215, column 36): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 209, column 21 - line 215, column 36): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested (line 207, column 19 - line 215, column 36): " + [ y.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested (line 205, column 17 - line 215, column 36): " + [ y.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested (line 203, column 15 - line 215, column 36): " + [ y.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested (line 201, column 27 - line 215, column 36): " + [ y.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (y) {
                              if (y instanceof Data_Either.Left) {
                                  return a(y.value0);
                              };
                              if (y instanceof Data_Either.Right) {
                                  if (y.value0 instanceof Data_Either.Left) {
                                      return b(y.value0.value0);
                                  };
                                  if (y.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                          return c(y.value0.value0.value0);
                                      };
                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                              return d(y.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return e(y.value0.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 196, column 23 - line 198, column 34): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested (line 194, column 21 - line 198, column 34): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested (line 192, column 19 - line 198, column 34): " + [ y.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested (line 190, column 17 - line 198, column 34): " + [ y.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested (line 188, column 15 - line 198, column 34): " + [ y.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested (line 186, column 25 - line 198, column 34): " + [ y.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (y) {
                          if (y instanceof Data_Either.Left) {
                              return a(y.value0);
                          };
                          if (y instanceof Data_Either.Right) {
                              if (y.value0 instanceof Data_Either.Left) {
                                  return b(y.value0.value0);
                              };
                              if (y.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                      return c(y.value0.value0.value0);
                                  };
                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                          return d(y.value0.value0.value0.value0);
                                      };
                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                              return e(y.value0.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested (line 181, column 21 - line 183, column 32): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested (line 179, column 19 - line 183, column 32): " + [ y.value0.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested (line 177, column 17 - line 183, column 32): " + [ y.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested (line 175, column 15 - line 183, column 32): " + [ y.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested (line 173, column 23 - line 183, column 32): " + [ y.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (y) {
                      if (y instanceof Data_Either.Left) {
                          return a(y.value0);
                      };
                      if (y instanceof Data_Either.Right) {
                          if (y.value0 instanceof Data_Either.Left) {
                              return b(y.value0.value0);
                          };
                          if (y.value0 instanceof Data_Either.Right) {
                              if (y.value0.value0 instanceof Data_Either.Left) {
                                  return c(y.value0.value0.value0);
                              };
                              if (y.value0.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                      return d(y.value0.value0.value0.value0);
                                  };
                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                      return Data_Void.absurd(y.value0.value0.value0.value0);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested (line 168, column 19 - line 170, column 30): " + [ y.value0.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested (line 166, column 17 - line 170, column 30): " + [ y.value0.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested (line 164, column 15 - line 170, column 30): " + [ y.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested (line 162, column 21 - line 170, column 30): " + [ y.constructor.name ]);
                  };
              };
          };
      };
  };
  var either3 = function (a) {
      return function (b) {
          return function (c) {
              return function (y) {
                  if (y instanceof Data_Either.Left) {
                      return a(y.value0);
                  };
                  if (y instanceof Data_Either.Right) {
                      if (y.value0 instanceof Data_Either.Left) {
                          return b(y.value0.value0);
                      };
                      if (y.value0 instanceof Data_Either.Right) {
                          if (y.value0.value0 instanceof Data_Either.Left) {
                              return c(y.value0.value0.value0);
                          };
                          if (y.value0.value0 instanceof Data_Either.Right) {
                              return Data_Void.absurd(y.value0.value0.value0);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested (line 157, column 17 - line 159, column 28): " + [ y.value0.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested (line 155, column 15 - line 159, column 28): " + [ y.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested (line 153, column 19 - line 159, column 28): " + [ y.constructor.name ]);
              };
          };
      };
  };
  var either2 = function (a) {
      return function (b) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return a(y.value0);
              };
              if (y instanceof Data_Either.Right) {
                  if (y.value0 instanceof Data_Either.Left) {
                      return b(y.value0.value0);
                  };
                  if (y.value0 instanceof Data_Either.Right) {
                      return Data_Void.absurd(y.value0.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested (line 148, column 15 - line 150, column 26): " + [ y.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Either.Nested (line 146, column 17 - line 150, column 26): " + [ y.constructor.name ]);
          };
      };
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return function (y) {
                                              if (y instanceof Data_Either.Left) {
                                                  return a(y.value0);
                                              };
                                              if (y instanceof Data_Either.Right) {
                                                  if (y.value0 instanceof Data_Either.Left) {
                                                      return b(y.value0.value0);
                                                  };
                                                  if (y.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                                          return c(y.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return d(y.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return e(y.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                  return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                              };
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                      return j(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 276, column 31 - line 278, column 44): " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                              };
                                                                              throw new Error("Failed pattern match at Data.Either.Nested (line 274, column 29 - line 278, column 44): " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested (line 272, column 27 - line 278, column 44): " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested (line 270, column 25 - line 278, column 44): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 268, column 23 - line 278, column 44): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested (line 266, column 21 - line 278, column 44): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested (line 264, column 19 - line 278, column 44): " + [ y.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested (line 262, column 17 - line 278, column 44): " + [ y.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested (line 260, column 15 - line 278, column 44): " + [ y.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested (line 258, column 34 - line 278, column 44): " + [ y.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1 = function (y) {
      if (y instanceof Data_Either.Left) {
          return y.value0;
      };
      if (y instanceof Data_Either.Right) {
          return Data_Void.absurd(y.value0);
      };
      throw new Error("Failed pattern match at Data.Either.Nested (line 141, column 13 - line 143, column 24): " + [ y.constructor.name ]);
  };
  var at9 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at8 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at7 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at6 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))) {
                  return f(y.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at5 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0 instanceof Data_Either.Left)))) {
                  return f(y.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at4 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0 instanceof Data_Either.Left))) {
                  return f(y.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at10 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["in1"] = in1;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["in4"] = in4;
  exports["in5"] = in5;
  exports["in6"] = in6;
  exports["in7"] = in7;
  exports["in8"] = in8;
  exports["in9"] = in9;
  exports["in10"] = in10;
  exports["at1"] = at1;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["at4"] = at4;
  exports["at5"] = at5;
  exports["at6"] = at6;
  exports["at7"] = at7;
  exports["at8"] = at8;
  exports["at9"] = at9;
  exports["at10"] = at10;
  exports["either1"] = either1;
  exports["either2"] = either2;
  exports["either3"] = either3;
  exports["either4"] = either4;
  exports["either5"] = either5;
  exports["either6"] = either6;
  exports["either7"] = either7;
  exports["either8"] = either8;
  exports["either9"] = either9;
  exports["either10"] = either10;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum.Generic"] = $PS["Data.Enum.Generic"] || {};
  var exports = $PS["Data.Enum.Generic"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded_Generic = $PS["Data.Bounded.Generic"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var GenericEnum = function (genericPred$prime, genericSucc$prime) {
      this["genericPred'"] = genericPred$prime;
      this["genericSucc'"] = genericSucc$prime;
  };
  var GenericBoundedEnum = function (genericCardinality$prime, genericFromEnum$prime, genericToEnum$prime) {
      this["genericCardinality'"] = genericCardinality$prime;
      this["genericFromEnum'"] = genericFromEnum$prime;
      this["genericToEnum'"] = genericToEnum$prime;
  };
  var genericToEnum$prime = function (dict) {
      return dict["genericToEnum'"];
  };
  var genericToEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $90 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $91 = genericToEnum$prime(dictGenericBoundedEnum);
          return function ($92) {
              return $90($91($92));
          };
      };
  };
  var genericSucc$prime = function (dict) {
      return dict["genericSucc'"];
  };
  var genericSucc = function (dictGeneric) {
      return function (dictGenericEnum) {
          var $93 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $94 = genericSucc$prime(dictGenericEnum);
          var $95 = Data_Generic_Rep.from(dictGeneric);
          return function ($96) {
              return $93($94($95($96)));
          };
      };
  };
  var genericPred$prime = function (dict) {
      return dict["genericPred'"];
  };
  var genericPred = function (dictGeneric) {
      return function (dictGenericEnum) {
          var $97 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $98 = genericPred$prime(dictGenericEnum);
          var $99 = Data_Generic_Rep.from(dictGeneric);
          return function ($100) {
              return $97($98($99($100)));
          };
      };
  };
  var genericFromEnum$prime = function (dict) {
      return dict["genericFromEnum'"];
  };
  var genericFromEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $101 = genericFromEnum$prime(dictGenericBoundedEnum);
          var $102 = Data_Generic_Rep.from(dictGeneric);
          return function ($103) {
              return $101($102($103));
          };
      };
  };
  var genericEnumSum = function (dictGenericEnum) {
      return function (dictGenericTop) {
          return function (dictGenericEnum1) {
              return function (dictGenericBottom) {
                  return new GenericEnum(function (v) {
                      if (v instanceof Data_Generic_Rep.Inl) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericPred$prime(dictGenericEnum)(v.value0));
                      };
                      if (v instanceof Data_Generic_Rep.Inr) {
                          var v1 = genericPred$prime(dictGenericEnum1)(v.value0);
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return new Data_Maybe.Just(new Data_Generic_Rep.Inl(Data_Bounded_Generic["genericTop'"](dictGenericTop)));
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return new Data_Maybe.Just(new Data_Generic_Rep.Inr(v1.value0));
                          };
                          throw new Error("Failed pattern match at Data.Enum.Generic (line 30, column 14 - line 32, column 31): " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Enum.Generic (line 28, column 18 - line 32, column 31): " + [ v.constructor.name ]);
                  }, function (v) {
                      if (v instanceof Data_Generic_Rep.Inl) {
                          var v1 = genericSucc$prime(dictGenericEnum)(v.value0);
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return new Data_Maybe.Just(new Data_Generic_Rep.Inr(Data_Bounded_Generic["genericBottom'"](dictGenericBottom)));
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return new Data_Maybe.Just(new Data_Generic_Rep.Inl(v1.value0));
                          };
                          throw new Error("Failed pattern match at Data.Enum.Generic (line 34, column 14 - line 36, column 31): " + [ v1.constructor.name ]);
                      };
                      if (v instanceof Data_Generic_Rep.Inr) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericSucc$prime(dictGenericEnum1)(v.value0));
                      };
                      throw new Error("Failed pattern match at Data.Enum.Generic (line 33, column 18 - line 37, column 36): " + [ v.constructor.name ]);
                  });
              };
          };
      };
  };
  var genericEnumProduct = function (dictGenericEnum) {
      return function (dictGenericTop) {
          return function (dictGenericBottom) {
              return function (dictGenericEnum1) {
                  return function (dictGenericTop1) {
                      return function (dictGenericBottom1) {
                          return new GenericEnum(function (v) {
                              var v1 = genericPred$prime(dictGenericEnum1)(v.value1);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Data_Maybe.Just.create(new Data_Generic_Rep.Product(v.value0, v1.value0));
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Generic_Rep.Product.create)(Data_Bounded_Generic["genericTop'"](dictGenericTop1)))(genericPred$prime(dictGenericEnum)(v.value0));
                              };
                              throw new Error("Failed pattern match at Data.Enum.Generic (line 40, column 32 - line 42, column 59): " + [ v1.constructor.name ]);
                          }, function (v) {
                              var v1 = genericSucc$prime(dictGenericEnum1)(v.value1);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Data_Maybe.Just.create(new Data_Generic_Rep.Product(v.value0, v1.value0));
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Generic_Rep.Product.create)(Data_Bounded_Generic["genericBottom'"](dictGenericBottom1)))(genericSucc$prime(dictGenericEnum)(v.value0));
                              };
                              throw new Error("Failed pattern match at Data.Enum.Generic (line 43, column 32 - line 45, column 62): " + [ v1.constructor.name ]);
                          });
                      };
                  };
              };
          };
      };
  };
  var genericEnumNoArguments = new GenericEnum(function (v) {
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return Data_Maybe.Nothing.value;
  });
  var genericEnumConstructor = function (dictGenericEnum) {
      return new GenericEnum(function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericPred$prime(dictGenericEnum)(v));
      }, function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericSucc$prime(dictGenericEnum)(v));
      });
  };
  var genericEnumArgument = function (dictEnum) {
      return new GenericEnum(function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.pred(dictEnum)(v));
      }, function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.succ(dictEnum)(v));
      });
  };
  var genericCardinality$prime = function (dict) {
      return dict["genericCardinality'"];
  };
  var genericCardinality = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          return Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum));
      };
  };
  var genericBoundedEnumSum = function (dictGenericBoundedEnum) {
      return function (dictGenericBoundedEnum1) {
          return new GenericBoundedEnum(Data_Enum.Cardinality(Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) + Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum1)) | 0), function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericFromEnum$prime(dictGenericBoundedEnum)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericFromEnum$prime(dictGenericBoundedEnum1)(v.value0) + Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) | 0;
              };
              throw new Error("Failed pattern match at Data.Enum.Generic (line 87, column 22 - line 89, column 80): " + [ v.constructor.name ]);
          }, function (n) {
              var to = function (v) {
                  if (n >= 0 && n < v) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericToEnum$prime(dictGenericBoundedEnum)(n));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericToEnum$prime(dictGenericBoundedEnum1)(n - v | 0));
                  };
                  throw new Error("Failed pattern match at Data.Enum.Generic (line 83, column 5 - line 83, column 43): " + [ v.constructor.name ]);
              };
              return to(genericCardinality$prime(dictGenericBoundedEnum));
          });
      };
  };
  var genericBoundedEnumProduct = function (dictGenericBoundedEnum) {
      return function (dictGenericBoundedEnum1) {
          return new GenericBoundedEnum(Data_Enum.Cardinality(Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) * Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum1)) | 0), (function () {
              var from = function (v) {
                  return function (v1) {
                      return (genericFromEnum$prime(dictGenericBoundedEnum)(v1.value0) * v | 0) + genericFromEnum$prime(dictGenericBoundedEnum1)(v1.value1) | 0;
                  };
              };
              return from(genericCardinality$prime(dictGenericBoundedEnum1));
          })(), function (n) {
              var to = function (v) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Product.create)(genericToEnum$prime(dictGenericBoundedEnum)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(n)(v))))(genericToEnum$prime(dictGenericBoundedEnum1)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(n)(v)));
              };
              return to(genericCardinality$prime(dictGenericBoundedEnum1));
          });
      };
  };
  var genericBoundedEnumNoArguments = new GenericBoundedEnum(1, function (v) {
      return 0;
  }, function (i) {
      var $87 = i === 0;
      if ($87) {
          return new Data_Maybe.Just(Data_Generic_Rep.NoArguments.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var genericBoundedEnumConstructor = function (dictGenericBoundedEnum) {
      return new GenericBoundedEnum(Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)), function (v) {
          return genericFromEnum$prime(dictGenericBoundedEnum)(v);
      }, function (i) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericToEnum$prime(dictGenericBoundedEnum)(i));
      });
  };
  var genericBoundedEnumArgument = function (dictBoundedEnum) {
      return new GenericBoundedEnum(Data_Newtype.unwrap()(Data_Enum.cardinality(dictBoundedEnum)), function (v) {
          return Data_Enum.fromEnum(dictBoundedEnum)(v);
      }, function (i) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.toEnum(dictBoundedEnum)(i));
      });
  };
  exports["genericCardinality'"] = genericCardinality$prime;
  exports["genericFromEnum'"] = genericFromEnum$prime;
  exports["genericPred'"] = genericPred$prime;
  exports["genericSucc'"] = genericSucc$prime;
  exports["genericToEnum'"] = genericToEnum$prime;
  exports["GenericEnum"] = GenericEnum;
  exports["genericPred"] = genericPred;
  exports["genericSucc"] = genericSucc;
  exports["GenericBoundedEnum"] = GenericBoundedEnum;
  exports["genericCardinality"] = genericCardinality;
  exports["genericToEnum"] = genericToEnum;
  exports["genericFromEnum"] = genericFromEnum;
  exports["genericEnumNoArguments"] = genericEnumNoArguments;
  exports["genericEnumArgument"] = genericEnumArgument;
  exports["genericEnumConstructor"] = genericEnumConstructor;
  exports["genericEnumSum"] = genericEnumSum;
  exports["genericEnumProduct"] = genericEnumProduct;
  exports["genericBoundedEnumNoArguments"] = genericBoundedEnumNoArguments;
  exports["genericBoundedEnumArgument"] = genericBoundedEnumArgument;
  exports["genericBoundedEnumConstructor"] = genericBoundedEnumConstructor;
  exports["genericBoundedEnumSum"] = genericBoundedEnumSum;
  exports["genericBoundedEnumProduct"] = genericBoundedEnumProduct;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq.Generic"] = $PS["Data.Eq.Generic"] || {};
  var exports = $PS["Data.Eq.Generic"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];                
  var GenericEq = function (genericEq$prime) {
      this["genericEq'"] = genericEq$prime;
  };
  var genericEqNoConstructors = new GenericEq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var genericEqNoArguments = new GenericEq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var genericEqArgument = function (dictEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var genericEq$prime = function (dict) {
      return dict["genericEq'"];
  };
  var genericEqConstructor = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEqProduct = function (dictGenericEq) {
      return function (dictGenericEq1) {
          return new GenericEq(function (v) {
              return function (v1) {
                  return genericEq$prime(dictGenericEq)(v.value0)(v1.value0) && genericEq$prime(dictGenericEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var genericEqSum = function (dictGenericEq) {
      return function (dictGenericEq1) {
          return new GenericEq(function (v) {
              return function (v1) {
                  if (v instanceof Data_Generic_Rep.Inl && v1 instanceof Data_Generic_Rep.Inl) {
                      return genericEq$prime(dictGenericEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr && v1 instanceof Data_Generic_Rep.Inr) {
                      return genericEq$prime(dictGenericEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var genericEq = function (dictGeneric) {
      return function (dictGenericEq) {
          return function (x) {
              return function (y) {
                  return genericEq$prime(dictGenericEq)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["GenericEq"] = GenericEq;
  exports["genericEq'"] = genericEq$prime;
  exports["genericEq"] = genericEq;
  exports["genericEqNoConstructors"] = genericEqNoConstructors;
  exports["genericEqNoArguments"] = genericEqNoArguments;
  exports["genericEqSum"] = genericEqSum;
  exports["genericEqProduct"] = genericEqProduct;
  exports["genericEqConstructor"] = genericEqConstructor;
  exports["genericEqArgument"] = genericEqArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Field"] = $PS["Data.Field"] || {};
  var exports = $PS["Data.Field"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_DivisionRing = $PS["Data.DivisionRing"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var Field = function (DivisionRing1, EuclideanRing0) {
      this.DivisionRing1 = DivisionRing1;
      this.EuclideanRing0 = EuclideanRing0;
  };
  var field = function (dictEuclideanRing) {
      return function (dictDivisionRing) {
          return new Field(function () {
              return dictDivisionRing;
          }, function () {
              return dictEuclideanRing;
          });
      };
  };
  exports["Field"] = Field;
  exports["field"] = field;
  exports["CommutativeRing"] = Data_CommutativeRing.CommutativeRing;
  exports["DivisionRing"] = Data_DivisionRing.DivisionRing;
  exports["recip"] = Data_DivisionRing.recip;
  exports["EuclideanRing"] = Data_EuclideanRing.EuclideanRing;
  exports["degree"] = Data_EuclideanRing.degree;
  exports["div"] = Data_EuclideanRing.div;
  exports["gcd"] = Data_EuclideanRing.gcd;
  exports["lcm"] = Data_EuclideanRing.lcm;
  exports["mod"] = Data_EuclideanRing.mod;
  exports["Ring"] = Data_Ring.Ring;
  exports["negate"] = Data_Ring.negate;
  exports["sub"] = Data_Ring.sub;
  exports["Semiring"] = Data_Semiring.Semiring;
  exports["add"] = Data_Semiring.add;
  exports["mul"] = Data_Semiring.mul;
  exports["one"] = Data_Semiring.one;
  exports["zero"] = Data_Semiring.zero;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var Filterable = function (Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
      this.Compactable0 = Compactable0;
      this.Functor1 = Functor1;
      this.filter = filter;
      this.filterMap = filterMap;
      this.partition = partition;
      this.partitionMap = partitionMap;
  };
  var partitionMapDefault = function (dictFilterable) {
      return function (p) {
          var $82 = Data_Compactable.separate(dictFilterable.Compactable0());
          var $83 = Data_Functor.map(dictFilterable.Functor1())(p);
          return function ($84) {
              return $82($83($84));
          };
      };
  };
  var partitionMap = function (dict) {
      return dict.partitionMap;
  };
  var partition = function (dict) {
      return dict.partition;
  };
  var maybeBool = function (p) {
      return function (x) {
          var $33 = p(x);
          if ($33) {
              return new Data_Maybe.Just(x);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var filterableList = new Filterable(function () {
      return Data_Compactable.compactableList;
  }, function () {
      return Data_List_Types.functorList;
  }, Data_List.filter, function (p) {
      return Data_List.mapMaybe(p);
  }, function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var $36 = p(x);
                  if ($36) {
                      return {
                          no: v.no,
                          yes: new Data_List_Types.Cons(x, v.yes)
                      };
                  };
                  return {
                      no: new Data_List_Types.Cons(x, v.no),
                      yes: v.yes
                  };
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              no: Data_List_Types.Nil.value,
              yes: Data_List_Types.Nil.value
          })(xs);
      };
  }, function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var v1 = p(x);
                  if (v1 instanceof Data_Either.Left) {
                      return {
                          left: new Data_List_Types.Cons(v1.value0, v.left),
                          right: v.right
                      };
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return {
                          left: v.left,
                          right: new Data_List_Types.Cons(v1.value0, v.right)
                      };
                  };
                  throw new Error("Failed pattern match at Data.Filterable (line 190, column 36 - line 192, column 83): " + [ v1.constructor.name ]);
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              left: Data_List_Types.Nil.value,
              right: Data_List_Types.Nil.value
          })(xs);
      };
  });
  var filterableArray = new Filterable(function () {
      return Data_Compactable.compactableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, Data_Array.filter, Data_Array.mapMaybe, Data_Array.partition, function (p) {
      var go = function (acc) {
          return function (x) {
              var v = p(x);
              if (v instanceof Data_Either.Left) {
                  return {
                      left: Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc.left)([ v.value0 ]),
                      right: acc.right
                  };
              };
              if (v instanceof Data_Either.Right) {
                  return {
                      right: Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc.right)([ v.value0 ]),
                      left: acc.left
                  };
              };
              throw new Error("Failed pattern match at Data.Filterable (line 149, column 16 - line 151, column 50): " + [ v.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
          left: [  ],
          right: [  ]
      });
  });
  var filterMapDefault = function (dictFilterable) {
      return function (p) {
          var $85 = Data_Compactable.compact(dictFilterable.Compactable0());
          var $86 = Data_Functor.map(dictFilterable.Functor1())(p);
          return function ($87) {
              return $85($86($87));
          };
      };
  };
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  var partitionDefaultFilterMap = function (dictFilterable) {
      return function (p) {
          return function (xs) {
              return {
                  yes: filterMap(dictFilterable)(maybeBool(p))(xs),
                  no: filterMap(dictFilterable)(maybeBool(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p)))(xs)
              };
          };
      };
  };
  var filterDefaultPartition = function (dictFilterable) {
      return function (p) {
          return function (xs) {
              return (partition(dictFilterable)(p)(xs)).yes;
          };
      };
  };
  var filterDefault = function (dictFilterable) {
      var $88 = filterMap(dictFilterable);
      return function ($89) {
          return $88(maybeBool($89));
      };
  };
  var filter = function (dict) {
      return dict.filter;
  };
  var partitionDefaultFilter = function (dictFilterable) {
      return function (p) {
          return function (xs) {
              return {
                  yes: filter(dictFilterable)(p)(xs),
                  no: filter(dictFilterable)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p))(xs)
              };
          };
      };
  };
  var eitherBool = function (p) {
      return function (x) {
          var $49 = p(x);
          if ($49) {
              return new Data_Either.Right(x);
          };
          return new Data_Either.Left(x);
      };
  };
  var filterDefaultPartitionMap = function (dictFilterable) {
      return function (p) {
          return function (xs) {
              return (partitionMap(dictFilterable)(eitherBool(p))(xs)).right;
          };
      };
  };
  var partitionDefault = function (dictFilterable) {
      return function (p) {
          return function (xs) {
              var o = partitionMap(dictFilterable)(eitherBool(p))(xs);
              return {
                  no: o.left,
                  yes: o.right
              };
          };
      };
  };
  var filterableEither = function (dictMonoid) {
      return new Filterable(function () {
          return Data_Compactable.compactableEither(dictMonoid);
      }, function () {
          return Data_Either.functorEither;
      }, function (p) {
          return filterDefault(filterableEither(dictMonoid))(p);
      }, function (p) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Data_Either.Left(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  var v1 = p(v.value0);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new Data_Either.Right(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Filterable (line 180, column 27 - line 182, column 22): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Filterable (line 171, column 1 - line 184, column 29): " + [ p.constructor.name, v.constructor.name ]);
          };
      }, function (p) {
          return partitionDefault(filterableEither(dictMonoid))(p);
      }, function (p) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return {
                      left: new Data_Either.Left(v.value0),
                      right: new Data_Either.Left(v.value0)
                  };
              };
              if (v instanceof Data_Either.Right) {
                  var v1 = p(v.value0);
                  if (v1 instanceof Data_Either.Left) {
                      return {
                          left: new Data_Either.Right(v1.value0),
                          right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
                      };
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return {
                          left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
                          right: new Data_Either.Right(v1.value0)
                      };
                  };
                  throw new Error("Failed pattern match at Data.Filterable (line 173, column 30 - line 175, column 53): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Filterable (line 171, column 1 - line 184, column 29): " + [ p.constructor.name, v.constructor.name ]);
          };
      });
  };
  var filterableMap = function (dictOrd) {
      return new Filterable(function () {
          return Data_Compactable.compactableMap(dictOrd);
      }, function () {
          return Data_Map_Internal.functorMap;
      }, function (p) {
          return filterDefault(filterableMap(dictOrd))(p);
      }, function (p) {
          return function (xs) {
              var toList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
              var select = function (v) {
                  return function (m) {
                      return Data_Map_Internal.alter(dictOrd)(Data_Function["const"](p(v.value1)))(v.value0)(m);
                  };
              };
              return Data_Foldable.foldr(Data_List_Types.foldableList)(select)(Data_Map_Internal.empty)(toList(xs));
          };
      }, function (p) {
          return partitionDefault(filterableMap(dictOrd))(p);
      }, function (p) {
          return function (xs) {
              var toList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
              var select = function (v) {
                  return function (v1) {
                      var v2 = p(v.value1);
                      if (v2 instanceof Data_Either.Left) {
                          return {
                              left: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.left),
                              right: v1.right
                          };
                      };
                      if (v2 instanceof Data_Either.Right) {
                          return {
                              left: v1.left,
                              right: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.right)
                          };
                      };
                      throw new Error("Failed pattern match at Data.Filterable (line 215, column 44 - line 217, column 57): " + [ v2.constructor.name ]);
                  };
              };
              return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
                  left: Data_Map_Internal.empty,
                  right: Data_Map_Internal.empty
              })(toList(xs));
          };
      });
  };
  var filterableMaybe = new Filterable(function () {
      return Data_Compactable.compactableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (p) {
      return filterDefault(filterableMaybe)(p);
  }, Control_Bind.bindFlipped(Data_Maybe.bindMaybe), function (p) {
      return partitionDefault(filterableMaybe)(p);
  }, function (p) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return {
                  left: Data_Maybe.Nothing.value,
                  right: Data_Maybe.Nothing.value
              };
          };
          if (v instanceof Data_Maybe.Just) {
              var v1 = p(v.value0);
              if (v1 instanceof Data_Either.Left) {
                  return {
                      left: new Data_Maybe.Just(v1.value0),
                      right: Data_Maybe.Nothing.value
                  };
              };
              if (v1 instanceof Data_Either.Right) {
                  return {
                      left: Data_Maybe.Nothing.value,
                      right: new Data_Maybe.Just(v1.value0)
                  };
              };
              throw new Error("Failed pattern match at Data.Filterable (line 161, column 29 - line 163, column 48): " + [ v1.constructor.name ]);
          };
          throw new Error("Failed pattern match at Data.Filterable (line 159, column 1 - line 169, column 29): " + [ p.constructor.name, v.constructor.name ]);
      };
  });
  var cleared = function (dictFilterable) {
      return filterMap(dictFilterable)(Data_Function["const"](Data_Maybe.Nothing.value));
  };
  exports["Filterable"] = Filterable;
  exports["partitionMap"] = partitionMap;
  exports["partition"] = partition;
  exports["filterMap"] = filterMap;
  exports["filter"] = filter;
  exports["eitherBool"] = eitherBool;
  exports["partitionDefault"] = partitionDefault;
  exports["partitionDefaultFilter"] = partitionDefaultFilter;
  exports["partitionDefaultFilterMap"] = partitionDefaultFilterMap;
  exports["partitionMapDefault"] = partitionMapDefault;
  exports["maybeBool"] = maybeBool;
  exports["filterDefault"] = filterDefault;
  exports["filterDefaultPartition"] = filterDefaultPartition;
  exports["filterDefaultPartitionMap"] = filterDefaultPartitionMap;
  exports["filterMapDefault"] = filterMapDefault;
  exports["cleared"] = cleared;
  exports["filterableArray"] = filterableArray;
  exports["filterableMaybe"] = filterableMaybe;
  exports["filterableEither"] = filterableEither;
  exports["filterableList"] = filterableList;
  exports["filterableMap"] = filterableMap;
  exports["Compactable"] = Data_Compactable.Compactable;
  exports["compact"] = Data_Compactable.compact;
  exports["separate"] = Data_Compactable.separate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Coproduct.Inject"] = $PS["Data.Functor.Coproduct.Inject"] || {};
  var exports = $PS["Data.Functor.Coproduct.Inject"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Inject = function (inj, prj) {
      this.inj = inj;
      this.prj = prj;
  };
  var prj = function (dict) {
      return dict.prj;
  };
  var injectReflexive = new Inject(Control_Category.identity(Control_Category.categoryFn), Data_Maybe.Just.create);
  var injectLeft = new Inject(function ($1) {
      return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($1));
  }, Data_Functor_Coproduct.coproduct(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value)));
  var inj = function (dict) {
      return dict.inj;
  };
  var injectRight = function (dictInject) {
      return new Inject((function () {
          var $2 = inj(dictInject);
          return function ($3) {
              return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($2($3)));
          };
      })(), Data_Functor_Coproduct.coproduct(Data_Function["const"](Data_Maybe.Nothing.value))(prj(dictInject)));
  };
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["Inject"] = Inject;
  exports["injectReflexive"] = injectReflexive;
  exports["injectLeft"] = injectLeft;
  exports["injectRight"] = injectRight;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Coproduct.Nested"] = $PS["Data.Functor.Coproduct.Nested"] || {};
  var exports = $PS["Data.Functor.Coproduct.Nested"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor_Coproduct = $PS["Data.Functor.Coproduct"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Void = $PS["Data.Void"];                
  var in9 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)))))))));
  };
  var in8 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))))))));
  };
  var in7 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)))))));
  };
  var in6 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))))));
  };
  var in5 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)))));
  };
  var in4 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))));
  };
  var in3 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)));
  };
  var in2 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v));
  };
  var in10 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))))))))));
  };
  var in1 = Data_Functor_Coproduct.left;
  var coproduct9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (y) {
                                          if (y instanceof Data_Either.Left) {
                                              return a(y.value0);
                                          };
                                          if (y instanceof Data_Either.Right) {
                                              if (y.value0 instanceof Data_Either.Left) {
                                                  return b(y.value0.value0);
                                              };
                                              if (y.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                                      return c(y.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return d(y.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return e(y.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return f(y.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0.value0.value0.value0.value0.value0));
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 248, column 41 - line 250, column 61): " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 246, column 39 - line 250, column 61): " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 244, column 37 - line 250, column 61): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 242, column 35 - line 250, column 61): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 240, column 33 - line 250, column 61): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 238, column 31 - line 250, column 61): " + [ y.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 236, column 29 - line 250, column 61): " + [ y.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 234, column 27 - line 250, column 61): " + [ y.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 232, column 34 - line 250, column 61): " + [ y.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (y) {
                                      if (y instanceof Data_Either.Left) {
                                          return a(y.value0);
                                      };
                                      if (y instanceof Data_Either.Right) {
                                          if (y.value0 instanceof Data_Either.Left) {
                                              return b(y.value0.value0);
                                          };
                                          if (y.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0 instanceof Data_Either.Left) {
                                                  return c(y.value0.value0.value0);
                                              };
                                              if (y.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return d(y.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return e(y.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return f(y.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0.value0.value0.value0.value0));
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 227, column 39 - line 229, column 59): " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 225, column 37 - line 229, column 59): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 223, column 35 - line 229, column 59): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 221, column 33 - line 229, column 59): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 219, column 31 - line 229, column 59): " + [ y.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 217, column 29 - line 229, column 59): " + [ y.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 215, column 27 - line 229, column 59): " + [ y.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 213, column 32 - line 229, column 59): " + [ y.constructor.name ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (y) {
                                  if (y instanceof Data_Either.Left) {
                                      return a(y.value0);
                                  };
                                  if (y instanceof Data_Either.Right) {
                                      if (y.value0 instanceof Data_Either.Left) {
                                          return b(y.value0.value0);
                                      };
                                      if (y.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0 instanceof Data_Either.Left) {
                                              return c(y.value0.value0.value0);
                                          };
                                          if (y.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return d(y.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return e(y.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return f(y.value0.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0.value0.value0.value0));
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 208, column 37 - line 210, column 57): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 206, column 35 - line 210, column 57): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 204, column 33 - line 210, column 57): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 202, column 31 - line 210, column 57): " + [ y.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 200, column 29 - line 210, column 57): " + [ y.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 198, column 27 - line 210, column 57): " + [ y.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 196, column 30 - line 210, column 57): " + [ y.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (y) {
                              if (y instanceof Data_Either.Left) {
                                  return a(y.value0);
                              };
                              if (y instanceof Data_Either.Right) {
                                  if (y.value0 instanceof Data_Either.Left) {
                                      return b(y.value0.value0);
                                  };
                                  if (y.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                          return c(y.value0.value0.value0);
                                      };
                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                              return d(y.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return e(y.value0.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0.value0.value0));
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 191, column 35 - line 193, column 55): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 189, column 33 - line 193, column 55): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 187, column 31 - line 193, column 55): " + [ y.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 185, column 29 - line 193, column 55): " + [ y.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 183, column 27 - line 193, column 55): " + [ y.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 181, column 28 - line 193, column 55): " + [ y.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (y) {
                          if (y instanceof Data_Either.Left) {
                              return a(y.value0);
                          };
                          if (y instanceof Data_Either.Right) {
                              if (y.value0 instanceof Data_Either.Left) {
                                  return b(y.value0.value0);
                              };
                              if (y.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                      return c(y.value0.value0.value0);
                                  };
                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                          return d(y.value0.value0.value0.value0);
                                      };
                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                              return e(y.value0.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                              return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0.value0));
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 176, column 33 - line 178, column 53): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 174, column 31 - line 178, column 53): " + [ y.value0.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 172, column 29 - line 178, column 53): " + [ y.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 170, column 27 - line 178, column 53): " + [ y.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 168, column 26 - line 178, column 53): " + [ y.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var coproduct4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (y) {
                      if (y instanceof Data_Either.Left) {
                          return a(y.value0);
                      };
                      if (y instanceof Data_Either.Right) {
                          if (y.value0 instanceof Data_Either.Left) {
                              return b(y.value0.value0);
                          };
                          if (y.value0 instanceof Data_Either.Right) {
                              if (y.value0.value0 instanceof Data_Either.Left) {
                                  return c(y.value0.value0.value0);
                              };
                              if (y.value0.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                      return d(y.value0.value0.value0.value0);
                                  };
                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                      return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0));
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 163, column 31 - line 165, column 51): " + [ y.value0.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 161, column 29 - line 165, column 51): " + [ y.value0.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 159, column 27 - line 165, column 51): " + [ y.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 157, column 24 - line 165, column 51): " + [ y.constructor.name ]);
                  };
              };
          };
      };
  };
  var coproduct3 = function (a) {
      return function (b) {
          return function (c) {
              return function (y) {
                  if (y instanceof Data_Either.Left) {
                      return a(y.value0);
                  };
                  if (y instanceof Data_Either.Right) {
                      if (y.value0 instanceof Data_Either.Left) {
                          return b(y.value0.value0);
                      };
                      if (y.value0 instanceof Data_Either.Right) {
                          if (y.value0.value0 instanceof Data_Either.Left) {
                              return c(y.value0.value0.value0);
                          };
                          if (y.value0.value0 instanceof Data_Either.Right) {
                              return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0));
                          };
                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 152, column 29 - line 154, column 49): " + [ y.value0.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 150, column 27 - line 154, column 49): " + [ y.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 148, column 22 - line 154, column 49): " + [ y.constructor.name ]);
              };
          };
      };
  };
  var coproduct2 = function (a) {
      return function (b) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return a(y.value0);
              };
              if (y instanceof Data_Either.Right) {
                  if (y.value0 instanceof Data_Either.Left) {
                      return b(y.value0.value0);
                  };
                  if (y.value0 instanceof Data_Either.Right) {
                      return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0));
                  };
                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 143, column 27 - line 145, column 47): " + [ y.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 141, column 20 - line 145, column 47): " + [ y.constructor.name ]);
          };
      };
  };
  var coproduct10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return function (y) {
                                              if (y instanceof Data_Either.Left) {
                                                  return a(y.value0);
                                              };
                                              if (y instanceof Data_Either.Right) {
                                                  if (y.value0 instanceof Data_Either.Left) {
                                                      return b(y.value0.value0);
                                                  };
                                                  if (y.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                                          return c(y.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return d(y.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return e(y.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                  return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                              };
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                      return j(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                      return Data_Void.absurd(Data_Newtype.unwrap()(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0));
                                                                                  };
                                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 271, column 43 - line 273, column 65): " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                              };
                                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 269, column 41 - line 273, column 65): " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 267, column 39 - line 273, column 65): " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 265, column 37 - line 273, column 65): " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 263, column 35 - line 273, column 65): " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 261, column 33 - line 273, column 65): " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 259, column 31 - line 273, column 65): " + [ y.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 257, column 29 - line 273, column 65): " + [ y.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 255, column 27 - line 273, column 65): " + [ y.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 253, column 37 - line 273, column 65): " + [ y.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct1 = function (y) {
      if (y instanceof Data_Either.Left) {
          return y.value0;
      };
      if (y instanceof Data_Either.Right) {
          return Data_Void.absurd(Data_Newtype.unwrap()(y.value0));
      };
      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested (line 136, column 16 - line 138, column 45): " + [ y.constructor.name ]);
  };
  var at9 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at8 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at7 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at6 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))) {
                  return f(y.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at5 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0 instanceof Data_Either.Left)))) {
                  return f(y.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at4 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0 instanceof Data_Either.Left))) {
                  return f(y.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at10 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["in1"] = in1;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["in4"] = in4;
  exports["in5"] = in5;
  exports["in6"] = in6;
  exports["in7"] = in7;
  exports["in8"] = in8;
  exports["in9"] = in9;
  exports["in10"] = in10;
  exports["at1"] = at1;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["at4"] = at4;
  exports["at5"] = at5;
  exports["at6"] = at6;
  exports["at7"] = at7;
  exports["at8"] = at8;
  exports["at9"] = at9;
  exports["at10"] = at10;
  exports["coproduct1"] = coproduct1;
  exports["coproduct2"] = coproduct2;
  exports["coproduct3"] = coproduct3;
  exports["coproduct4"] = coproduct4;
  exports["coproduct5"] = coproduct5;
  exports["coproduct6"] = coproduct6;
  exports["coproduct7"] = coproduct7;
  exports["coproduct8"] = coproduct8;
  exports["coproduct9"] = coproduct9;
  exports["coproduct10"] = coproduct10;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor.Product.Nested"] = $PS["Data.Functor.Product.Nested"] || {};
  var exports = $PS["Data.Functor.Product.Nested"];
  var Data_Functor_Product = $PS["Data.Functor.Product"];
  var Data_Unit = $PS["Data.Unit"];                
  var product9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Functor_Product.product(h)(Data_Functor_Product.product(i)(Data_Unit.unit)))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var product8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Functor_Product.product(h)(Data_Unit.unit))))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var product7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Unit.unit)))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var product6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Unit.unit))))));
                      };
                  };
              };
          };
      };
  };
  var product5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Unit.unit)))));
                  };
              };
          };
      };
  };
  var product4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Unit.unit))));
              };
          };
      };
  };
  var product3 = function (a) {
      return function (b) {
          return function (c) {
              return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Unit.unit)));
          };
      };
  };
  var product2 = function (a) {
      return function (b) {
          return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Unit.unit));
      };
  };
  var product10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Functor_Product.product(h)(Data_Functor_Product.product(i)(Data_Functor_Product.product(j)(Data_Unit.unit))))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var product1 = function (a) {
      return Data_Functor_Product.product(a)(Data_Unit.unit);
  };
  var get9 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get8 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get7 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value0;
  };
  var get6 = function (v) {
      return v.value1.value1.value1.value1.value1.value0;
  };
  var get5 = function (v) {
      return v.value1.value1.value1.value1.value0;
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get10 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  exports["product1"] = product1;
  exports["product2"] = product2;
  exports["product3"] = product3;
  exports["product4"] = product4;
  exports["product5"] = product5;
  exports["product6"] = product6;
  exports["product7"] = product7;
  exports["product8"] = product8;
  exports["product9"] = product9;
  exports["product10"] = product10;
  exports["get1"] = get1;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
  exports["get5"] = get5;
  exports["get6"] = get6;
  exports["get7"] = get7;
  exports["get8"] = get8;
  exports["get9"] = get9;
  exports["get10"] = get10;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.HeytingAlgebra.Generic"] = $PS["Data.HeytingAlgebra.Generic"] || {};
  var exports = $PS["Data.HeytingAlgebra.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];                
  var GenericHeytingAlgebra = function (genericConj$prime, genericDisj$prime, genericFF$prime, genericImplies$prime, genericNot$prime, genericTT$prime) {
      this["genericConj'"] = genericConj$prime;
      this["genericDisj'"] = genericDisj$prime;
      this["genericFF'"] = genericFF$prime;
      this["genericImplies'"] = genericImplies$prime;
      this["genericNot'"] = genericNot$prime;
      this["genericTT'"] = genericTT$prime;
  };
  var genericTT$prime = function (dict) {
      return dict["genericTT'"];
  };
  var genericTT = function (dictGeneric) {
      return function (dictGenericHeytingAlgebra) {
          return Data_Generic_Rep.to(dictGeneric)(genericTT$prime(dictGenericHeytingAlgebra));
      };
  };
  var genericNot$prime = function (dict) {
      return dict["genericNot'"];
  };
  var genericNot = function (dictGeneric) {
      return function (dictGenericHeytingAlgebra) {
          return function (x) {
              return Data_Generic_Rep.to(dictGeneric)(genericNot$prime(dictGenericHeytingAlgebra)(Data_Generic_Rep.from(dictGeneric)(x)));
          };
      };
  };
  var genericImplies$prime = function (dict) {
      return dict["genericImplies'"];
  };
  var genericImplies = function (dictGeneric) {
      return function (dictGenericHeytingAlgebra) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericImplies$prime(dictGenericHeytingAlgebra)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  var genericHeytingAlgebraNoArguments = new GenericHeytingAlgebra(function (v) {
      return function (v1) {
          return Data_Generic_Rep.NoArguments.value;
      };
  }, function (v) {
      return function (v1) {
          return Data_Generic_Rep.NoArguments.value;
      };
  }, Data_Generic_Rep.NoArguments.value, function (v) {
      return function (v1) {
          return Data_Generic_Rep.NoArguments.value;
      };
  }, function (v) {
      return Data_Generic_Rep.NoArguments.value;
  }, Data_Generic_Rep.NoArguments.value);
  var genericHeytingAlgebraArgument = function (dictHeytingAlgebra) {
      return new GenericHeytingAlgebra(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return Data_HeytingAlgebra.not(dictHeytingAlgebra)(v);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var genericFF$prime = function (dict) {
      return dict["genericFF'"];
  };
  var genericFF = function (dictGeneric) {
      return function (dictGenericHeytingAlgebra) {
          return Data_Generic_Rep.to(dictGeneric)(genericFF$prime(dictGenericHeytingAlgebra));
      };
  };
  var genericDisj$prime = function (dict) {
      return dict["genericDisj'"];
  };
  var genericDisj = function (dictGeneric) {
      return function (dictGenericHeytingAlgebra) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericDisj$prime(dictGenericHeytingAlgebra)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  var genericConj$prime = function (dict) {
      return dict["genericConj'"];
  };
  var genericHeytingAlgebraConstructor = function (dictGenericHeytingAlgebra) {
      return new GenericHeytingAlgebra(function (v) {
          return function (v1) {
              return genericConj$prime(dictGenericHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return genericDisj$prime(dictGenericHeytingAlgebra)(v)(v1);
          };
      }, genericFF$prime(dictGenericHeytingAlgebra), function (v) {
          return function (v1) {
              return genericImplies$prime(dictGenericHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return genericNot$prime(dictGenericHeytingAlgebra)(v);
      }, genericTT$prime(dictGenericHeytingAlgebra));
  };
  var genericHeytingAlgebraProduct = function (dictGenericHeytingAlgebra) {
      return function (dictGenericHeytingAlgebra1) {
          return new GenericHeytingAlgebra(function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericConj$prime(dictGenericHeytingAlgebra)(v.value0)(v1.value0), genericConj$prime(dictGenericHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericDisj$prime(dictGenericHeytingAlgebra)(v.value0)(v1.value0), genericDisj$prime(dictGenericHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, new Data_Generic_Rep.Product(genericFF$prime(dictGenericHeytingAlgebra), genericFF$prime(dictGenericHeytingAlgebra1)), function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericImplies$prime(dictGenericHeytingAlgebra)(v.value0)(v1.value0), genericImplies$prime(dictGenericHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Data_Generic_Rep.Product(genericNot$prime(dictGenericHeytingAlgebra)(v.value0), genericNot$prime(dictGenericHeytingAlgebra1)(v.value1));
          }, new Data_Generic_Rep.Product(genericTT$prime(dictGenericHeytingAlgebra), genericTT$prime(dictGenericHeytingAlgebra1)));
      };
  };
  var genericConj = function (dictGeneric) {
      return function (dictGenericHeytingAlgebra) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericConj$prime(dictGenericHeytingAlgebra)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  exports["genericConj'"] = genericConj$prime;
  exports["genericDisj'"] = genericDisj$prime;
  exports["genericFF'"] = genericFF$prime;
  exports["genericImplies'"] = genericImplies$prime;
  exports["genericNot'"] = genericNot$prime;
  exports["genericTT'"] = genericTT$prime;
  exports["GenericHeytingAlgebra"] = GenericHeytingAlgebra;
  exports["genericFF"] = genericFF;
  exports["genericTT"] = genericTT;
  exports["genericImplies"] = genericImplies;
  exports["genericConj"] = genericConj;
  exports["genericDisj"] = genericDisj;
  exports["genericNot"] = genericNot;
  exports["genericHeytingAlgebraNoArguments"] = genericHeytingAlgebraNoArguments;
  exports["genericHeytingAlgebraArgument"] = genericHeytingAlgebraArgument;
  exports["genericHeytingAlgebraProduct"] = genericHeytingAlgebraProduct;
  exports["genericHeytingAlgebraConstructor"] = genericHeytingAlgebraConstructor;
})(PS);
(function(exports) {
  "use strict";

  // module Data.Int.Bits

  exports.and = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.or = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Int.Bits"] = $PS["Data.Int.Bits"] || {};
  var exports = $PS["Data.Int.Bits"];
  var $foreign = $PS["Data.Int.Bits"];
  exports["and"] = $foreign.and;
  exports["or"] = $foreign.or;
  exports["xor"] = $foreign.xor;
  exports["shl"] = $foreign.shl;
  exports["shr"] = $foreign.shr;
  exports["zshr"] = $foreign.zshr;
  exports["complement"] = $foreign.complement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Interval.Duration"] = $PS["Data.Interval.Duration"] || {};
  var exports = $PS["Data.Interval.Duration"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];                
  var Second = (function () {
      function Second() {

      };
      Second.value = new Second();
      return Second;
  })();
  var Minute = (function () {
      function Minute() {

      };
      Minute.value = new Minute();
      return Minute;
  })();
  var Hour = (function () {
      function Hour() {

      };
      Hour.value = new Hour();
      return Hour;
  })();
  var Day = (function () {
      function Day() {

      };
      Day.value = new Day();
      return Day;
  })();
  var Week = (function () {
      function Week() {

      };
      Week.value = new Week();
      return Week;
  })();
  var Month = (function () {
      function Month() {

      };
      Month.value = new Month();
      return Month;
  })();
  var Year = (function () {
      function Year() {

      };
      Year.value = new Year();
      return Year;
  })();
  var Duration = function (x) {
      return x;
  };
  var showDurationComponent = new Data_Show.Show(function (v) {
      if (v instanceof Minute) {
          return "Minute";
      };
      if (v instanceof Second) {
          return "Second";
      };
      if (v instanceof Hour) {
          return "Hour";
      };
      if (v instanceof Day) {
          return "Day";
      };
      if (v instanceof Week) {
          return "Week";
      };
      if (v instanceof Month) {
          return "Month";
      };
      if (v instanceof Year) {
          return "Year";
      };
      throw new Error("Failed pattern match at Data.Interval.Duration (line 38, column 1 - line 45, column 21): " + [ v.constructor.name ]);
  });
  var showDuration = new Data_Show.Show(function (v) {
      return "(Duration " + (Data_Show.show(Data_Map_Internal.showMap(showDurationComponent)(Data_Show.showNumber))(v) + ")");
  });
  var newtypeDuration = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqDurationComponent = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Second && y instanceof Second) {
              return true;
          };
          if (x instanceof Minute && y instanceof Minute) {
              return true;
          };
          if (x instanceof Hour && y instanceof Hour) {
              return true;
          };
          if (x instanceof Day && y instanceof Day) {
              return true;
          };
          if (x instanceof Week && y instanceof Week) {
              return true;
          };
          if (x instanceof Month && y instanceof Month) {
              return true;
          };
          if (x instanceof Year && y instanceof Year) {
              return true;
          };
          return false;
      };
  });
  var ordDurationComponent = new Data_Ord.Ord(function () {
      return eqDurationComponent;
  }, function (x) {
      return function (y) {
          if (x instanceof Second && y instanceof Second) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Second) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Second) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Minute && y instanceof Minute) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Minute) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Minute) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Hour && y instanceof Hour) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Hour) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Hour) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Day && y instanceof Day) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Day) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Day) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Week && y instanceof Week) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Week) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Week) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Month && y instanceof Month) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Month) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Month) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Year && y instanceof Year) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Interval.Duration (line 36, column 1 - line 36, column 62): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var semigroupDuration = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Map_Internal.unionWith(ordDurationComponent)(Data_Semiring.add(Data_Semiring.semiringNumber))(v)(v1);
      };
  });
  var monoidDuration = new Data_Monoid.Monoid(function () {
      return semigroupDuration;
  }, Data_Map_Internal.empty);
  var eqDuration = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Map_Internal.eqMap(eqDurationComponent)(Data_Eq.eqNumber))(x)(y);
      };
  });
  var ordDuration = new Data_Ord.Ord(function () {
      return eqDuration;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Map_Internal.ordMap(ordDurationComponent)(Data_Ord.ordNumber))(x)(y);
      };
  });
  var durationFromComponent = function (k) {
      return function (v) {
          return Data_Map_Internal.singleton(k)(v);
      };
  };
  var hour = durationFromComponent(Hour.value);
  var millisecond = (function () {
      var $29 = durationFromComponent(Second.value);
      return function ($30) {
          return $29((function (v) {
              return v / 1000.0;
          })($30));
      };
  })();
  var minute = durationFromComponent(Minute.value);
  var month = durationFromComponent(Month.value);
  var second = durationFromComponent(Second.value);
  var week = durationFromComponent(Week.value);
  var year = durationFromComponent(Year.value);
  var day = durationFromComponent(Day.value);
  exports["Duration"] = Duration;
  exports["Second"] = Second;
  exports["Minute"] = Minute;
  exports["Hour"] = Hour;
  exports["Day"] = Day;
  exports["Week"] = Week;
  exports["Month"] = Month;
  exports["Year"] = Year;
  exports["year"] = year;
  exports["month"] = month;
  exports["week"] = week;
  exports["day"] = day;
  exports["hour"] = hour;
  exports["minute"] = minute;
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["eqDuration"] = eqDuration;
  exports["ordDuration"] = ordDuration;
  exports["newtypeDuration"] = newtypeDuration;
  exports["showDuration"] = showDuration;
  exports["semigroupDuration"] = semigroupDuration;
  exports["monoidDuration"] = monoidDuration;
  exports["eqDurationComponent"] = eqDurationComponent;
  exports["ordDurationComponent"] = ordDurationComponent;
  exports["showDurationComponent"] = showDurationComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Interval"] = $PS["Data.Interval"] || {};
  var exports = $PS["Data.Interval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Extend = $PS["Control.Extend"];
  var Data_Bifoldable = $PS["Data.Bifoldable"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Interval_Duration = $PS["Data.Interval.Duration"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var StartEnd = (function () {
      function StartEnd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StartEnd.create = function (value0) {
          return function (value1) {
              return new StartEnd(value0, value1);
          };
      };
      return StartEnd;
  })();
  var DurationEnd = (function () {
      function DurationEnd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DurationEnd.create = function (value0) {
          return function (value1) {
              return new DurationEnd(value0, value1);
          };
      };
      return DurationEnd;
  })();
  var StartDuration = (function () {
      function StartDuration(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StartDuration.create = function (value0) {
          return function (value1) {
              return new StartDuration(value0, value1);
          };
      };
      return StartDuration;
  })();
  var DurationOnly = (function () {
      function DurationOnly(value0) {
          this.value0 = value0;
      };
      DurationOnly.create = function (value0) {
          return new DurationOnly(value0);
      };
      return DurationOnly;
  })();
  var RecurringInterval = (function () {
      function RecurringInterval(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RecurringInterval.create = function (value0) {
          return function (value1) {
              return new RecurringInterval(value0, value1);
          };
      };
      return RecurringInterval;
  })();
  var showInterval = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof StartEnd) {
                  return "(StartEnd " + (Data_Show.show(dictShow1)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
              };
              if (v instanceof DurationEnd) {
                  return "(DurationEnd " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
              };
              if (v instanceof StartDuration) {
                  return "(StartDuration " + (Data_Show.show(dictShow1)(v.value0) + (" " + (Data_Show.show(dictShow)(v.value1) + ")")));
              };
              if (v instanceof DurationOnly) {
                  return "(DurationOnly " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Interval (line 66, column 1 - line 70, column 60): " + [ v.constructor.name ]);
          });
      };
  };
  var showRecurringInterval = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(RecurringInterval " + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(v.value0) + (" " + (Data_Show.show(showInterval(dictShow)(dictShow1))(v.value1) + ")")));
          });
      };
  };
  var over = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(RecurringInterval.create(v.value0))(f(v.value1));
          };
      };
  };
  var interval = function (v) {
      return v.value1;
  };
  var foldableInterval = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableInterval)(dictMonoid);
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof StartEnd) {
                  return v(v(z)(v1.value0))(v1.value1);
              };
              if (v1 instanceof DurationEnd) {
                  return v(z)(v1.value1);
              };
              if (v1 instanceof StartDuration) {
                  return v(z)(v1.value0);
              };
              return z;
          };
      };
  }, function (x) {
      return Data_Foldable.foldrDefault(foldableInterval)(x);
  });
  var foldableRecurringInterval = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableRecurringInterval)(dictMonoid);
  }, function (f) {
      return function (i) {
          var $248 = Data_Foldable.foldl(foldableInterval)(f)(i);
          return function ($249) {
              return $248(interval($249));
          };
      };
  }, function (f) {
      return function (i) {
          var $250 = Data_Foldable.foldr(foldableInterval)(f)(i);
          return function ($251) {
              return $250(interval($251));
          };
      };
  });
  var eqInterval = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof StartEnd && y instanceof StartEnd) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
                  if (x instanceof DurationEnd && y instanceof DurationEnd) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
                  if (x instanceof StartDuration && y instanceof StartDuration) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
                  };
                  if (x instanceof DurationOnly && y instanceof DurationOnly) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var eqRecurringInterval = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0)(y.value0) && Data_Eq.eq(eqInterval(dictEq)(dictEq1))(x.value1)(y.value1);
              };
          });
      };
  };
  var ordInterval = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqInterval(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof StartEnd && y instanceof StartEnd) {
                      var v = Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
                  if (x instanceof StartEnd) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof StartEnd) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof DurationEnd && y instanceof DurationEnd) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
                  if (x instanceof DurationEnd) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof DurationEnd) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof StartDuration && y instanceof StartDuration) {
                      var v = Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
                  };
                  if (x instanceof StartDuration) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof StartDuration) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof DurationOnly && y instanceof DurationOnly) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Interval (line 65, column 1 - line 65, column 68): " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var ordRecurringInterval = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqRecurringInterval(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordInt))(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(ordInterval(dictOrd)(dictOrd1))(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorInterval = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof StartEnd) {
                  return new StartEnd(v1(v2.value0), v1(v2.value1));
              };
              if (v2 instanceof DurationEnd) {
                  return new DurationEnd(v(v2.value0), v1(v2.value1));
              };
              if (v2 instanceof StartDuration) {
                  return new StartDuration(v1(v2.value0), v(v2.value1));
              };
              if (v2 instanceof DurationOnly) {
                  return new DurationOnly(v(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Interval (line 75, column 1 - line 79, column 50): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifunctorRecurringInterval = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new RecurringInterval(v.value0, Data_Bifunctor.bimap(bifunctorInterval)(f)(g)(v.value1));
          };
      };
  });
  var functorInterval = new Data_Functor.Functor(Data_Bifunctor.bimap(bifunctorInterval)(Control_Category.identity(Control_Category.categoryFn)));
  var extendInterval = new Control_Extend.Extend(function () {
      return functorInterval;
  }, function (f) {
      return function (v) {
          if (v instanceof StartEnd) {
              return new StartEnd(f(v), f(v));
          };
          if (v instanceof DurationEnd) {
              return new DurationEnd(v.value0, f(v));
          };
          if (v instanceof StartDuration) {
              return new StartDuration(f(v), v.value1);
          };
          if (v instanceof DurationOnly) {
              return new DurationOnly(v.value0);
          };
          throw new Error("Failed pattern match at Data.Interval (line 111, column 1 - line 115, column 45): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var functorRecurringInterval = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new RecurringInterval(v.value0, Data_Functor.map(functorInterval)(f)(v.value1));
      };
  });
  var extendRecurringInterval = new Control_Extend.Extend(function () {
      return functorRecurringInterval;
  }, function (f) {
      return function (v) {
          return new RecurringInterval(v.value0, Control_Extend.extend(extendInterval)(Data_Function["const"](f(v)))(v.value1));
      };
  });
  var traversableInterval = new Data_Traversable.Traversable(function () {
      return foldableInterval;
  }, function () {
      return functorInterval;
  }, function (dictApplicative) {
      return Data_Traversable.sequenceDefault(traversableInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof StartEnd) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartEnd.create)(v(v1.value0)))(v(v1.value1));
              };
              if (v1 instanceof DurationEnd) {
                  return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v(v1.value1))(DurationEnd.create(v1.value0));
              };
              if (v1 instanceof StartDuration) {
                  return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v(v1.value0))(function (v2) {
                      return new StartDuration(v2, v1.value1);
                  });
              };
              if (v1 instanceof DurationOnly) {
                  return Control_Applicative.pure(dictApplicative)(new DurationOnly(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Interval (line 97, column 1 - line 102, column 29): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableRecurringInterval = new Data_Traversable.Traversable(function () {
      return foldableRecurringInterval;
  }, function () {
      return functorRecurringInterval;
  }, function (dictApplicative) {
      return Data_Traversable.sequenceDefault(traversableRecurringInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (f) {
          return function (i) {
              return over((dictApplicative.Apply0()).Functor0())(Data_Traversable.traverse(traversableInterval)(dictApplicative)(f))(i);
          };
      };
  });
  var bifoldableInterval = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return Data_Bifoldable.bifoldMapDefaultL(bifoldableInterval)(dictMonoid);
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof StartEnd) {
                      return v1(v1(z)(v2.value0))(v2.value1);
                  };
                  if (v2 instanceof DurationEnd) {
                      return v1(v(z)(v2.value0))(v2.value1);
                  };
                  if (v2 instanceof StartDuration) {
                      return v1(v(z)(v2.value1))(v2.value0);
                  };
                  if (v2 instanceof DurationOnly) {
                      return v(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Interval (line 89, column 1 - line 95, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (x) {
      return Data_Bifoldable.bifoldrDefault(bifoldableInterval)(x);
  });
  var bifoldableRecurringInterval = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return Data_Bifoldable.bifoldMapDefaultL(bifoldableRecurringInterval)(dictMonoid);
  }, function (f) {
      return function (g) {
          return function (i) {
              var $252 = Data_Bifoldable.bifoldl(bifoldableInterval)(f)(g)(i);
              return function ($253) {
                  return $252(interval($253));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (i) {
              var $254 = Data_Bifoldable.bifoldr(bifoldableInterval)(f)(g)(i);
              return function ($255) {
                  return $254(interval($255));
              };
          };
      };
  });
  var bitraversableInterval = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableInterval;
  }, function () {
      return bifunctorInterval;
  }, function (dictApplicative) {
      return Data_Bitraversable.bisequenceDefault(bitraversableInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof StartEnd) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartEnd.create)(v1(v2.value0)))(v1(v2.value1));
                  };
                  if (v2 instanceof DurationEnd) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(DurationEnd.create)(v(v2.value0)))(v1(v2.value1));
                  };
                  if (v2 instanceof StartDuration) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartDuration.create)(v1(v2.value0)))(v(v2.value1));
                  };
                  if (v2 instanceof DurationOnly) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(DurationOnly.create)(v(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Interval (line 104, column 1 - line 109, column 33): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableRecurringInterval = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableRecurringInterval;
  }, function () {
      return bifunctorRecurringInterval;
  }, function (dictApplicative) {
      return Data_Bitraversable.bisequenceDefault(bitraversableRecurringInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (l) {
          return function (r) {
              return function (i) {
                  return over((dictApplicative.Apply0()).Functor0())(Data_Bitraversable.bitraverse(bitraversableInterval)(dictApplicative)(l)(r))(i);
              };
          };
      };
  });
  exports["StartEnd"] = StartEnd;
  exports["DurationEnd"] = DurationEnd;
  exports["StartDuration"] = StartDuration;
  exports["DurationOnly"] = DurationOnly;
  exports["RecurringInterval"] = RecurringInterval;
  exports["eqRecurringInterval"] = eqRecurringInterval;
  exports["ordRecurringInterval"] = ordRecurringInterval;
  exports["showRecurringInterval"] = showRecurringInterval;
  exports["functorRecurringInterval"] = functorRecurringInterval;
  exports["bifunctorRecurringInterval"] = bifunctorRecurringInterval;
  exports["foldableRecurringInterval"] = foldableRecurringInterval;
  exports["bifoldableRecurringInterval"] = bifoldableRecurringInterval;
  exports["traversableRecurringInterval"] = traversableRecurringInterval;
  exports["bitraversableRecurringInterval"] = bitraversableRecurringInterval;
  exports["extendRecurringInterval"] = extendRecurringInterval;
  exports["eqInterval"] = eqInterval;
  exports["ordInterval"] = ordInterval;
  exports["showInterval"] = showInterval;
  exports["functorInterval"] = functorInterval;
  exports["bifunctorInterval"] = bifunctorInterval;
  exports["foldableInterval"] = foldableInterval;
  exports["bifoldableInterval"] = bifoldableInterval;
  exports["traversableInterval"] = traversableInterval;
  exports["bitraversableInterval"] = bitraversableInterval;
  exports["extendInterval"] = extendInterval;
  exports["Duration"] = Data_Interval_Duration.Duration;
  exports["Day"] = Data_Interval_Duration.Day;
  exports["Hour"] = Data_Interval_Duration.Hour;
  exports["Minute"] = Data_Interval_Duration.Minute;
  exports["Month"] = Data_Interval_Duration.Month;
  exports["Second"] = Data_Interval_Duration.Second;
  exports["Week"] = Data_Interval_Duration.Week;
  exports["Year"] = Data_Interval_Duration.Year;
  exports["day"] = Data_Interval_Duration.day;
  exports["hour"] = Data_Interval_Duration.hour;
  exports["millisecond"] = Data_Interval_Duration.millisecond;
  exports["minute"] = Data_Interval_Duration.minute;
  exports["month"] = Data_Interval_Duration.month;
  exports["second"] = Data_Interval_Duration.second;
  exports["week"] = Data_Interval_Duration.week;
  exports["year"] = Data_Interval_Duration.year;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Interval.Duration.Iso"] = $PS["Data.Interval.Duration.Iso"] || {};
  var exports = $PS["Data.Interval.Duration.Iso"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Interval_Duration = $PS["Data.Interval.Duration"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var $$Math = $PS["Math"];                
  var IsoDuration = function (x) {
      return x;
  };
  var IsEmpty = (function () {
      function IsEmpty() {

      };
      IsEmpty.value = new IsEmpty();
      return IsEmpty;
  })();
  var InvalidWeekComponentUsage = (function () {
      function InvalidWeekComponentUsage() {

      };
      InvalidWeekComponentUsage.value = new InvalidWeekComponentUsage();
      return InvalidWeekComponentUsage;
  })();
  var ContainsNegativeValue = (function () {
      function ContainsNegativeValue(value0) {
          this.value0 = value0;
      };
      ContainsNegativeValue.create = function (value0) {
          return new ContainsNegativeValue(value0);
      };
      return ContainsNegativeValue;
  })();
  var InvalidFractionalUse = (function () {
      function InvalidFractionalUse(value0) {
          this.value0 = value0;
      };
      InvalidFractionalUse.create = function (value0) {
          return new InvalidFractionalUse(value0);
      };
      return InvalidFractionalUse;
  })();
  var unIsoDuration = function (v) {
      return v;
  };
  var showIsoDuration = new Data_Show.Show(function (v) {
      return "(IsoDuration " + (Data_Show.show(Data_Interval_Duration.showDuration)(v) + ")");
  });
  var showError = new Data_Show.Show(function (v) {
      if (v instanceof IsEmpty) {
          return "(IsEmpty)";
      };
      if (v instanceof InvalidWeekComponentUsage) {
          return "(InvalidWeekComponentUsage)";
      };
      if (v instanceof ContainsNegativeValue) {
          return "(ContainsNegativeValue " + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + ")");
      };
      if (v instanceof InvalidFractionalUse) {
          return "(InvalidFractionalUse " + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + ")");
      };
      throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 43, column 1 - line 47, column 76): " + [ v.constructor.name ]);
  });
  var prettyError = function (v) {
      if (v instanceof IsEmpty) {
          return "Duration is empty (has no components)";
      };
      if (v instanceof InvalidWeekComponentUsage) {
          return "Week component of Duration is used with other components";
      };
      if (v instanceof ContainsNegativeValue) {
          return "Component `" + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + "` contains negative value");
      };
      if (v instanceof InvalidFractionalUse) {
          return "Invalid usage of Fractional value at component `" + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + "`");
      };
      throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 49, column 1 - line 49, column 31): " + [ v.constructor.name ]);
  };
  var eqIsoDuration = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Interval_Duration.eqDuration)(x)(y);
      };
  });
  var ordIsoDuration = new Data_Ord.Ord(function () {
      return eqIsoDuration;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Interval_Duration.ordDuration)(x)(y);
      };
  });
  var eqError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof IsEmpty && y instanceof IsEmpty) {
              return true;
          };
          if (x instanceof InvalidWeekComponentUsage && y instanceof InvalidWeekComponentUsage) {
              return true;
          };
          if (x instanceof ContainsNegativeValue && y instanceof ContainsNegativeValue) {
              return Data_Eq.eq(Data_Interval_Duration.eqDurationComponent)(x.value0)(y.value0);
          };
          if (x instanceof InvalidFractionalUse && y instanceof InvalidFractionalUse) {
              return Data_Eq.eq(Data_Interval_Duration.eqDurationComponent)(x.value0)(y.value0);
          };
          return false;
      };
  });
  var ordError = new Data_Ord.Ord(function () {
      return eqError;
  }, function (x) {
      return function (y) {
          if (x instanceof IsEmpty && y instanceof IsEmpty) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof IsEmpty) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof IsEmpty) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidWeekComponentUsage && y instanceof InvalidWeekComponentUsage) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InvalidWeekComponentUsage) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InvalidWeekComponentUsage) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ContainsNegativeValue && y instanceof ContainsNegativeValue) {
              return Data_Ord.compare(Data_Interval_Duration.ordDurationComponent)(x.value0)(y.value0);
          };
          if (x instanceof ContainsNegativeValue) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ContainsNegativeValue) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidFractionalUse && y instanceof InvalidFractionalUse) {
              return Data_Ord.compare(Data_Interval_Duration.ordDurationComponent)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 42, column 1 - line 42, column 38): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var checkWeekUsage = function (v) {
      var $60 = Data_Maybe.isJust(Data_Map_Internal.lookup(Data_Interval_Duration.ordDurationComponent)(Data_Interval_Duration.Week.value)(v.asMap)) && Data_Map_Internal.size(v.asMap) > 1;
      if ($60) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(InvalidWeekComponentUsage.value);
      };
      return Control_Plus.empty(Data_List_Types.plusList);
  };
  var checkNegativeValues = function (v) {
      return Data_Function.flip(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_List_Types.monoidList))(v.asList)(function (v1) {
          var $64 = v1.value1 >= 0.0;
          if ($64) {
              return Control_Plus.empty(Data_List_Types.plusList);
          };
          return Control_Applicative.pure(Data_List_Types.applicativeList)(new ContainsNegativeValue(v1.value0));
      });
  };
  var checkFractionalUse = function (v) {
      var isFractional = function (a) {
          return $$Math.floor(a) !== a;
      };
      var checkRest = function (rest) {
          return Data_Newtype.unwrap()(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(function ($81) {
              return Data_Monoid_Additive.Additive($$Math.abs(Data_Tuple.snd($81)));
          })(rest)) > 0.0;
      };
      var v1 = (function (v2) {
          return v2.rest;
      })(Data_List.span((function () {
          var $82 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isFractional);
          return function ($83) {
              return $82(Data_Tuple.snd($83));
          };
      })())(v.asList));
      if (v1 instanceof Data_List_Types.Cons && checkRest(v1.value1)) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(new InvalidFractionalUse(v1.value0.value0));
      };
      return Control_Plus.empty(Data_List_Types.plusList);
  };
  var checkEmptiness = function (v) {
      var $76 = Data_List["null"](v.asList);
      if ($76) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(IsEmpty.value);
      };
      return Control_Plus.empty(Data_List_Types.plusList);
  };
  var checkValidIsoDuration = function (v) {
      var check = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidFn(Data_List_Types.monoidList))([ checkWeekUsage, checkEmptiness, checkFractionalUse, checkNegativeValues ]);
      var asList = Data_List.reverse(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v));
      return check({
          asList: asList,
          asMap: v
      });
  };
  var mkIsoDuration = function (d) {
      var v = Data_List_NonEmpty.fromList(checkValidIsoDuration(d));
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Left(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Either.Right(d);
      };
      throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 60, column 19 - line 62, column 35): " + [ v.constructor.name ]);
  };
  exports["unIsoDuration"] = unIsoDuration;
  exports["mkIsoDuration"] = mkIsoDuration;
  exports["IsEmpty"] = IsEmpty;
  exports["InvalidWeekComponentUsage"] = InvalidWeekComponentUsage;
  exports["ContainsNegativeValue"] = ContainsNegativeValue;
  exports["InvalidFractionalUse"] = InvalidFractionalUse;
  exports["prettyError"] = prettyError;
  exports["eqIsoDuration"] = eqIsoDuration;
  exports["ordIsoDuration"] = ordIsoDuration;
  exports["showIsoDuration"] = showIsoDuration;
  exports["eqError"] = eqError;
  exports["ordError"] = ordError;
  exports["showError"] = showError;
})(PS);
(function(exports) {
  // global exports
  "use strict";

  var createDate = function(y, m, d, h, mi, s, ms) {
    var date = new Date(Date.UTC(y, m, d, h, mi, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  var createLocalDate = function(y, m, d, h, mi, s, ms) {
    var date = new Date(y, m, d, h, mi, s, ms);
    if (y >= 0 && y < 100) {
      date.setFullYear(y);
    }
    return date;
  };

  exports.now = function() {
    return new Date();
  };

  exports.isValid = function(date) {
    return !isNaN(date.getTime());
  };

  exports.toInstantImpl = function(just) {
    return function(nothing) {
      return function(date) {
        var t = date.getTime();
        return isNaN(t) ? nothing : just(t);
      };
    };
  };

  exports.fromInstant = function(instant) {
    return new Date(instant);
  };

  exports.jsdate = function(parts) {
    return createDate(
      parts.year,
      parts.month,
      parts.day,
      parts.hour,
      parts.minute,
      parts.second,
      parts.millisecond
    );
  };

  exports.jsdateLocal = function(parts) {
    return function() {
      return createLocalDate(
        parts.year,
        parts.month,
        parts.day,
        parts.hour,
        parts.minute,
        parts.second,
        parts.millisecond
      );
    };
  };

  exports.dateMethod = function(method, date) {
    return date[method]();
  };

  exports.dateMethodEff = function(method, date) {
    return function() {
      return date[method]();
    };
  };

  exports.parse = function(dateString) {
    return function() {
      return new Date(dateString);
    };
  };

  exports.fromTime = function(time) {
    return new Date(time);
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.JSDate"] = $PS["Data.JSDate"] || {};
  var exports = $PS["Data.JSDate"];
  var $foreign = $PS["Data.JSDate"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Foreign = $PS["Foreign"];                
  var toUTCString = function (dt) {
      return $foreign.dateMethod("toUTCString", dt);
  };
  var toTimeString = function (dt) {
      return $foreign.dateMethod("toTimeString", dt);
  };
  var toString = function (dt) {
      return $foreign.dateMethod("toString", dt);
  };
  var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($4) {
      return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
  })($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));
  var toISOString = function (dt) {
      return $foreign.dateMethodEff("toISOString", dt);
  };
  var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);
  var toDateString = function (dt) {
      return $foreign.dateMethod("toDateString", dt);
  };
  var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
  var readDate = Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Date");
  var getUTCSeconds = function (dt) {
      return $foreign.dateMethod("getUTCSeconds", dt);
  };
  var getUTCMonth = function (dt) {
      return $foreign.dateMethod("getUTCMonth", dt);
  };
  var getUTCMinutes = function (dt) {
      return $foreign.dateMethod("getUTCMinutes", dt);
  };
  var getUTCMilliseconds = function (dt) {
      return $foreign.dateMethod("getUTCMilliseconds", dt);
  };
  var getUTCHours = function (dt) {
      return $foreign.dateMethod("getUTCHours", dt);
  };
  var getUTCFullYear = function (dt) {
      return $foreign.dateMethod("getUTCFullYear", dt);
  };
  var getUTCDay = function (dt) {
      return $foreign.dateMethod("getUTCDay", dt);
  };
  var getUTCDate = function (dt) {
      return $foreign.dateMethod("getUTCDate", dt);
  };
  var getTimezoneOffset = function (dt) {
      return $foreign.dateMethodEff("getTimezoneOffset", dt);
  };
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  var showJSDate = new Data_Show.Show(function (a) {
      return "(fromTime " + (Data_Show.show(Data_Show.showNumber)(getTime(a)) + ")");
  });
  var getSeconds = function (dt) {
      return $foreign.dateMethodEff("getSeconds", dt);
  };
  var getMonth = function (dt) {
      return $foreign.dateMethodEff("getMonth", dt);
  };
  var getMinutes = function (dt) {
      return $foreign.dateMethodEff("getMinutes", dt);
  };
  var getMilliseconds = function (dt) {
      return $foreign.dateMethodEff("getMilliseconds", dt);
  };
  var getHours = function (dt) {
      return $foreign.dateMethodEff("getHours", dt);
  };
  var getFullYear = function (dt) {
      return $foreign.dateMethodEff("getFullYear", dt);
  };
  var getDay = function (dt) {
      return $foreign.dateMethodEff("getDay", dt);
  };
  var getDate = function (dt) {
      return $foreign.dateMethodEff("getDate", dt);
  };
  var fromDateTime = function (v) {
      return $foreign.jsdate({
          year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))),
          month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0),
          day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))),
          hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))),
          minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))),
          second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))),
          millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
      });
  };
  var eqJSDate = new Data_Eq.Eq(function (a) {
      return function (b) {
          return getTime(a) === getTime(b);
      };
  });
  var ordJSDate = new Data_Ord.Ord(function () {
      return eqJSDate;
  }, function (a) {
      return function (b) {
          return Data_Ord.compare(Data_Ord.ordNumber)(getTime(a))(getTime(b));
      };
  });
  exports["readDate"] = readDate;
  exports["fromDateTime"] = fromDateTime;
  exports["toDateTime"] = toDateTime;
  exports["toDate"] = toDate;
  exports["toInstant"] = toInstant;
  exports["getTime"] = getTime;
  exports["getUTCDate"] = getUTCDate;
  exports["getUTCDay"] = getUTCDay;
  exports["getUTCFullYear"] = getUTCFullYear;
  exports["getUTCHours"] = getUTCHours;
  exports["getUTCMilliseconds"] = getUTCMilliseconds;
  exports["getUTCMinutes"] = getUTCMinutes;
  exports["getUTCMonth"] = getUTCMonth;
  exports["getUTCSeconds"] = getUTCSeconds;
  exports["getDate"] = getDate;
  exports["getDay"] = getDay;
  exports["getFullYear"] = getFullYear;
  exports["getHours"] = getHours;
  exports["getMilliseconds"] = getMilliseconds;
  exports["getMinutes"] = getMinutes;
  exports["getMonth"] = getMonth;
  exports["getSeconds"] = getSeconds;
  exports["getTimezoneOffset"] = getTimezoneOffset;
  exports["toDateString"] = toDateString;
  exports["toISOString"] = toISOString;
  exports["toString"] = toString;
  exports["toTimeString"] = toTimeString;
  exports["toUTCString"] = toUTCString;
  exports["eqJSDate"] = eqJSDate;
  exports["ordJSDate"] = ordJSDate;
  exports["showJSDate"] = showJSDate;
  exports["isValid"] = $foreign.isValid;
  exports["fromInstant"] = $foreign.fromInstant;
  exports["jsdate"] = $foreign.jsdate;
  exports["jsdateLocal"] = $foreign.jsdateLocal;
  exports["now"] = $foreign.now;
  exports["parse"] = $foreign.parse;
  exports["fromTime"] = $foreign.fromTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Lens.Tuple"] = $PS["Data.Lens.Lens.Tuple"] || {};
  var exports = $PS["Data.Lens.Lens.Tuple"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var _2 = function (dictStrong) {
      return Data_Profunctor_Strong.second(dictStrong);
  };
  var _1 = function (dictStrong) {
      return Data_Profunctor_Strong.first(dictStrong);
  };
  exports["_1"] = _1;
  exports["_2"] = _2;
  exports["first"] = Data_Profunctor_Strong.first;
  exports["second"] = Data_Profunctor_Strong.second;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Shop = $PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var withLens = function (l) {
      return function (f) {
          var v = l(new Data_Lens_Internal_Shop.Shop(Control_Category.identity(Control_Category.categoryFn), function (v1) {
              return function (b) {
                  return b;
              };
          }));
          return f(v.value0)(v.value1);
      };
  };
  var withIndexedLens = function (l) {
      return function (f) {
          var v = l(new Data_Lens_Internal_Shop.Shop(Control_Category.identity(Control_Category.categoryFn), function (v1) {
              return function (b) {
                  return b;
              };
          }));
          return f(v.value0)(v.value1);
      };
  };
  var lensStore = function (l) {
      return withLens(l)(Control_Apply.lift2(Control_Apply.applyFn)(Data_Tuple.Tuple.create));
  };
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  var ilens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(Data_Newtype.un()(Data_Lens_Internal_Indexed.Indexed)(pab)));
          };
      };
  };
  var ilens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return ilens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  var cloneLens = function (l) {
      return function (dictStrong) {
          return withLens(l)(function (x) {
              return function (y) {
                  return function (p) {
                      return lens(x)(y)(dictStrong)(p);
                  };
              };
          });
      };
  };
  var cloneIndexedLens = function (l) {
      return function (dictStrong) {
          return withIndexedLens(l)(function (x) {
              return function (y) {
                  return function (p) {
                      return ilens(x)(y)(dictStrong)(p);
                  };
              };
          });
      };
  };
  exports["lens"] = lens;
  exports["lens'"] = lens$prime;
  exports["withLens"] = withLens;
  exports["cloneLens"] = cloneLens;
  exports["ilens"] = ilens;
  exports["ilens'"] = ilens$prime;
  exports["withIndexedLens"] = withIndexedLens;
  exports["cloneIndexedLens"] = cloneIndexedLens;
  exports["lensStore"] = lensStore;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Lens.Unit"] = $PS["Data.Lens.Lens.Unit"] || {};
  var exports = $PS["Data.Lens.Lens.Unit"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Unit = $PS["Data.Unit"];                
  var united = function (dictStrong) {
      return Data_Lens_Lens.lens(Data_Function["const"](Data_Unit.unit))(Data_Function["const"])(dictStrong);
  };
  exports["united"] = united;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Prism.Either"] = $PS["Data.Lens.Prism.Either"] || {};
  var exports = $PS["Data.Lens.Prism.Either"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];                
  var _Right = function (dictChoice) {
      return Data_Profunctor_Choice.right(dictChoice);
  };
  var _Left = function (dictChoice) {
      return Data_Profunctor_Choice.left(dictChoice);
  };
  exports["_Left"] = _Left;
  exports["_Right"] = _Right;
  exports["left"] = Data_Profunctor_Choice.left;
  exports["right"] = Data_Profunctor_Choice.right;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Prism.Maybe"] = $PS["Data.Lens.Prism.Maybe"] || {};
  var exports = $PS["Data.Lens.Prism.Maybe"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Prism = $PS["Data.Lens.Prism"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];                
  var _Nothing = function (dictChoice) {
      return Data_Lens_Prism.prism(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.maybe(new Data_Either.Right(Data_Unit.unit))(Data_Function["const"](new Data_Either.Left(Data_Maybe.Nothing.value))))(dictChoice);
  };
  var _Just = function (dictChoice) {
      return Data_Lens_Prism.prism(Data_Maybe.Just.create)(Data_Maybe.maybe(new Data_Either.Left(Data_Maybe.Nothing.value))(Data_Either.Right.create))(dictChoice);
  };
  exports["_Nothing"] = _Nothing;
  exports["_Just"] = _Just;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Common"] = $PS["Data.Lens.Common"] || {};
  var exports = $PS["Data.Lens.Common"];
  var Data_Lens_Lens_Tuple = $PS["Data.Lens.Lens.Tuple"];
  var Data_Lens_Lens_Unit = $PS["Data.Lens.Lens.Unit"];
  var Data_Lens_Prism_Either = $PS["Data.Lens.Prism.Either"];
  var Data_Lens_Prism_Maybe = $PS["Data.Lens.Prism.Maybe"];                
  var simple = function (x) {
      return x;
  };
  exports["simple"] = simple;
  exports["_1"] = Data_Lens_Lens_Tuple["_1"];
  exports["_2"] = Data_Lens_Lens_Tuple["_2"];
  exports["first"] = Data_Lens_Lens_Tuple.first;
  exports["second"] = Data_Lens_Lens_Tuple.second;
  exports["united"] = Data_Lens_Lens_Unit.united;
  exports["_Left"] = Data_Lens_Prism_Either["_Left"];
  exports["_Right"] = Data_Lens_Prism_Either["_Right"];
  exports["left"] = Data_Lens_Prism_Either.left;
  exports["right"] = Data_Lens_Prism_Either.right;
  exports["_Just"] = Data_Lens_Prism_Maybe["_Just"];
  exports["_Nothing"] = Data_Lens_Prism_Maybe["_Nothing"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var view = function (l) {
      return Data_Newtype.unwrap()(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  var use = function (dictMonadState) {
      return function (p) {
          return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
              return viewOn(v)(p);
          });
      };
  };
  var to = function (f) {
      return function (p) {
          var $3 = Data_Newtype.unwrap()(p);
          return function ($4) {
              return $3(f($4));
          };
      };
  };
  var takeBoth = function (l) {
      return function (r) {
          return to(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(view(l))(view(r)));
      };
  };
  var iview = function (l) {
      return Data_Newtype.unwrap()(l(Data_Lens_Internal_Indexed.Indexed(Control_Category.identity(Control_Category.categoryFn))));
  };
  var iuse = function (dictMonadState) {
      return function (p) {
          return Control_Monad_State_Class.gets(dictMonadState)(iview(p));
      };
  };
  var cloneGetter = function (g) {
      return to(view(g));
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
  exports["to"] = to;
  exports["takeBoth"] = takeBoth;
  exports["use"] = use;
  exports["iview"] = iview;
  exports["iuse"] = iuse;
  exports["cloneGetter"] = cloneGetter;
  exports["Indexed"] = Data_Lens_Types.Indexed;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Grate"] = $PS["Data.Lens.Grate"] || {};
  var exports = $PS["Data.Lens.Grate"];
  var Control_Category = $PS["Control.Category"];
  var Data_Distributive = $PS["Data.Distributive"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Closed = $PS["Data.Profunctor.Closed"];                
  var zipWithOf = function (g) {
      return function (f) {
          return Data_Newtype.unwrap()(g(f));
      };
  };
  var zipFWithOf = function (g) {
      return function (f) {
          return Data_Newtype.unwrap()(g(f));
      };
  };
  var withGrate = function (g) {
      return Data_Newtype.unwrap()(g(function (f) {
          return f(Control_Category.identity(Control_Category.categoryFn));
      }));
  };
  var grate = function (f) {
      return function (dictClosed) {
          return function (pab) {
              return Data_Profunctor.dimap(dictClosed.Profunctor0())(Data_Function.applyFlipped)(f)(Data_Profunctor_Closed.closed(dictClosed)(pab));
          };
      };
  };
  var cotraversed = function (dictDistributive) {
      return function (dictClosed) {
          return grate(function (f) {
              return Data_Distributive.cotraverse(dictDistributive)(Data_Functor.functorFn)(f)(Control_Category.identity(Control_Category.categoryFn));
          })(dictClosed);
      };
  };
  var collectOf = function (dictFunctor) {
      return function (g) {
          return function (f) {
              var $5 = zipFWithOf(g)(Control_Category.identity(Control_Category.categoryFn));
              var $6 = Data_Functor.map(dictFunctor)(f);
              return function ($7) {
                  return $5($6($7));
              };
          };
      };
  };
  var cloneGrate = function (g) {
      return function (dictClosed) {
          return grate(withGrate(g))(dictClosed);
      };
  };
  exports["grate"] = grate;
  exports["withGrate"] = withGrate;
  exports["cloneGrate"] = cloneGrate;
  exports["cotraversed"] = cotraversed;
  exports["zipWithOf"] = zipWithOf;
  exports["zipFWithOf"] = zipFWithOf;
  exports["collectOf"] = collectOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Exchange = $PS["Data.Lens.Internal.Exchange"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var withIso = function (l) {
      return function (f) {
          var v = l(new Data_Lens_Internal_Exchange.Exchange(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn)));
          return f(v.value0)(v.value1);
      };
  };
  var under = function (l) {
      return withIso(l)(function (sa) {
          return function (bt) {
              return function (ts) {
                  return function ($19) {
                      return sa(ts(bt($19)));
                  };
              };
          };
      });
  };
  var re = function (t) {
      return Data_Newtype.unwrap()(t(Control_Category.identity(Control_Category.categoryFn)));
  };
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  var mapping = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (l) {
              return function (dictProfunctor) {
                  return withIso(l)(function (sa) {
                      return function (bt) {
                          return iso(Data_Functor.map(dictFunctor)(sa))(Data_Functor.map(dictFunctor1)(bt))(dictProfunctor);
                      };
                  });
              };
          };
      };
  };
  var non = function (dictEq) {
      return function (def) {
          return function (dictProfunctor) {
              var g = function (a) {
                  if (Data_Eq.eq(dictEq)(a)(def)) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Maybe.Just(a);
                  };
                  throw new Error("Failed pattern match at Data.Lens.Iso (line 45, column 9 - line 46, column 33): " + [ a.constructor.name ]);
              };
              return iso(Data_Maybe.fromMaybe(def))(g)(dictProfunctor);
          };
      };
  };
  var uncurried = function (dictProfunctor) {
      return iso(Data_Tuple.uncurry)(Data_Tuple.curry)(dictProfunctor);
  };
  var flipped = function (dictProfunctor) {
      return iso(Data_Function.flip)(Data_Function.flip)(dictProfunctor);
  };
  var dimapping = function (dictProfunctor) {
      return function (dictProfunctor1) {
          return function (f) {
              return function (g) {
                  return function (dictProfunctor2) {
                      return withIso(f)(function (sa) {
                          return function (bt) {
                              return withIso(g)(function (ssaa) {
                                  return function (bbtt) {
                                      return iso(Data_Profunctor.dimap(dictProfunctor)(sa)(ssaa))(Data_Profunctor.dimap(dictProfunctor1)(bt)(bbtt))(dictProfunctor2);
                                  };
                              });
                          };
                      });
                  };
              };
          };
      };
  };
  var curried = function (dictProfunctor) {
      return iso(Data_Tuple.curry)(Data_Tuple.uncurry)(dictProfunctor);
  };
  var cloneIso = function (l) {
      return function (dictProfunctor) {
          return withIso(l)(function (x) {
              return function (y) {
                  return function (p) {
                      return iso(x)(y)(dictProfunctor)(p);
                  };
              };
          });
      };
  };
  var auf = function (dictProfunctor) {
      return function (l) {
          return withIso(l)(function (sa) {
              return function (bt) {
                  return function (f) {
                      return function (g) {
                          return function (e) {
                              return bt(f(Data_Profunctor.rmap(dictProfunctor)(sa)(g))(e));
                          };
                      };
                  };
              };
          });
      };
  };
  var au = function (l) {
      return withIso(l)(function (sa) {
          return function (bt) {
              return function (f) {
                  return function (e) {
                      return sa(f(bt)(e));
                  };
              };
          };
      });
  };
  exports["iso"] = iso;
  exports["withIso"] = withIso;
  exports["cloneIso"] = cloneIso;
  exports["re"] = re;
  exports["au"] = au;
  exports["auf"] = auf;
  exports["under"] = under;
  exports["non"] = non;
  exports["curried"] = curried;
  exports["uncurried"] = uncurried;
  exports["flipped"] = flipped;
  exports["mapping"] = mapping;
  exports["dimapping"] = dimapping;
  exports["Exchange"] = Data_Lens_Types.Exchange;
  exports["Re"] = Data_Lens_Types.Re;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  var setJust = function (p) {
      var $24 = set(p);
      return function ($25) {
          return $24(Data_Maybe.Just.create($25));
      };
  };
  var subOver = function (dictRing) {
      return function (p) {
          var $26 = over(p);
          var $27 = Data_Function.flip(Data_Ring.sub(dictRing));
          return function ($28) {
              return $26($27($28));
          };
      };
  };
  var mulOver = function (dictSemiring) {
      return function (p) {
          var $29 = over(p);
          var $30 = Data_Function.flip(Data_Semiring.mul(dictSemiring));
          return function ($31) {
              return $29($30($31));
          };
      };
  };
  var modifying = function (dictMonadState) {
      return function (p) {
          return function (f) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(over(p)(f)));
          };
      };
  };
  var mulModifying = function (dictMonadState) {
      return function (dictSemiring) {
          return function (p) {
              var $32 = modifying(dictMonadState)(p);
              var $33 = Data_Function.flip(Data_Semiring.mul(dictSemiring));
              return function ($34) {
                  return $32($33($34));
              };
          };
      };
  };
  var subModifying = function (dictMonadState) {
      return function (dictRing) {
          return function (p) {
              var $35 = modifying(dictMonadState)(p);
              var $36 = Data_Function.flip(Data_Ring.sub(dictRing));
              return function ($37) {
                  return $35($36($37));
              };
          };
      };
  };
  var iover = function (l) {
      return function (f) {
          return l(Data_Lens_Internal_Indexed.Indexed(Data_Tuple.uncurry(f)));
      };
  };
  var divOver = function (dictEuclideanRing) {
      return function (p) {
          var $38 = over(p);
          var $39 = Data_Function.flip(Data_EuclideanRing.div(dictEuclideanRing));
          return function ($40) {
              return $38($39($40));
          };
      };
  };
  var divModifying = function (dictMonadState) {
      return function (dictEuclideanRing) {
          return function (p) {
              var $41 = modifying(dictMonadState)(p);
              var $42 = Data_Function.flip(Data_EuclideanRing.div(dictEuclideanRing));
              return function ($43) {
                  return $41($42($43));
              };
          };
      };
  };
  var disjOver = function (dictHeytingAlgebra) {
      return function (p) {
          var $44 = over(p);
          var $45 = Data_Function.flip(Data_HeytingAlgebra.disj(dictHeytingAlgebra));
          return function ($46) {
              return $44($45($46));
          };
      };
  };
  var disjModifying = function (dictMonadState) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              var $47 = modifying(dictMonadState)(p);
              var $48 = Data_Function.flip(Data_HeytingAlgebra.disj(dictHeytingAlgebra));
              return function ($49) {
                  return $47($48($49));
              };
          };
      };
  };
  var conjOver = function (dictHeytingAlgebra) {
      return function (p) {
          var $50 = over(p);
          var $51 = Data_Function.flip(Data_HeytingAlgebra.conj(dictHeytingAlgebra));
          return function ($52) {
              return $50($51($52));
          };
      };
  };
  var conjModifying = function (dictMonadState) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              var $53 = modifying(dictMonadState)(p);
              var $54 = Data_Function.flip(Data_HeytingAlgebra.conj(dictHeytingAlgebra));
              return function ($55) {
                  return $53($54($55));
              };
          };
      };
  };
  var assign = function (dictMonadState) {
      return function (p) {
          return function (b) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(set(p)(b)));
          };
      };
  };
  var assignJust = function (dictMonadState) {
      return function (p) {
          var $56 = assign(dictMonadState)(p);
          return function ($57) {
              return $56(Data_Maybe.Just.create($57));
          };
      };
  };
  var appendOver = function (dictSemigroup) {
      return function (p) {
          var $58 = over(p);
          var $59 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
          return function ($60) {
              return $58($59($60));
          };
      };
  };
  var appendModifying = function (dictMonadState) {
      return function (dictSemigroup) {
          return function (p) {
              var $61 = modifying(dictMonadState)(p);
              var $62 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
              return function ($63) {
                  return $61($62($63));
              };
          };
      };
  };
  var addOver = function (dictSemiring) {
      return function (p) {
          var $64 = over(p);
          var $65 = Data_Semiring.add(dictSemiring);
          return function ($66) {
              return $64($65($66));
          };
      };
  };
  var addModifying = function (dictMonadState) {
      return function (dictSemiring) {
          return function (p) {
              var $67 = modifying(dictMonadState)(p);
              var $68 = Data_Semiring.add(dictSemiring);
              return function ($69) {
                  return $67($68($69));
              };
          };
      };
  };
  exports["over"] = over;
  exports["iover"] = iover;
  exports["set"] = set;
  exports["addOver"] = addOver;
  exports["subOver"] = subOver;
  exports["mulOver"] = mulOver;
  exports["divOver"] = divOver;
  exports["disjOver"] = disjOver;
  exports["conjOver"] = conjOver;
  exports["appendOver"] = appendOver;
  exports["setJust"] = setJust;
  exports["assign"] = assign;
  exports["modifying"] = modifying;
  exports["addModifying"] = addModifying;
  exports["mulModifying"] = mulModifying;
  exports["subModifying"] = subModifying;
  exports["divModifying"] = divModifying;
  exports["disjModifying"] = disjModifying;
  exports["conjModifying"] = conjModifying;
  exports["appendModifying"] = appendModifying;
  exports["assignJust"] = assignJust;
  exports["Indexed"] = Data_Lens_Types.Indexed;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Iso.Newtype"] = $PS["Data.Lens.Iso.Newtype"] || {};
  var exports = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var _Newtype = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (dictProfunctor) {
              return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
          };
      };
  };
  var unto = function (dictNewtype) {
      return function (v) {
          return function (dictProfunctor) {
              return _Newtype()()(dictProfunctor);
          };
      };
  };
  exports["_Newtype"] = _Newtype;
  exports["unto"] = unto;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Indexed"] = $PS["Data.Lens.Indexed"] || {};
  var exports = $PS["Data.Lens.Indexed"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Compose = $PS["Data.Functor.Compose"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var unIndex = function (dictProfunctor) {
      return function (l) {
          var $12 = Data_Profunctor.dimap(dictProfunctor)(Data_Tuple.snd)(Control_Category.identity(Control_Category.categoryFn));
          return function ($13) {
              return l(Data_Lens_Internal_Indexed.Indexed($12($13)));
          };
      };
  };
  var reindexed = function (dictProfunctor) {
      return function (ij) {
          return function (v) {
              var $14 = Data_Lens_Setter.over(Data_Lens_Iso_Newtype["_Newtype"]()()(Data_Profunctor.profunctorFn))(Data_Profunctor.lcmap(dictProfunctor)(Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongFn)(ij)));
              return function ($15) {
                  return v($14($15));
              };
          };
      };
  };
  var iwander = function (itr) {
      return function (dictWander) {
          var $16 = Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return function (f) {
                  return function (s) {
                      return itr(dictApplicative)(Data_Tuple.curry(f))(s);
                  };
              };
          });
          var $17 = Data_Newtype.unwrap();
          return function ($18) {
              return $16($17($18));
          };
      };
  };
  var positions = function (tr) {
      return function (dictWander) {
          return iwander(function (dictApplicative) {
              return function (f) {
                  return function (s) {
                      return Data_Function.flip(Control_Monad_State.evalState)(0)(Data_Newtype.unwrap()(Data_Function.flip(Data_Newtype.unwrap())(s)(tr(Data_Lens_Internal_Wander.wanderStar(Data_Functor_Compose.applicativeCompose(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(dictApplicative)))(function (a) {
                          return Data_Functor_Compose.Compose(Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(f)(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(a)))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v) {
                              return v + 1 | 0;
                          })));
                      }))));
                  };
              };
          })(dictWander);
      };
  };
  var itraversed = function (dictTraversableWithIndex) {
      return function (dictWander) {
          return iwander(function (dictApplicative) {
              return Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative);
          })(dictWander);
      };
  };
  var asIndex = function (dictProfunctor) {
      return function (l) {
          var $19 = Data_Profunctor.dimap(dictProfunctor)(Data_Tuple.fst)(Control_Category.identity(Control_Category.categoryFn));
          return function ($20) {
              return l(Data_Lens_Internal_Indexed.Indexed($19($20)));
          };
      };
  };
  exports["unIndex"] = unIndex;
  exports["asIndex"] = asIndex;
  exports["reindexed"] = reindexed;
  exports["iwander"] = iwander;
  exports["itraversed"] = itraversed;
  exports["positions"] = positions;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Bazaar"] = $PS["Data.Lens.Internal.Bazaar"] || {};
  var exports = $PS["Data.Lens.Internal.Bazaar"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Bazaar = function (x) {
      return x;
  };
  var runBazaar = function (v) {
      return function (dictApplicative) {
          return v(dictApplicative);
      };
  };
  var profunctorBazaar = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return function (dictApplicative) {
                  return function (pafb) {
                      return function (s) {
                          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(g)(v(dictApplicative)(pafb)(f(s)));
                      };
                  };
              };
          };
      };
  });
  var strongBazaar = new Data_Profunctor_Strong.Strong(function () {
      return profunctorBazaar;
  }, function (v) {
      return function (dictApplicative) {
          return function (pafb) {
              return function (v1) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Data_Tuple.Tuple.create)(v1.value1))(v(dictApplicative)(pafb)(v1.value0));
              };
          };
      };
  }, function (v) {
      return function (dictApplicative) {
          return function (pafb) {
              return function (v1) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v1.value0))(v(dictApplicative)(pafb)(v1.value1));
              };
          };
      };
  });
  var choiceBazaar = new Data_Profunctor_Choice.Choice(function () {
      return profunctorBazaar;
  }, function (v) {
      return function (dictApplicative) {
          return function (pafb) {
              return function (e) {
                  return Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableEither)(dictApplicative)(v(dictApplicative)(pafb))(Control_Applicative.pure(dictApplicative))(e);
              };
          };
      };
  }, function (v) {
      return function (dictApplicative) {
          return function (pafb) {
              return function (e) {
                  return Data_Traversable.traverse(Data_Traversable.traversableEither)(dictApplicative)(v(dictApplicative)(pafb))(e);
              };
          };
      };
  });
  var wanderBazaar = new Data_Lens_Internal_Wander.Wander(function () {
      return choiceBazaar;
  }, function () {
      return strongBazaar;
  }, function (w) {
      return function (v) {
          return function (dictApplicative) {
              return function (pafb) {
                  return function (s) {
                      return w(dictApplicative)(v(dictApplicative)(pafb))(s);
                  };
              };
          };
      };
  });
  exports["Bazaar"] = Bazaar;
  exports["runBazaar"] = runBazaar;
  exports["profunctorBazaar"] = profunctorBazaar;
  exports["strongBazaar"] = strongBazaar;
  exports["choiceBazaar"] = choiceBazaar;
  exports["wanderBazaar"] = wanderBazaar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Traversal"] = $PS["Data.Lens.Traversal"] || {};
  var exports = $PS["Data.Lens.Traversal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Indexed = $PS["Data.Lens.Indexed"];
  var Data_Lens_Internal_Bazaar = $PS["Data.Lens.Internal.Bazaar"];
  var Data_Lens_Internal_Indexed = $PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Star = $PS["Data.Profunctor.Star"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var traversed = function (dictTraversable) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return Data_Traversable.traverse(dictTraversable)(dictApplicative);
          });
      };
  };
  var traverseOf = Data_Newtype.under()()(Data_Profunctor_Star.Star);
  var sequenceOf = function (t) {
      return traverseOf(t)(Control_Category.identity(Control_Category.categoryFn));
  };
  var itraverseOf = function (t) {
      var $24 = Data_Newtype.under()()(Data_Profunctor_Star.Star)(function ($26) {
          return t(Data_Lens_Internal_Indexed.Indexed($26));
      });
      return function ($25) {
          return $24(Data_Tuple.uncurry($25));
      };
  };
  var iforOf = function ($27) {
      return Data_Function.flip(itraverseOf($27));
  };
  var failover = function (dictAlternative) {
      return function (t) {
          return function (f) {
              return function (s) {
                  var v = Data_Newtype.unwrap()(t(Data_Profunctor_Star.Star((function () {
                      var $28 = Data_Tuple.Tuple.create(true);
                      return function ($29) {
                          return $28(f($29));
                      };
                  })())))(s);
                  if (v.value0) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(v.value1);
                  };
                  if (!v.value0) {
                      return Control_Plus.empty(dictAlternative.Plus1());
                  };
                  throw new Error("Failed pattern match at Data.Lens.Traversal (line 97, column 18 - line 99, column 32): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var elementsOf = function (dictWander) {
      return function (tr) {
          return function (pr) {
              return Data_Lens_Indexed.iwander(function (dictApplicative) {
                  return function (f) {
                      return Data_Newtype.unwrap()(tr(Data_Lens_Internal_Wander.wanderStar(dictApplicative))(Data_Lens_Internal_Indexed.Indexed(Data_Profunctor_Star.Star(function (v) {
                          var $21 = pr(v.value0);
                          if ($21) {
                              return f(v.value0)(v.value1);
                          };
                          return Control_Applicative.pure(dictApplicative)(v.value1);
                      }))));
                  };
              })(dictWander);
          };
      };
  };
  var element = function (dictWander) {
      return function (n) {
          return function (tr) {
              return Data_Lens_Indexed.unIndex((dictWander.Choice1()).Profunctor0())(elementsOf(dictWander)(function (dictWander1) {
                  return Data_Lens_Indexed.positions(function (dictWander2) {
                      return tr(dictWander2);
                  })(dictWander1);
              })(function (v) {
                  return v === n;
              }));
          };
      };
  };
  var cloneTraversal = function (l) {
      return function (dictWander) {
          return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
              return Data_Lens_Internal_Bazaar.runBazaar(l(function (dictApplicative1) {
                  return Control_Category.identity(Control_Category.categoryFn);
              }))(dictApplicative);
          });
      };
  };
  exports["traversed"] = traversed;
  exports["element"] = element;
  exports["traverseOf"] = traverseOf;
  exports["sequenceOf"] = sequenceOf;
  exports["failover"] = failover;
  exports["elementsOf"] = elementsOf;
  exports["itraverseOf"] = itraverseOf;
  exports["cloneTraversal"] = cloneTraversal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens"] = $PS["Data.Lens"] || {};
  var exports = $PS["Data.Lens"];
  var Data_Lens_Common = $PS["Data.Lens.Common"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Grate = $PS["Data.Lens.Grate"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Prism = $PS["Data.Lens.Prism"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Lens_Traversal = $PS["Data.Lens.Traversal"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  exports["_1"] = Data_Lens_Common["_1"];
  exports["_2"] = Data_Lens_Common["_2"];
  exports["_Just"] = Data_Lens_Common["_Just"];
  exports["_Left"] = Data_Lens_Common["_Left"];
  exports["_Nothing"] = Data_Lens_Common["_Nothing"];
  exports["_Right"] = Data_Lens_Common["_Right"];
  exports["first"] = Data_Lens_Common.first;
  exports["left"] = Data_Lens_Common.left;
  exports["right"] = Data_Lens_Common.right;
  exports["second"] = Data_Lens_Common.second;
  exports["united"] = Data_Lens_Common.united;
  exports["allOf"] = Data_Lens_Fold.allOf;
  exports["andOf"] = Data_Lens_Fold.andOf;
  exports["anyOf"] = Data_Lens_Fold.anyOf;
  exports["elemOf"] = Data_Lens_Fold.elemOf;
  exports["filtered"] = Data_Lens_Fold.filtered;
  exports["findOf"] = Data_Lens_Fold.findOf;
  exports["firstOf"] = Data_Lens_Fold.firstOf;
  exports["foldMapOf"] = Data_Lens_Fold.foldMapOf;
  exports["foldOf"] = Data_Lens_Fold.foldOf;
  exports["folded"] = Data_Lens_Fold.folded;
  exports["foldlOf"] = Data_Lens_Fold.foldlOf;
  exports["foldrOf"] = Data_Lens_Fold.foldrOf;
  exports["has"] = Data_Lens_Fold.has;
  exports["hasn't"] = Data_Lens_Fold["hasn't"];
  exports["iallOf"] = Data_Lens_Fold.iallOf;
  exports["ianyOf"] = Data_Lens_Fold.ianyOf;
  exports["ifoldMapOf"] = Data_Lens_Fold.ifoldMapOf;
  exports["ifoldlOf"] = Data_Lens_Fold.ifoldlOf;
  exports["ifoldrOf"] = Data_Lens_Fold.ifoldrOf;
  exports["itoListOf"] = Data_Lens_Fold.itoListOf;
  exports["itraverseOf_"] = Data_Lens_Fold.itraverseOf_;
  exports["lastOf"] = Data_Lens_Fold.lastOf;
  exports["lengthOf"] = Data_Lens_Fold.lengthOf;
  exports["maximumOf"] = Data_Lens_Fold.maximumOf;
  exports["minimumOf"] = Data_Lens_Fold.minimumOf;
  exports["notElemOf"] = Data_Lens_Fold.notElemOf;
  exports["orOf"] = Data_Lens_Fold.orOf;
  exports["preview"] = Data_Lens_Fold.preview;
  exports["previewOn"] = Data_Lens_Fold.previewOn;
  exports["productOf"] = Data_Lens_Fold.productOf;
  exports["replicated"] = Data_Lens_Fold.replicated;
  exports["sequenceOf_"] = Data_Lens_Fold.sequenceOf_;
  exports["sumOf"] = Data_Lens_Fold.sumOf;
  exports["toArrayOf"] = Data_Lens_Fold.toArrayOf;
  exports["toArrayOfOn"] = Data_Lens_Fold.toArrayOfOn;
  exports["toListOf"] = Data_Lens_Fold.toListOf;
  exports["toListOfOn"] = Data_Lens_Fold.toListOfOn;
  exports["unfolded"] = Data_Lens_Fold.unfolded;
  exports["cloneGetter"] = Data_Lens_Getter.cloneGetter;
  exports["iuse"] = Data_Lens_Getter.iuse;
  exports["iview"] = Data_Lens_Getter.iview;
  exports["takeBoth"] = Data_Lens_Getter.takeBoth;
  exports["to"] = Data_Lens_Getter.to;
  exports["use"] = Data_Lens_Getter.use;
  exports["view"] = Data_Lens_Getter.view;
  exports["viewOn"] = Data_Lens_Getter.viewOn;
  exports["collectOf"] = Data_Lens_Grate.collectOf;
  exports["zipFWithOf"] = Data_Lens_Grate.zipFWithOf;
  exports["zipWithOf"] = Data_Lens_Grate.zipWithOf;
  exports["au"] = Data_Lens_Iso.au;
  exports["auf"] = Data_Lens_Iso.auf;
  exports["cloneIso"] = Data_Lens_Iso.cloneIso;
  exports["curried"] = Data_Lens_Iso.curried;
  exports["flipped"] = Data_Lens_Iso.flipped;
  exports["iso"] = Data_Lens_Iso.iso;
  exports["non"] = Data_Lens_Iso.non;
  exports["re"] = Data_Lens_Iso.re;
  exports["uncurried"] = Data_Lens_Iso.uncurried;
  exports["under"] = Data_Lens_Iso.under;
  exports["withIso"] = Data_Lens_Iso.withIso;
  exports["cloneLens"] = Data_Lens_Lens.cloneLens;
  exports["lens"] = Data_Lens_Lens.lens;
  exports["lens'"] = Data_Lens_Lens["lens'"];
  exports["lensStore"] = Data_Lens_Lens.lensStore;
  exports["withLens"] = Data_Lens_Lens.withLens;
  exports["clonePrism"] = Data_Lens_Prism.clonePrism;
  exports["is"] = Data_Lens_Prism.is;
  exports["isn't"] = Data_Lens_Prism["isn't"];
  exports["matching"] = Data_Lens_Prism.matching;
  exports["nearly"] = Data_Lens_Prism.nearly;
  exports["only"] = Data_Lens_Prism.only;
  exports["prism"] = Data_Lens_Prism.prism;
  exports["prism'"] = Data_Lens_Prism["prism'"];
  exports["review"] = Data_Lens_Prism.review;
  exports["withPrism"] = Data_Lens_Prism.withPrism;
  exports["addModifying"] = Data_Lens_Setter.addModifying;
  exports["addOver"] = Data_Lens_Setter.addOver;
  exports["appendModifying"] = Data_Lens_Setter.appendModifying;
  exports["appendOver"] = Data_Lens_Setter.appendOver;
  exports["assign"] = Data_Lens_Setter.assign;
  exports["assignJust"] = Data_Lens_Setter.assignJust;
  exports["conjModifying"] = Data_Lens_Setter.conjModifying;
  exports["conjOver"] = Data_Lens_Setter.conjOver;
  exports["disjModifying"] = Data_Lens_Setter.disjModifying;
  exports["disjOver"] = Data_Lens_Setter.disjOver;
  exports["divModifying"] = Data_Lens_Setter.divModifying;
  exports["divOver"] = Data_Lens_Setter.divOver;
  exports["iover"] = Data_Lens_Setter.iover;
  exports["modifying"] = Data_Lens_Setter.modifying;
  exports["mulModifying"] = Data_Lens_Setter.mulModifying;
  exports["mulOver"] = Data_Lens_Setter.mulOver;
  exports["over"] = Data_Lens_Setter.over;
  exports["set"] = Data_Lens_Setter.set;
  exports["setJust"] = Data_Lens_Setter.setJust;
  exports["subModifying"] = Data_Lens_Setter.subModifying;
  exports["subOver"] = Data_Lens_Setter.subOver;
  exports["element"] = Data_Lens_Traversal.element;
  exports["elementsOf"] = Data_Lens_Traversal.elementsOf;
  exports["failover"] = Data_Lens_Traversal.failover;
  exports["itraverseOf"] = Data_Lens_Traversal.itraverseOf;
  exports["sequenceOf"] = Data_Lens_Traversal.sequenceOf;
  exports["traverseOf"] = Data_Lens_Traversal.traverseOf;
  exports["traversed"] = Data_Lens_Traversal.traversed;
  exports["Exchange"] = Data_Lens_Types.Exchange;
  exports["Forget"] = Data_Lens_Types.Forget;
  exports["Indexed"] = Data_Lens_Types.Indexed;
  exports["Market"] = Data_Lens_Types.Market;
  exports["Re"] = Data_Lens_Types.Re;
  exports["Shop"] = Data_Lens_Types.Shop;
  exports["Tagged"] = Data_Lens_Types.Tagged;
  exports["Wander"] = Data_Lens_Types.Wander;
  exports["wander"] = Data_Lens_Types.wander;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.AffineTraversal"] = $PS["Data.Lens.AffineTraversal"] || {};
  var exports = $PS["Data.Lens.AffineTraversal"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Internal_Stall = $PS["Data.Lens.Internal.Stall"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];                
  var withAffineTraversal = function (l) {
      return function (f) {
          var v = l(new Data_Lens_Internal_Stall.Stall(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)), Data_Either.Right.create));
          return f(v.value0)(v.value1);
      };
  };
  var affineTraversal$prime = function (to) {
      return function (dictStrong) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(to)(function (v) {
                      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(v.value0)(v.value1);
                  })(Data_Profunctor_Strong.second(dictStrong)(Data_Profunctor_Choice.right(dictChoice)(pab)));
              };
          };
      };
  };
  var affineTraversal = function (set) {
      return function (pre) {
          return function (dictStrong) {
              return function (dictChoice) {
                  return affineTraversal$prime(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(set)(pre))(dictStrong)(dictChoice);
              };
          };
      };
  };
  var cloneAffineTraversal = function (l) {
      return function (dictStrong) {
          return function (dictChoice) {
              return withAffineTraversal(l)(function (x) {
                  return function (y) {
                      return function (p) {
                          return affineTraversal(x)(y)(dictStrong)(dictChoice)(p);
                      };
                  };
              });
          };
      };
  };
  exports["affineTraversal"] = affineTraversal;
  exports["affineTraversal'"] = affineTraversal$prime;
  exports["withAffineTraversal"] = withAffineTraversal;
  exports["cloneAffineTraversal"] = cloneAffineTraversal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Lens_AffineTraversal = $PS["Data.Lens.AffineTraversal"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Prism_Maybe = $PS["Data.Lens.Prism.Maybe"];
  var Data_List = $PS["Data.List"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Set = $PS["Data.Set"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  };
  var indexSet = function (dictOrd) {
      return new Index(function (x) {
          return function (dictStrong) {
              return function (dictChoice) {
                  var set = function (xs) {
                      return function (v) {
                          return xs;
                      };
                  };
                  var pre = function (xs) {
                      var $26 = Data_Set.member(dictOrd)(x)(xs);
                      if ($26) {
                          return new Data_Either.Right(Data_Unit.unit);
                      };
                      return new Data_Either.Left(xs);
                  };
                  return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
              };
          };
      });
  };
  var indexNonEmptyArray = new Index(function (n) {
      return function (dictStrong) {
          return function (dictChoice) {
              var set = function (s) {
                  return function (b) {
                      return Data_Maybe.fromMaybe(s)(Data_Array_NonEmpty.updateAt(n)(b)(s));
                  };
              };
              var pre = function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_Array_NonEmpty.index(s)(n));
              };
              return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
          };
      };
  });
  var indexMaybe = new Index(function (v) {
      return function (dictStrong) {
          return function (dictChoice) {
              return Data_Lens_Prism_Maybe["_Just"](dictChoice);
          };
      };
  });
  var indexMap = function (dictOrd) {
      return new Index(function (k) {
          return function (dictStrong) {
              return function (dictChoice) {
                  var set = function (s) {
                      return function (b) {
                          return Data_Map_Internal.update(dictOrd)(function (v) {
                              return new Data_Maybe.Just(b);
                          })(k)(s);
                      };
                  };
                  var pre = function (s) {
                      return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_Map_Internal.lookup(dictOrd)(k)(s));
                  };
                  return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
              };
          };
      });
  };
  var indexList = new Index(function (n) {
      return function (dictStrong) {
          return function (dictChoice) {
              var set = function (s) {
                  return function (b) {
                      return Data_Maybe.fromMaybe(s)(Data_List.updateAt(n)(b)(s));
                  };
              };
              var pre = function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_List.index(s)(n));
              };
              return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
          };
      };
  });
  var indexIdentity = new Index(function (v) {
      return function (dictStrong) {
          return function (dictChoice) {
              return Data_Lens_Iso_Newtype["_Newtype"]()()(dictChoice.Profunctor0());
          };
      };
  });
  var indexForeignObject = new Index(function (k) {
      return function (dictStrong) {
          return function (dictChoice) {
              var set = function (s) {
                  return function (b) {
                      return Foreign_Object.update(function (v) {
                          return new Data_Maybe.Just(b);
                      })(k)(s);
                  };
              };
              var pre = function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Foreign_Object.lookup(k)(s));
              };
              return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
          };
      };
  });
  var indexFn = function (dictEq) {
      return new Index(function (i) {
          return function (dictStrong) {
              return function (dictChoice) {
                  return Data_Lens_Lens.lens(function (f) {
                      return f(i);
                  })(function (f) {
                      return function (a) {
                          return function (j) {
                              var $27 = Data_Eq.eq(dictEq)(i)(j);
                              if ($27) {
                                  return a;
                              };
                              return f(j);
                          };
                      };
                  })(dictStrong);
              };
          };
      });
  };
  var indexArray = new Index(function (n) {
      return function (dictStrong) {
          return function (dictChoice) {
              var set = function (s) {
                  return function (b) {
                      return Data_Maybe.fromMaybe(s)(Data_Array.updateAt(n)(b)(s));
                  };
              };
              var pre = function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_Array.index(s)(n));
              };
              return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
          };
      };
  });
  exports["Index"] = Index;
  exports["ix"] = ix;
  exports["indexFn"] = indexFn;
  exports["indexMaybe"] = indexMaybe;
  exports["indexIdentity"] = indexIdentity;
  exports["indexArray"] = indexArray;
  exports["indexNonEmptyArray"] = indexNonEmptyArray;
  exports["indexList"] = indexList;
  exports["indexSet"] = indexSet;
  exports["indexMap"] = indexMap;
  exports["indexForeignObject"] = indexForeignObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.At"] = $PS["Data.Lens.At"] || {};
  var exports = $PS["Data.Lens.At"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Set = $PS["Data.Set"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  };
  var atSet = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexSet(dictOrd);
      }, function (x) {
          return function (dictStrong) {
              var update = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Set["delete"](dictOrd)(x);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Set.insert(dictOrd)(x);
                  };
                  throw new Error("Failed pattern match at Data.Lens.At (line 51, column 7 - line 51, column 34): " + [ v.constructor.name ]);
              };
              var get = function (xs) {
                  var $15 = Data_Set.member(dictOrd)(x)(xs);
                  if ($15) {
                      return new Data_Maybe.Just(Data_Unit.unit);
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Lens_Lens.lens(get)(Data_Function.flip(update))(dictStrong);
          };
      });
  };
  var atMaybe = new At(function () {
      return Data_Lens_Index.indexMaybe;
  }, function (v) {
      return function (dictStrong) {
          return Data_Lens_Lens.lens(Control_Category.identity(Control_Category.categoryFn))(function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          })(dictStrong);
      };
  });
  var atMap = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexMap(dictOrd);
      }, function (k) {
          return function (dictStrong) {
              return Data_Lens_Lens.lens(Data_Map_Internal.lookup(dictOrd)(k))(function (m) {
                  return Data_Maybe["maybe'"](function (v) {
                      return Data_Map_Internal["delete"](dictOrd)(k)(m);
                  })(function (v) {
                      return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                  });
              })(dictStrong);
          };
      });
  };
  var atIdentity = new At(function () {
      return Data_Lens_Index.indexIdentity;
  }, function (v) {
      return function (dictStrong) {
          return Data_Lens_Lens.lens((function () {
              var $16 = Data_Newtype.unwrap();
              return function ($17) {
                  return Data_Maybe.Just.create($16($17));
              };
          })())(Data_Function.flip(Data_Maybe.maybe)(Data_Identity.Identity))(dictStrong);
      };
  });
  var atForeignObject = new At(function () {
      return Data_Lens_Index.indexForeignObject;
  }, function (k) {
      return function (dictStrong) {
          return Data_Lens_Lens.lens(Foreign_Object.lookup(k))(function (m) {
              return Data_Maybe["maybe'"](function (v) {
                  return Foreign_Object["delete"](k)(m);
              })(function (v) {
                  return Foreign_Object.insert(k)(v)(m);
              });
          })(dictStrong);
      };
  });
  var at = function (dict) {
      return dict.at;
  };
  exports["At"] = At;
  exports["at"] = at;
  exports["atIdentity"] = atIdentity;
  exports["atMaybe"] = atMaybe;
  exports["atSet"] = atSet;
  exports["atMap"] = atMap;
  exports["atForeignObject"] = atForeignObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Fold.Partial"] = $PS["Data.Lens.Fold.Partial"] || {};
  var exports = $PS["Data.Lens.Fold.Partial"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeView = function (dictPartial) {
      return function (s) {
          return function (l) {
              return Data_Maybe["fromMaybe'"](function (v) {
                  return Partial_Unsafe.unsafeCrashWith("unsafeView: Empty fold");
              })(Data_Lens_Fold.previewOn(s)(l));
          };
      };
  };
  var unsafeIndexedFold = function (dictPartial) {
      return function (s) {
          return function (l) {
              return Data_Maybe["fromMaybe'"](function (v) {
                  return Partial_Unsafe.unsafeCrashWith("unsafeIndexedFold: empty Fold");
              })(Data_Newtype.unwrap()(Data_Lens_Fold.ifoldMapOf(l)(function (i) {
                  return function (a) {
                      return Data_Maybe_First.First(new Data_Maybe.Just(new Data_Tuple.Tuple(i, a)));
                  };
              })(s)));
          };
      };
  };
  exports["unsafeView"] = unsafeView;
  exports["unsafeIndexedFold"] = unsafeIndexedFold;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Focusing"] = $PS["Data.Lens.Internal.Focusing"] || {};
  var exports = $PS["Data.Lens.Internal.Focusing"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Focusing = function (x) {
      return x;
  };
  var newtypeFocusing = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var focusingFunctor = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Tuple.functorTuple)(f))(v);
          };
      });
  };
  var focusingApply = function (dictApply) {
      return function (dictSemigroup) {
          return new Control_Apply.Apply(function () {
              return focusingFunctor(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(Data_Tuple.applyTuple(dictSemigroup)))(v))(v1);
              };
          });
      };
  };
  var focusingApplicative = function (dictApplicative) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return focusingApply(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }, (function () {
              var $12 = Control_Applicative.pure(dictApplicative);
              var $13 = Control_Applicative.pure(Data_Tuple.applicativeTuple(dictMonoid));
              return function ($14) {
                  return Focusing($12($13($14)));
              };
          })());
      };
  };
  exports["Focusing"] = Focusing;
  exports["newtypeFocusing"] = newtypeFocusing;
  exports["focusingFunctor"] = focusingFunctor;
  exports["focusingApply"] = focusingApply;
  exports["focusingApplicative"] = focusingApplicative;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Internal.Zipping"] = $PS["Data.Lens.Internal.Zipping"] || {};
  var exports = $PS["Data.Lens.Internal.Zipping"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Closed = $PS["Data.Profunctor.Closed"];                
  var Zipping = function (x) {
      return x;
  };
  var profunctorZipping = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return function (a1) {
                  return function (a2) {
                      return g(v(f(a1))(f(a2)));
                  };
              };
          };
      };
  });
  var newtypeZipping = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var closedZipping = new Data_Profunctor_Closed.Closed(function () {
      return profunctorZipping;
  }, function (v) {
      return function (f1) {
          return function (f2) {
              return function (x) {
                  return v(f1(x))(f2(x));
              };
          };
      };
  });
  exports["Zipping"] = Zipping;
  exports["newtypeZipping"] = newtypeZipping;
  exports["profunctorZipping"] = profunctorZipping;
  exports["closedZipping"] = closedZipping;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Lens.Product"] = $PS["Data.Lens.Lens.Product"] || {};
  var exports = $PS["Data.Lens.Lens.Product"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Lens_Tuple = $PS["Data.Lens.Lens.Tuple"];                
  var _2 = function (dictStrong) {
      var $2 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $3 = Data_Lens_Lens_Tuple["_2"](dictStrong);
      return function ($4) {
          return $2($3($4));
      };
  };
  var _1 = function (dictStrong) {
      var $5 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $6 = Data_Lens_Lens_Tuple["_1"](dictStrong);
      return function ($7) {
          return $5($6($7));
      };
  };
  exports["_1"] = _1;
  exports["_2"] = _2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Lens.Void"] = $PS["Data.Lens.Lens.Void"] || {};
  var exports = $PS["Data.Lens.Lens.Void"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Void = $PS["Data.Void"];                
  var devoid = function (dictStrong) {
      return Data_Lens_Lens.lens(Data_Void.absurd)(Data_Function["const"])(dictStrong);
  };
  exports["devoid"] = devoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Prism.Coproduct"] = $PS["Data.Lens.Prism.Coproduct"] || {};
  var exports = $PS["Data.Lens.Prism.Coproduct"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Prism_Either = $PS["Data.Lens.Prism.Either"];                
  var _Right = function (dictChoice) {
      var $2 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictChoice.Profunctor0());
      var $3 = Data_Lens_Prism_Either["_Right"](dictChoice);
      return function ($4) {
          return $2($3($4));
      };
  };
  var _Left = function (dictChoice) {
      var $5 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictChoice.Profunctor0());
      var $6 = Data_Lens_Prism_Either["_Left"](dictChoice);
      return function ($7) {
          return $5($6($7));
      };
  };
  exports["_Left"] = _Left;
  exports["_Right"] = _Right;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Record"] = $PS["Data.Lens.Record"] || {};
  var exports = $PS["Data.Lens.Record"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Record = $PS["Record"];                
  var prop = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (dictStrong) {
                      return Data_Lens_Lens.lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)))(dictStrong);
                  };
              };
          };
      };
  };
  exports["prop"] = prop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Lens.Zoom"] = $PS["Data.Lens.Zoom"] || {};
  var exports = $PS["Data.Lens.Zoom"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Lens_Internal_Focusing = $PS["Data.Lens.Internal.Focusing"];
  var Data_Lens_Types = $PS["Data.Lens.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Star = $PS["Data.Profunctor.Star"];                
  var zoom = function (p) {
      var $0 = Data_Newtype.underF()()()()(Data_Lens_Internal_Focusing.Focusing)(Data_Newtype.under()()(Data_Profunctor_Star.Star)(p));
      return function ($1) {
          return Control_Monad_State_Trans.StateT($0(Control_Monad_State_Trans.runStateT($1)));
      };
  };
  exports["zoom"] = zoom;
  exports["Exchange"] = Data_Lens_Types.Exchange;
  exports["Forget"] = Data_Lens_Types.Forget;
  exports["Indexed"] = Data_Lens_Types.Indexed;
  exports["Market"] = Data_Lens_Types.Market;
  exports["Re"] = Data_Lens_Types.Re;
  exports["Shop"] = Data_Lens_Types.Shop;
  exports["Stall"] = Data_Lens_Types.Stall;
  exports["Tagged"] = Data_Lens_Types.Tagged;
  exports["Wander"] = Data_Lens_Types.Wander;
  exports["wander"] = Data_Lens_Types.wander;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Lazy.NonEmpty"] = $PS["Data.List.Lazy.NonEmpty"] || {};
  var exports = $PS["Data.List.Lazy.NonEmpty"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var uncons = function (v) {
      var v1 = Data_Lazy.force(v);
      return {
          head: v1.value0,
          tail: v1.value1
      };
  };
  var toList = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_List_Lazy_Types.cons(v1.value0)(v1.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $54 = Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(Data_List_Lazy.uncons(xs));
      });
      return function ($55) {
          return $54(toList($55));
      };
  };
  var tail = function (v) {
      var v1 = Data_Lazy.force(v);
      return v1.value1;
  };
  var singleton = Control_Applicative.pure(Data_List_Lazy_Types.applicativeNonEmptyList);
  var repeat = function (x) {
      return Data_List_Lazy_Types.NonEmptyList(Data_Lazy.defer(function (v) {
          return new Data_NonEmpty.NonEmpty(x, Data_List_Lazy.repeat(x));
      }));
  };
  var length = function (v) {
      var v1 = Data_Lazy.force(v);
      return 1 + Data_List_Lazy.length(v1.value1) | 0;
  };
  var last = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_Maybe.fromMaybe(v1.value0)(Data_List_Lazy.last(v1.value1));
  };
  var iterate = function (f) {
      return function (x) {
          return Data_List_Lazy_Types.NonEmptyList(Data_Lazy.defer(function (v) {
              return new Data_NonEmpty.NonEmpty(x, Data_List_Lazy.iterate(f)(f(x)));
          }));
      };
  };
  var init = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_Maybe.maybe(Data_List_Lazy_Types.nil)(function (v2) {
          return Data_List_Lazy_Types.cons(v1.value0)(v2);
      })(Data_List_Lazy.init(v1.value1));
  };
  var head = function (v) {
      var v1 = Data_Lazy.force(v);
      return v1.value0;
  };
  var fromList = function (l) {
      var v = Data_List_Lazy_Types.step(l);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just(Data_Lazy.defer(function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0, v.value1);
          }));
      };
      throw new Error("Failed pattern match at Data.List.Lazy.NonEmpty (line 41, column 3 - line 43, column 61): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      var $56 = Data_List_Lazy.fromFoldable(dictFoldable);
      return function ($57) {
          return fromList($56($57));
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindNonEmptyList));
  var appendFoldable = function (dictFoldable) {
      return function (nel) {
          return function (ys) {
              return Data_Lazy.defer(function (v) {
                  return new Data_NonEmpty.NonEmpty(head(nel), Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(tail(nel))(Data_List_Lazy.fromFoldable(dictFoldable)(ys)));
              });
          };
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["repeat"] = repeat;
  exports["iterate"] = iterate;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["concatMap"] = concatMap;
  exports["appendFoldable"] = appendFoldable;
  exports["NonEmptyList"] = Data_List_Lazy_Types.NonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Partial"] = $PS["Data.List.Partial"] || {};
  var exports = $PS["Data.List.Partial"];
  var Data_List_Types = $PS["Data.List.Types"];                
  var tail = function (dictPartial) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons) {
              return v.value1;
          };
          throw new Error("Failed pattern match at Data.List.Partial (line 15, column 1 - line 15, column 46): " + [ v.constructor.name ]);
      };
  };
  var last = function ($copy_dictPartial) {
      return function ($copy_v) {
          var $tco_var_dictPartial = $copy_dictPartial;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(dictPartial, v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_dictPartial = undefined;
                  $copy_v = v.value1;
                  return;
              };
              throw new Error("Failed pattern match at Data.List.Partial (line 21, column 1 - line 21, column 41): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_dictPartial, $copy_v);
          };
          return $tco_result;
      };
  };
  var init = function (dictPartial) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(v.value0, init()(v.value1));
          };
          throw new Error("Failed pattern match at Data.List.Partial (line 28, column 1 - line 28, column 46): " + [ v.constructor.name ]);
      };
  };
  var head = function (dictPartial) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.List.Partial (line 9, column 1 - line 9, column 41): " + [ v.constructor.name ]);
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.ZipList"] = $PS["Data.List.ZipList"] || {};
  var exports = $PS["Data.List.ZipList"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var ZipList = function (x) {
      return x;
  };
  var traversableZipList = Data_List_Lazy_Types.traversableList;
  var showZipList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(ZipList " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
      });
  };
  var semigroupZipList = Data_List_Lazy_Types.semigroupList;
  var ordZipList = function (dictOrd) {
      return Data_List_Lazy_Types.ordList(dictOrd);
  };
  var newtypeZipList = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidZipList = Data_List_Lazy_Types.monoidList;
  var functorZipList = Data_List_Lazy_Types.functorList;
  var foldableZipList = Data_List_Lazy_Types.foldableList;
  var eqZipList = function (dictEq) {
      return Data_List_Lazy_Types.eqList(dictEq);
  };
  var applyZipList = new Control_Apply.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Data_Function.apply)(v)(v1);
      };
  });
  var zipListIsNotBind = function (dictFail) {
      return new Control_Bind.Bind(function () {
          return applyZipList;
      }, Partial_Unsafe.unsafeCrashWith("bind: unreachable"));
  };
  var applicativeZipList = new Control_Applicative.Applicative(function () {
      return applyZipList;
  }, function ($14) {
      return ZipList(Data_List_Lazy.repeat($14));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return ZipList(Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(v)(Data_List_Lazy.drop(Data_List_Lazy.length(v))(v1)));
      };
  });
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return applicativeZipList;
  }, function () {
      return plusZipList;
  });
  exports["ZipList"] = ZipList;
  exports["showZipList"] = showZipList;
  exports["newtypeZipList"] = newtypeZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;
  exports["zipListIsNotBind"] = zipListIsNotBind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Map"] = $PS["Data.Map"] || {};
  var exports = $PS["Data.Map"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];                
  var SemigroupMap = function (x) {
      return x;
  };
  var traversableWithIndexSemigroupMap = Data_Map_Internal.traversableWithIndexMap;
  var traversableSemigroupMap = Data_Map_Internal.traversableMap;
  var showSemigroupMap = function (dictShow) {
      return function (dictShow1) {
          return Data_Map_Internal.showMap(dictShow)(dictShow1);
      };
  };
  var semigroupSemigroupMap = function (dictOrd) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return Data_Map_Internal.unionWith(dictOrd)(Data_Semigroup.append(dictSemigroup))(v)(v1);
              };
          });
      };
  };
  var plusSemigroupMap = function (dictOrd) {
      return Data_Map_Internal.plusMap(dictOrd);
  };
  var ordSemigroupMap = function (dictOrd) {
      return function (dictOrd1) {
          return Data_Map_Internal.ordMap(dictOrd)(dictOrd1);
      };
  };
  var ord1SemigroupMap = function (dictOrd) {
      return Data_Map_Internal.ord1Map(dictOrd);
  };
  var newtypeSemigroupMap = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidSemigroupMap = function (dictOrd) {
      return function (dictSemigroup) {
          return new Data_Monoid.Monoid(function () {
              return semigroupSemigroupMap(dictOrd)(dictSemigroup);
          }, Data_Map_Internal.empty);
      };
  };
  var keys = (function () {
      var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function ($21) {
          return Data_Set.fromMap($20($21));
      };
  })();
  var functorWithIndexSemigroupMap = Data_Map_Internal.functorWithIndexMap;
  var functorSemigroupMap = Data_Map_Internal.functorMap;
  var foldableWithIndexSemigroupMap = Data_Map_Internal.foldableWithIndexMap;
  var foldableSemigroupMap = Data_Map_Internal.foldableMap;
  var eqSemigroupMap = function (dictEq) {
      return function (dictEq1) {
          return Data_Map_Internal.eqMap(dictEq)(dictEq1);
      };
  };
  var eq1SemigroupMap = function (dictEq) {
      return Data_Map_Internal.eq1Map(dictEq);
  };
  var bindSemigroupMap = function (dictOrd) {
      return Data_Map_Internal.bindMap(dictOrd);
  };
  var applySemigroupMap = function (dictOrd) {
      return Data_Map_Internal.applyMap(dictOrd);
  };
  var altSemigroupMap = function (dictOrd) {
      return Data_Map_Internal.altMap(dictOrd);
  };
  exports["keys"] = keys;
  exports["SemigroupMap"] = SemigroupMap;
  exports["eq1SemigroupMap"] = eq1SemigroupMap;
  exports["eqSemigroupMap"] = eqSemigroupMap;
  exports["ord1SemigroupMap"] = ord1SemigroupMap;
  exports["ordSemigroupMap"] = ordSemigroupMap;
  exports["newtypeSemigroupMap"] = newtypeSemigroupMap;
  exports["showSemigroupMap"] = showSemigroupMap;
  exports["semigroupSemigroupMap"] = semigroupSemigroupMap;
  exports["monoidSemigroupMap"] = monoidSemigroupMap;
  exports["altSemigroupMap"] = altSemigroupMap;
  exports["plusSemigroupMap"] = plusSemigroupMap;
  exports["functorSemigroupMap"] = functorSemigroupMap;
  exports["functorWithIndexSemigroupMap"] = functorWithIndexSemigroupMap;
  exports["applySemigroupMap"] = applySemigroupMap;
  exports["bindSemigroupMap"] = bindSemigroupMap;
  exports["foldableSemigroupMap"] = foldableSemigroupMap;
  exports["foldableWithIndexSemigroupMap"] = foldableWithIndexSemigroupMap;
  exports["traversableSemigroupMap"] = traversableSemigroupMap;
  exports["traversableWithIndexSemigroupMap"] = traversableWithIndexSemigroupMap;
  exports["alter"] = Data_Map_Internal.alter;
  exports["catMaybes"] = Data_Map_Internal.catMaybes;
  exports["checkValid"] = Data_Map_Internal.checkValid;
  exports["delete"] = Data_Map_Internal["delete"];
  exports["difference"] = Data_Map_Internal.difference;
  exports["empty"] = Data_Map_Internal.empty;
  exports["filter"] = Data_Map_Internal.filter;
  exports["filterKeys"] = Data_Map_Internal.filterKeys;
  exports["filterWithKey"] = Data_Map_Internal.filterWithKey;
  exports["findMax"] = Data_Map_Internal.findMax;
  exports["findMin"] = Data_Map_Internal.findMin;
  exports["foldSubmap"] = Data_Map_Internal.foldSubmap;
  exports["fromFoldable"] = Data_Map_Internal.fromFoldable;
  exports["fromFoldableWith"] = Data_Map_Internal.fromFoldableWith;
  exports["fromFoldableWithIndex"] = Data_Map_Internal.fromFoldableWithIndex;
  exports["insert"] = Data_Map_Internal.insert;
  exports["insertWith"] = Data_Map_Internal.insertWith;
  exports["intersection"] = Data_Map_Internal.intersection;
  exports["intersectionWith"] = Data_Map_Internal.intersectionWith;
  exports["isEmpty"] = Data_Map_Internal.isEmpty;
  exports["isSubmap"] = Data_Map_Internal.isSubmap;
  exports["lookup"] = Data_Map_Internal.lookup;
  exports["lookupGE"] = Data_Map_Internal.lookupGE;
  exports["lookupGT"] = Data_Map_Internal.lookupGT;
  exports["lookupLE"] = Data_Map_Internal.lookupLE;
  exports["lookupLT"] = Data_Map_Internal.lookupLT;
  exports["mapMaybe"] = Data_Map_Internal.mapMaybe;
  exports["mapMaybeWithKey"] = Data_Map_Internal.mapMaybeWithKey;
  exports["member"] = Data_Map_Internal.member;
  exports["pop"] = Data_Map_Internal.pop;
  exports["showTree"] = Data_Map_Internal.showTree;
  exports["singleton"] = Data_Map_Internal.singleton;
  exports["size"] = Data_Map_Internal.size;
  exports["submap"] = Data_Map_Internal.submap;
  exports["toUnfoldable"] = Data_Map_Internal.toUnfoldable;
  exports["toUnfoldableUnordered"] = Data_Map_Internal.toUnfoldableUnordered;
  exports["union"] = Data_Map_Internal.union;
  exports["unionWith"] = Data_Map_Internal.unionWith;
  exports["unions"] = Data_Map_Internal.unions;
  exports["update"] = Data_Map_Internal.update;
  exports["values"] = Data_Map_Internal.values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Map.Gen"] = $PS["Data.Map.Gen"] || {};
  var exports = $PS["Data.Map.Gen"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var genMap = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (dictOrd) {
              return function (genKey) {
                  return function (genValue) {
                      return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                          return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(size))(function (newSize) {
                              return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](newSize))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList))(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_List_Types.unfoldableList)(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Tuple.Tuple.create)(genKey))(genValue))));
                          });
                      });
                  };
              };
          };
      };
  };
  exports["genMap"] = genMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Alternate"] = $PS["Data.Monoid.Alternate"] || {};
  var exports = $PS["Data.Monoid.Alternate"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Alternate = function (x) {
      return x;
  };
  var showAlternate = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Alternate " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAlternate = function (dictAlt) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusAlternate = function (dictPlus) {
      return dictPlus;
  };
  var ordAlternate = function (dictOrd) {
      return dictOrd;
  };
  var ord1Alternate = function (dictOrd1) {
      return dictOrd1;
  };
  var newtypeAlternate = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidAlternate = function (dictPlus) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAlternate(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var monadAlternate = function (dictMonad) {
      return dictMonad;
  };
  var functorAlternate = function (dictFunctor) {
      return dictFunctor;
  };
  var extendAlternate = function (dictExtend) {
      return dictExtend;
  };
  var eqAlternate = function (dictEq) {
      return dictEq;
  };
  var eq1Alternate = function (dictEq1) {
      return dictEq1;
  };
  var comonadAlternate = function (dictComonad) {
      return dictComonad;
  };
  var boundedAlternate = function (dictBounded) {
      return dictBounded;
  };
  var bindAlternate = function (dictBind) {
      return dictBind;
  };
  var applyAlternate = function (dictApply) {
      return dictApply;
  };
  var applicativeAlternate = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeAlternate = function (dictAlternative) {
      return dictAlternative;
  };
  var altAlternate = function (dictAlt) {
      return dictAlt;
  };
  exports["Alternate"] = Alternate;
  exports["newtypeAlternate"] = newtypeAlternate;
  exports["eqAlternate"] = eqAlternate;
  exports["eq1Alternate"] = eq1Alternate;
  exports["ordAlternate"] = ordAlternate;
  exports["ord1Alternate"] = ord1Alternate;
  exports["boundedAlternate"] = boundedAlternate;
  exports["functorAlternate"] = functorAlternate;
  exports["applyAlternate"] = applyAlternate;
  exports["applicativeAlternate"] = applicativeAlternate;
  exports["altAlternate"] = altAlternate;
  exports["plusAlternate"] = plusAlternate;
  exports["alternativeAlternate"] = alternativeAlternate;
  exports["bindAlternate"] = bindAlternate;
  exports["monadAlternate"] = monadAlternate;
  exports["extendAlternate"] = extendAlternate;
  exports["comonadAlternate"] = comonadAlternate;
  exports["showAlternate"] = showAlternate;
  exports["semigroupAlternate"] = semigroupAlternate;
  exports["monoidAlternate"] = monoidAlternate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Generic"] = $PS["Data.Monoid.Generic"] || {};
  var exports = $PS["Data.Monoid.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Monoid = $PS["Data.Monoid"];                
  var GenericMonoid = function (genericMempty$prime) {
      this["genericMempty'"] = genericMempty$prime;
  };
  var genericMonoidNoArguments = new GenericMonoid(Data_Generic_Rep.NoArguments.value);
  var genericMonoidArgument = function (dictMonoid) {
      return new GenericMonoid(Data_Monoid.mempty(dictMonoid));
  };
  var genericMempty$prime = function (dict) {
      return dict["genericMempty'"];
  };
  var genericMonoidConstructor = function (dictGenericMonoid) {
      return new GenericMonoid(genericMempty$prime(dictGenericMonoid));
  };
  var genericMonoidProduct = function (dictGenericMonoid) {
      return function (dictGenericMonoid1) {
          return new GenericMonoid(new Data_Generic_Rep.Product(genericMempty$prime(dictGenericMonoid), genericMempty$prime(dictGenericMonoid1)));
      };
  };
  var genericMempty = function (dictGeneric) {
      return function (dictGenericMonoid) {
          return Data_Generic_Rep.to(dictGeneric)(genericMempty$prime(dictGenericMonoid));
      };
  };
  exports["GenericMonoid"] = GenericMonoid;
  exports["genericMempty'"] = genericMempty$prime;
  exports["genericMempty"] = genericMempty;
  exports["genericMonoidNoArguments"] = genericMonoidNoArguments;
  exports["genericMonoidProduct"] = genericMonoidProduct;
  exports["genericMonoidConstructor"] = genericMonoidConstructor;
  exports["genericMonoidArgument"] = genericMonoidArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Number.Approximate"] = $PS["Data.Number.Approximate"] || {};
  var exports = $PS["Data.Number.Approximate"];
  var $$Math = $PS["Math"];                
  var Tolerance = function (x) {
      return x;
  };
  var Fraction = function (x) {
      return x;
  };
  var eqRelative = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 === 0.0) {
                  return $$Math.abs(v2) <= v;
              };
              if (v2 === 0.0) {
                  return $$Math.abs(v1) <= v;
              };
              return $$Math.abs(v1 - v2) <= (v * $$Math.abs(v1 + v2)) / 2.0;
          };
      };
  };
  var eqApproximate = eqRelative(1.0e-6);
  var neqApproximate = function (x) {
      return function (y) {
          return !eqApproximate(x)(y);
      };
  };
  var eqAbsolute = function (v) {
      return function (x) {
          return function (y) {
              return $$Math.abs(x - y) <= v;
          };
      };
  };
  exports["Fraction"] = Fraction;
  exports["eqRelative"] = eqRelative;
  exports["eqApproximate"] = eqApproximate;
  exports["neqApproximate"] = neqApproximate;
  exports["Tolerance"] = Tolerance;
  exports["eqAbsolute"] = eqAbsolute;
})(PS);
(function(exports) {
  function wrap(method) {
    return function(d) {
      return function(num) {
        return method.apply(num, [d]);
      };
    };
  }

  exports.toPrecisionNative   = wrap(Number.prototype.toPrecision);
  exports.toFixedNative       = wrap(Number.prototype.toFixed);
  exports.toExponentialNative = wrap(Number.prototype.toExponential);

  exports.toString = function(num) { return num.toString(); };
})(PS["Data.Number.Format"] = PS["Data.Number.Format"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Number.Format"] = $PS["Data.Number.Format"] || {};
  var exports = $PS["Data.Number.Format"];
  var $foreign = $PS["Data.Number.Format"];
  var Data_Ord = $PS["Data.Ord"];                
  var Precision = (function () {
      function Precision(value0) {
          this.value0 = value0;
      };
      Precision.create = function (value0) {
          return new Precision(value0);
      };
      return Precision;
  })();
  var Fixed = (function () {
      function Fixed(value0) {
          this.value0 = value0;
      };
      Fixed.create = function (value0) {
          return new Fixed(value0);
      };
      return Fixed;
  })();
  var Exponential = (function () {
      function Exponential(value0) {
          this.value0 = value0;
      };
      Exponential.create = function (value0) {
          return new Exponential(value0);
      };
      return Exponential;
  })();
  var toStringWith = function (v) {
      if (v instanceof Precision) {
          return $foreign.toPrecisionNative(v.value0);
      };
      if (v instanceof Fixed) {
          return $foreign.toFixedNative(v.value0);
      };
      if (v instanceof Exponential) {
          return $foreign.toExponentialNative(v.value0);
      };
      throw new Error("Failed pattern match at Data.Number.Format (line 59, column 1 - line 59, column 43): " + [ v.constructor.name ]);
  };
  var precision = (function () {
      var $5 = Data_Ord.clamp(Data_Ord.ordInt)(1)(21);
      return function ($6) {
          return Precision.create($5($6));
      };
  })();
  var fixed = (function () {
      var $7 = Data_Ord.clamp(Data_Ord.ordInt)(0)(20);
      return function ($8) {
          return Fixed.create($7($8));
      };
  })();
  var exponential = (function () {
      var $9 = Data_Ord.clamp(Data_Ord.ordInt)(0)(20);
      return function ($10) {
          return Exponential.create($9($10));
      };
  })();
  exports["precision"] = precision;
  exports["fixed"] = fixed;
  exports["exponential"] = exponential;
  exports["toStringWith"] = toStringWith;
  exports["toString"] = $foreign.toString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord.Down"] = $PS["Data.Ord.Down"] || {};
  var exports = $PS["Data.Ord.Down"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Down = function (x) {
      return x;
  };
  var showDown = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Down " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var newtypeDown = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqDown = function (dictEq) {
      return dictEq;
  };
  var ordDown = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqDown(dictOrd.Eq0());
      }, function (v) {
          return function (v1) {
              return Data_Ordering.invert(Data_Ord.compare(dictOrd)(v)(v1));
          };
      });
  };
  var boundedDown = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordDown(dictBounded.Ord0());
      }, Data_Bounded.top(dictBounded), Data_Bounded.bottom(dictBounded));
  };
  exports["Down"] = Down;
  exports["newtypeDown"] = newtypeDown;
  exports["eqDown"] = eqDown;
  exports["ordDown"] = ordDown;
  exports["boundedDown"] = boundedDown;
  exports["showDown"] = showDown;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord.Generic"] = $PS["Data.Ord.Generic"] || {};
  var exports = $PS["Data.Ord.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var GenericOrd = function (genericCompare$prime) {
      this["genericCompare'"] = genericCompare$prime;
  };
  var genericOrdNoConstructors = new GenericOrd(function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var genericOrdNoArguments = new GenericOrd(function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var genericOrdArgument = function (dictOrd) {
      return new GenericOrd(function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var genericCompare$prime = function (dict) {
      return dict["genericCompare'"];
  };
  var genericOrdConstructor = function (dictGenericOrd) {
      return new GenericOrd(function (v) {
          return function (v1) {
              return genericCompare$prime(dictGenericOrd)(v)(v1);
          };
      });
  };
  var genericOrdProduct = function (dictGenericOrd) {
      return function (dictGenericOrd1) {
          return new GenericOrd(function (v) {
              return function (v1) {
                  var v2 = genericCompare$prime(dictGenericOrd)(v.value0)(v1.value0);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return genericCompare$prime(dictGenericOrd1)(v.value1)(v1.value1);
                  };
                  return v2;
              };
          });
      };
  };
  var genericOrdSum = function (dictGenericOrd) {
      return function (dictGenericOrd1) {
          return new GenericOrd(function (v) {
              return function (v1) {
                  if (v instanceof Data_Generic_Rep.Inl && v1 instanceof Data_Generic_Rep.Inl) {
                      return genericCompare$prime(dictGenericOrd)(v.value0)(v1.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr && v1 instanceof Data_Generic_Rep.Inr) {
                      return genericCompare$prime(dictGenericOrd1)(v.value0)(v1.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inl && v1 instanceof Data_Generic_Rep.Inr) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Generic_Rep.Inr && v1 instanceof Data_Generic_Rep.Inl) {
                      return Data_Ordering.GT.value;
                  };
                  throw new Error("Failed pattern match at Data.Ord.Generic (line 19, column 1 - line 23, column 41): " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  var genericCompare = function (dictGeneric) {
      return function (dictGenericOrd) {
          return function (x) {
              return function (y) {
                  return genericCompare$prime(dictGenericOrd)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["GenericOrd"] = GenericOrd;
  exports["genericCompare'"] = genericCompare$prime;
  exports["genericCompare"] = genericCompare;
  exports["genericOrdNoConstructors"] = genericOrdNoConstructors;
  exports["genericOrdNoArguments"] = genericOrdNoArguments;
  exports["genericOrdSum"] = genericOrdSum;
  exports["genericOrdProduct"] = genericOrdProduct;
  exports["genericOrdConstructor"] = genericOrdConstructor;
  exports["genericOrdArgument"] = genericOrdArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Join"] = $PS["Data.Profunctor.Join"] || {};
  var exports = $PS["Data.Profunctor.Join"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Join = function (x) {
      return x;
  };
  var showJoin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Join " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupJoin = function (dictSemigroupoid) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
      });
  };
  var ordJoin = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoin = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var monoidJoin = function (dictCategory) {
      return new Data_Monoid.Monoid(function () {
          return semigroupJoin(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  var invariantJoin = function (dictProfunctor) {
      return new Data_Functor_Invariant.Invariant(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Profunctor.dimap(dictProfunctor)(g)(f)(v);
              };
          };
      });
  };
  var eqJoin = function (dictEq) {
      return dictEq;
  };
  exports["Join"] = Join;
  exports["newtypeJoin"] = newtypeJoin;
  exports["eqJoin"] = eqJoin;
  exports["ordJoin"] = ordJoin;
  exports["showJoin"] = showJoin;
  exports["semigroupJoin"] = semigroupJoin;
  exports["monoidJoin"] = monoidJoin;
  exports["invariantJoin"] = invariantJoin;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Profunctor.Split"] = $PS["Data.Profunctor.Split"] || {};
  var exports = $PS["Data.Profunctor.Split"];
  var Control_Category = $PS["Control.Category"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Invariant = $PS["Data.Functor.Invariant"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var SplitF = (function () {
      function SplitF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SplitF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SplitF(value0, value1, value2);
              };
          };
      };
      return SplitF;
  })();
  var Split = function (x) {
      return x;
  };
  var unSplit = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1)(v1.value2);
          })(v);
      };
  };
  var split = function (f) {
      return function (g) {
          return function (fx) {
              return Data_Exists.mkExists(new SplitF(f, g, fx));
          };
      };
  };
  var profunctorSplit = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return unSplit(function (h) {
              return function (i) {
                  return split(function ($9) {
                      return h(f($9));
                  })(function ($10) {
                      return g(i($10));
                  });
              };
          });
      };
  });
  var lowerSplit = function (dictInvariant) {
      return unSplit(Data_Function.flip(Data_Functor_Invariant.imap(dictInvariant)));
  };
  var liftSplit = split(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  var hoistSplit = function (nat) {
      return unSplit(function (f) {
          return function (g) {
              var $11 = split(f)(g);
              return function ($12) {
                  return $11(nat($12));
              };
          };
      });
  };
  var functorSplit = new Data_Functor.Functor(function (f) {
      return unSplit(function (g) {
          return function (h) {
              return function (fx) {
                  return split(g)(function ($13) {
                      return f(h($13));
                  })(fx);
              };
          };
      });
  });
  exports["split"] = split;
  exports["unSplit"] = unSplit;
  exports["liftSplit"] = liftSplit;
  exports["lowerSplit"] = lowerSplit;
  exports["hoistSplit"] = hoistSplit;
  exports["functorSplit"] = functorSplit;
  exports["profunctorSplit"] = profunctorSplit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ring.Generic"] = $PS["Data.Ring.Generic"] || {};
  var exports = $PS["Data.Ring.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Ring = $PS["Data.Ring"];                
  var GenericRing = function (genericSub$prime) {
      this["genericSub'"] = genericSub$prime;
  };
  var genericSub$prime = function (dict) {
      return dict["genericSub'"];
  };
  var genericSub = function (dictGeneric) {
      return function (dictGenericRing) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericSub$prime(dictGenericRing)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  var genericRingProduct = function (dictGenericRing) {
      return function (dictGenericRing1) {
          return new GenericRing(function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericSub$prime(dictGenericRing)(v.value0)(v1.value0), genericSub$prime(dictGenericRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var genericRingNoArguments = new GenericRing(function (v) {
      return function (v1) {
          return Data_Generic_Rep.NoArguments.value;
      };
  });
  var genericRingConstructor = function (dictGenericRing) {
      return new GenericRing(function (v) {
          return function (v1) {
              return genericSub$prime(dictGenericRing)(v)(v1);
          };
      });
  };
  var genericRingArgument = function (dictRing) {
      return new GenericRing(function (v) {
          return function (v1) {
              return Data_Ring.sub(dictRing)(v)(v1);
          };
      });
  };
  exports["genericSub'"] = genericSub$prime;
  exports["GenericRing"] = GenericRing;
  exports["genericSub"] = genericSub;
  exports["genericRingNoArguments"] = genericRingNoArguments;
  exports["genericRingArgument"] = genericRingArgument;
  exports["genericRingProduct"] = genericRingProduct;
  exports["genericRingConstructor"] = genericRingConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup.First"] = $PS["Data.Semigroup.First"] || {};
  var exports = $PS["Data.Semigroup.First"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(First " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
      return function (v) {
          return x;
      };
  });
  var ordFirst = function (dictOrd) {
      return dictOrd;
  };
  var functorFirst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqFirst = function (dictEq) {
      return dictEq;
  };
  var eq1First = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqFirst(dictEq));
  });
  var ord1First = new Data_Ord.Ord1(function () {
      return eq1First;
  }, function (dictOrd) {
      return Data_Ord.compare(ordFirst(dictOrd));
  });
  var boundedFirst = function (dictBounded) {
      return dictBounded;
  };
  var applyFirst = new Control_Apply.Apply(function () {
      return functorFirst;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindFirst = new Control_Bind.Bind(function () {
      return applyFirst;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeFirst = new Control_Applicative.Applicative(function () {
      return applyFirst;
  }, First);
  var monadFirst = new Control_Monad.Monad(function () {
      return applicativeFirst;
  }, function () {
      return bindFirst;
  });
  exports["First"] = First;
  exports["eqFirst"] = eqFirst;
  exports["eq1First"] = eq1First;
  exports["ordFirst"] = ordFirst;
  exports["ord1First"] = ord1First;
  exports["boundedFirst"] = boundedFirst;
  exports["showFirst"] = showFirst;
  exports["functorFirst"] = functorFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["semigroupFirst"] = semigroupFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup.Generic"] = $PS["Data.Semigroup.Generic"] || {};
  var exports = $PS["Data.Semigroup.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var GenericSemigroup = function (genericAppend$prime) {
      this["genericAppend'"] = genericAppend$prime;
  };
  var genericSemigroupNoConstructors = new GenericSemigroup(function (a) {
      return function (v) {
          return a;
      };
  });
  var genericSemigroupNoArguments = new GenericSemigroup(function (a) {
      return function (v) {
          return a;
      };
  });
  var genericSemigroupArgument = function (dictSemigroup) {
      return new GenericSemigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var genericAppend$prime = function (dict) {
      return dict["genericAppend'"];
  };
  var genericSemigroupConstructor = function (dictGenericSemigroup) {
      return new GenericSemigroup(function (v) {
          return function (v1) {
              return genericAppend$prime(dictGenericSemigroup)(v)(v1);
          };
      });
  };
  var genericSemigroupProduct = function (dictGenericSemigroup) {
      return function (dictGenericSemigroup1) {
          return new GenericSemigroup(function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericAppend$prime(dictGenericSemigroup)(v.value0)(v1.value0), genericAppend$prime(dictGenericSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var genericAppend = function (dictGeneric) {
      return function (dictGenericSemigroup) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericAppend$prime(dictGenericSemigroup)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  exports["GenericSemigroup"] = GenericSemigroup;
  exports["genericAppend'"] = genericAppend$prime;
  exports["genericAppend"] = genericAppend;
  exports["genericSemigroupNoConstructors"] = genericSemigroupNoConstructors;
  exports["genericSemigroupNoArguments"] = genericSemigroupNoArguments;
  exports["genericSemigroupProduct"] = genericSemigroupProduct;
  exports["genericSemigroupConstructor"] = genericSemigroupConstructor;
  exports["genericSemigroupArgument"] = genericSemigroupArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semiring.Generic"] = $PS["Data.Semiring.Generic"] || {};
  var exports = $PS["Data.Semiring.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var GenericSemiring = function (genericAdd$prime, genericMul$prime, genericOne$prime, genericZero$prime) {
      this["genericAdd'"] = genericAdd$prime;
      this["genericMul'"] = genericMul$prime;
      this["genericOne'"] = genericOne$prime;
      this["genericZero'"] = genericZero$prime;
  };
  var genericZero$prime = function (dict) {
      return dict["genericZero'"];
  };
  var genericZero = function (dictGeneric) {
      return function (dictGenericSemiring) {
          return Data_Generic_Rep.to(dictGeneric)(genericZero$prime(dictGenericSemiring));
      };
  };
  var genericSemiringNoArguments = new GenericSemiring(function (v) {
      return function (v1) {
          return Data_Generic_Rep.NoArguments.value;
      };
  }, function (v) {
      return function (v1) {
          return Data_Generic_Rep.NoArguments.value;
      };
  }, Data_Generic_Rep.NoArguments.value, Data_Generic_Rep.NoArguments.value);
  var genericSemiringArgument = function (dictSemiring) {
      return new GenericSemiring(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      }, Data_Semiring.one(dictSemiring), Data_Semiring.zero(dictSemiring));
  };
  var genericOne$prime = function (dict) {
      return dict["genericOne'"];
  };
  var genericOne = function (dictGeneric) {
      return function (dictGenericSemiring) {
          return Data_Generic_Rep.to(dictGeneric)(genericOne$prime(dictGenericSemiring));
      };
  };
  var genericMul$prime = function (dict) {
      return dict["genericMul'"];
  };
  var genericMul = function (dictGeneric) {
      return function (dictGenericSemiring) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericMul$prime(dictGenericSemiring)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  var genericAdd$prime = function (dict) {
      return dict["genericAdd'"];
  };
  var genericSemiringConstructor = function (dictGenericSemiring) {
      return new GenericSemiring(function (v) {
          return function (v1) {
              return genericAdd$prime(dictGenericSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return genericMul$prime(dictGenericSemiring)(v)(v1);
          };
      }, genericOne$prime(dictGenericSemiring), genericZero$prime(dictGenericSemiring));
  };
  var genericSemiringProduct = function (dictGenericSemiring) {
      return function (dictGenericSemiring1) {
          return new GenericSemiring(function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericAdd$prime(dictGenericSemiring)(v.value0)(v1.value0), genericAdd$prime(dictGenericSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Data_Generic_Rep.Product(genericMul$prime(dictGenericSemiring)(v.value0)(v1.value0), genericMul$prime(dictGenericSemiring1)(v.value1)(v1.value1));
              };
          }, new Data_Generic_Rep.Product(genericOne$prime(dictGenericSemiring), genericOne$prime(dictGenericSemiring1)), new Data_Generic_Rep.Product(genericZero$prime(dictGenericSemiring), genericZero$prime(dictGenericSemiring1)));
      };
  };
  var genericAdd = function (dictGeneric) {
      return function (dictGenericSemiring) {
          return function (x) {
              return function (y) {
                  return Data_Generic_Rep.to(dictGeneric)(genericAdd$prime(dictGenericSemiring)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y)));
              };
          };
      };
  };
  exports["genericAdd'"] = genericAdd$prime;
  exports["genericMul'"] = genericMul$prime;
  exports["genericOne'"] = genericOne$prime;
  exports["genericZero'"] = genericZero$prime;
  exports["GenericSemiring"] = GenericSemiring;
  exports["genericZero"] = genericZero;
  exports["genericOne"] = genericOne;
  exports["genericAdd"] = genericAdd;
  exports["genericMul"] = genericMul;
  exports["genericSemiringNoArguments"] = genericSemiringNoArguments;
  exports["genericSemiringArgument"] = genericSemiringArgument;
  exports["genericSemiringProduct"] = genericSemiringProduct;
  exports["genericSemiringConstructor"] = genericSemiringConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Set.NonEmpty"] = $PS["Data.Set.NonEmpty"] || {};
  var exports = $PS["Data.Set.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var NonEmptySet = function (x) {
      return x;
  };
  var unionSet = function (dictOrd) {
      return function (s1) {
          return function (v) {
              return Data_Semigroup.append(Data_Set.semigroupSet(dictOrd))(s1)(v);
          };
      };
  };
  var toUnfoldable1 = function (dictUnfoldable1) {
      return function (v) {
          var go = function (v1) {
              if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
                  return new Data_Tuple.Tuple(v1.value0, Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_Tuple.Tuple(v1.value0, new Data_Maybe.Just(v1.value1));
              };
              throw new Error("Failed pattern match at Data.Set.NonEmpty (line 95, column 24 - line 97, column 38): " + [ v1.constructor.name ]);
          };
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go)(Data_Set.toUnfoldable(Data_List_Types.unfoldableList)(v));
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (v) {
          return Data_Set.toUnfoldable(dictUnfoldable)(v);
      };
  };
  var toSet = function (v) {
      return v;
  };
  var subset = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Set.subset(dictOrd)(v)(v1);
          };
      };
  };
  var size = function (v) {
      return Data_Set.size(v);
  };
  var singleton = function (a) {
      return Data_Set.singleton(a);
  };
  var showNonEmptySet = function (dictShow) {
      return new Data_Show.Show(function (s) {
          return "(fromFoldable1 " + (Data_Show.show(Data_Array_NonEmpty_Internal.showNonEmptyArray(dictShow))(toUnfoldable1(Data_Array_NonEmpty_Internal.unfoldable1NonEmptyArray)(s)) + ")");
      });
  };
  var semigroupNonEmptySet = function (dictOrd) {
      return Data_Set.semigroupSet(dictOrd);
  };
  var properSubset = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Set.properSubset(dictOrd)(v)(v1);
          };
      };
  };
  var ordNonEmptySet = function (dictOrd) {
      return Data_Set.ordSet(dictOrd);
  };
  var ord1NonEmptySet = Data_Set.ord1Set;
  var min = function (v) {
      return Data_Maybe.fromJust()(Data_Set.findMin(v));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Set.member(dictOrd)(a)(v);
          };
      };
  };
  var max = function (v) {
      return Data_Maybe.fromJust()(Data_Set.findMax(v));
  };
  var mapMaybe = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Set.mapMaybe(dictOrd)(f)(v);
          };
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Set.map(dictOrd)(f)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Set.insert(dictOrd)(a)(v);
          };
      };
  };
  var fromSet = function (s) {
      var $76 = Data_Set.isEmpty(s);
      if ($76) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(s);
  };
  var intersection = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return fromSet(Data_Set.intersection(dictOrd)(v)(v1));
          };
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      return function (dictOrd) {
          return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupNonEmptySet(dictOrd))(singleton);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          var $85 = Data_Set.fromFoldable(dictFoldable)(dictOrd);
          return function ($86) {
              return fromSet($85($86));
          };
      };
  };
  var foldableNonEmptySet = Data_Set.foldableSet;
  var foldable1NonEmptySet = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableNonEmptySet;
  }, function (dictSemigroup) {
      return function (f) {
          var $87 = Data_Semigroup_Foldable.foldMap1(Data_List_Types.foldable1NonEmptyList)(dictSemigroup)(f);
          var $88 = toUnfoldable1(Data_List_Types.unfoldable1NonEmptyList);
          return function ($89) {
              return $87($88($89));
          };
      };
  }, function (f) {
      var $90 = Data_Semigroup_Foldable.foldl1(Data_List_Types.foldable1NonEmptyList)(f);
      var $91 = toUnfoldable1(Data_List_Types.unfoldable1NonEmptyList);
      return function ($92) {
          return $90($91($92));
      };
  }, function (f) {
      var $93 = Data_Semigroup_Foldable.foldr1(Data_List_Types.foldable1NonEmptyList)(f);
      var $94 = toUnfoldable1(Data_List_Types.unfoldable1NonEmptyList);
      return function ($95) {
          return $93($94($95));
      };
  });
  var filter = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Set.filter(dictOrd)(f)(v);
          };
      };
  };
  var eqNonEmptySet = function (dictEq) {
      return Data_Set.eqSet(dictEq);
  };
  var eq1NonEmptySet = Data_Set.eq1Set;
  var difference = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return fromSet(Data_Set.difference(dictOrd)(v)(v1));
          };
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return fromSet(Data_Set["delete"](dictOrd)(a)(v));
          };
      };
  };
  var cons = function (dictOrd) {
      return function (a) {
          var $96 = Data_Set.insert(dictOrd)(a);
          return function ($97) {
              return NonEmptySet($96($97));
          };
      };
  };
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["fromSet"] = fromSet;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toSet"] = toSet;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldable1"] = toUnfoldable1;
  exports["map"] = map;
  exports["member"] = member;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["min"] = min;
  exports["max"] = max;
  exports["unionSet"] = unionSet;
  exports["difference"] = difference;
  exports["subset"] = subset;
  exports["properSubset"] = properSubset;
  exports["intersection"] = intersection;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["eqNonEmptySet"] = eqNonEmptySet;
  exports["eq1NonEmptySet"] = eq1NonEmptySet;
  exports["ordNonEmptySet"] = ordNonEmptySet;
  exports["ord1NonEmptySet"] = ord1NonEmptySet;
  exports["semigroupNonEmptySet"] = semigroupNonEmptySet;
  exports["foldableNonEmptySet"] = foldableNonEmptySet;
  exports["foldable1NonEmptySet"] = foldable1NonEmptySet;
  exports["showNonEmptySet"] = showNonEmptySet;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowArgsProduct = function (dictGenericShowArgs) {
      return function (dictGenericShowArgs1) {
          return new GenericShowArgs(function (v) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
          });
      };
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowNoConstructors = new GenericShow(function (a) {
      return genericShow$prime(genericShowNoConstructors)(a);
  });
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["GenericShow"] = GenericShow;
  exports["genericShow'"] = genericShow$prime;
  exports["genericShow"] = genericShow;
  exports["GenericShowArgs"] = GenericShowArgs;
  exports["genericShowArgs"] = genericShowArgs;
  exports["genericShowNoConstructors"] = genericShowNoConstructors;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowArgsProduct"] = genericShowArgsProduct;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Pattern"] = $PS["Data.String.Pattern"] || {};
  var exports = $PS["Data.String.Pattern"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var Replacement = function (x) {
      return x;
  };
  var Pattern = function (x) {
      return x;
  };
  var showReplacement = new Data_Show.Show(function (v) {
      return "(Replacement " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var showPattern = new Data_Show.Show(function (v) {
      return "(Pattern " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var newtypeReplacement = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypePattern = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqReplacement = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordReplacement = new Data_Ord.Ord(function () {
      return eqReplacement;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqPattern = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordPattern = new Data_Ord.Ord(function () {
      return eqPattern;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  exports["Pattern"] = Pattern;
  exports["Replacement"] = Replacement;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
  exports["eqReplacement"] = eqReplacement;
  exports["ordReplacement"] = ordReplacement;
  exports["newtypeReplacement"] = newtypeReplacement;
  exports["showReplacement"] = showReplacement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String"] = $PS["Data.String"] || {};
  var exports = $PS["Data.String"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  exports["codePointAt"] = Data_String_CodePoints.codePointAt;
  exports["codePointFromChar"] = Data_String_CodePoints.codePointFromChar;
  exports["contains"] = Data_String_CodePoints.contains;
  exports["countPrefix"] = Data_String_CodePoints.countPrefix;
  exports["drop"] = Data_String_CodePoints.drop;
  exports["dropWhile"] = Data_String_CodePoints.dropWhile;
  exports["fromCodePointArray"] = Data_String_CodePoints.fromCodePointArray;
  exports["indexOf"] = Data_String_CodePoints.indexOf;
  exports["indexOf'"] = Data_String_CodePoints["indexOf'"];
  exports["lastIndexOf"] = Data_String_CodePoints.lastIndexOf;
  exports["lastIndexOf'"] = Data_String_CodePoints["lastIndexOf'"];
  exports["length"] = Data_String_CodePoints.length;
  exports["singleton"] = Data_String_CodePoints.singleton;
  exports["splitAt"] = Data_String_CodePoints.splitAt;
  exports["stripPrefix"] = Data_String_CodePoints.stripPrefix;
  exports["stripSuffix"] = Data_String_CodePoints.stripSuffix;
  exports["take"] = Data_String_CodePoints.take;
  exports["takeWhile"] = Data_String_CodePoints.takeWhile;
  exports["toCodePointArray"] = Data_String_CodePoints.toCodePointArray;
  exports["uncons"] = Data_String_CodePoints.uncons;
  exports["joinWith"] = Data_String_Common.joinWith;
  exports["localeCompare"] = Data_String_Common.localeCompare;
  exports["null"] = Data_String_Common["null"];
  exports["replace"] = Data_String_Common.replace;
  exports["replaceAll"] = Data_String_Common.replaceAll;
  exports["split"] = Data_String_Common.split;
  exports["toLower"] = Data_String_Common.toLower;
  exports["toUpper"] = Data_String_Common.toUpper;
  exports["trim"] = Data_String_Common.trim;
  exports["Pattern"] = Data_String_Pattern.Pattern;
  exports["Replacement"] = Data_String_Pattern.Replacement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CaseInsensitive"] = $PS["Data.String.CaseInsensitive"] || {};
  var exports = $PS["Data.String.CaseInsensitive"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var CaseInsensitiveString = function (x) {
      return x;
  };
  var showCaseInsensitiveString = new Data_Show.Show(function (v) {
      return "(CaseInsensitiveString " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var newtypeCaseInsensitiveString = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqCaseInsensitiveString = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_String_Common.toLower(v) === Data_String_Common.toLower(v1);
      };
  });
  var ordCaseInsensitiveString = new Data_Ord.Ord(function () {
      return eqCaseInsensitiveString;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordString)(Data_String_Common.toLower(v))(Data_String_Common.toLower(v1));
      };
  });
  exports["CaseInsensitiveString"] = CaseInsensitiveString;
  exports["eqCaseInsensitiveString"] = eqCaseInsensitiveString;
  exports["ordCaseInsensitiveString"] = ordCaseInsensitiveString;
  exports["showCaseInsensitiveString"] = showCaseInsensitiveString;
  exports["newtypeCaseInsensitiveString"] = newtypeCaseInsensitiveString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.NonEmpty.CodePoints"] = $PS["Data.String.NonEmpty.CodePoints"] || {};
  var exports = $PS["Data.String.NonEmpty.CodePoints"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];                
  var toNonEmptyString = Data_String_NonEmpty_Internal.NonEmptyString;
  var snoc = function (c) {
      return function (s) {
          return toNonEmptyString(s + Data_String_CodePoints.singleton(c));
      };
  };
  var singleton = function ($17) {
      return toNonEmptyString(Data_String_CodePoints.singleton($17));
  };
  var liftS = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var takeWhile = function (f) {
      var $18 = liftS(Data_String_CodePoints.takeWhile(f));
      return function ($19) {
          return Data_String_NonEmpty_Internal.fromString($18($19));
      };
  };
  var lastIndexOf$prime = function (pat) {
      var $20 = Data_String_CodePoints["lastIndexOf'"](pat);
      return function ($21) {
          return liftS($20($21));
      };
  };
  var lastIndexOf = function ($22) {
      return liftS(Data_String_CodePoints.lastIndexOf($22));
  };
  var indexOf$prime = function (pat) {
      var $23 = Data_String_CodePoints["indexOf'"](pat);
      return function ($24) {
          return liftS($23($24));
      };
  };
  var indexOf = function ($25) {
      return liftS(Data_String_CodePoints.indexOf($25));
  };
  var fromNonEmptyString = function (v) {
      return v;
  };
  var length = function ($26) {
      return Data_String_CodePoints.length(fromNonEmptyString($26));
  };
  var splitAt = function (i) {
      return function (nes) {
          var v = Data_String_CodePoints.splitAt(i)(fromNonEmptyString(nes));
          return {
              before: Data_String_NonEmpty_Internal.fromString(v.before),
              after: Data_String_NonEmpty_Internal.fromString(v.after)
          };
      };
  };
  var take = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $14 = i < 1;
          if ($14) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodePoints.take(i)(s)));
      };
  };
  var toCodePointArray = function ($27) {
      return Data_String_CodePoints.toCodePointArray(fromNonEmptyString($27));
  };
  var toNonEmptyCodePointArray = (function () {
      var $28 = Data_Maybe.fromJust();
      return function ($29) {
          return $28(Data_Array_NonEmpty.fromArray(toCodePointArray($29)));
      };
  })();
  var uncons = function (nes) {
      var s = fromNonEmptyString(nes);
      return {
          head: Data_Maybe.fromJust()(Data_String_CodePoints.codePointAt(0)(s)),
          tail: Data_String_NonEmpty_Internal.fromString(Data_String_CodePoints.drop(1)(s))
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(Data_String_NonEmpty_Internal.semigroupNonEmptyString)(singleton);
  };
  var fromCodePointArray = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(toNonEmptyString(Data_String_CodePoints.fromCodePointArray(v)));
  };
  var fromNonEmptyCodePointArray = (function () {
      var $30 = Data_Maybe.fromJust();
      return function ($31) {
          return $30(fromCodePointArray(Data_Array_NonEmpty.toArray($31)));
      };
  })();
  var dropWhile = function (f) {
      var $32 = liftS(Data_String_CodePoints.dropWhile(f));
      return function ($33) {
          return Data_String_NonEmpty_Internal.fromString($32($33));
      };
  };
  var drop = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $16 = i >= Data_String_CodePoints.length(s);
          if ($16) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodePoints.drop(i)(s)));
      };
  };
  var countPrefix = function ($34) {
      return liftS(Data_String_CodePoints.countPrefix($34));
  };
  var cons = function (c) {
      return function (s) {
          return toNonEmptyString(Data_String_CodePoints.singleton(c) + s);
      };
  };
  var codePointAt = function ($35) {
      return liftS(Data_String_CodePoints.codePointAt($35));
  };
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["fromNonEmptyCodePointArray"] = fromNonEmptyCodePointArray;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toCodePointArray"] = toCodePointArray;
  exports["toNonEmptyCodePointArray"] = toNonEmptyCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["countPrefix"] = countPrefix;
  exports["splitAt"] = splitAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.NonEmpty"] = $PS["Data.String.NonEmpty"] || {};
  var exports = $PS["Data.String.NonEmpty"];
  var Data_String_NonEmpty_CodePoints = $PS["Data.String.NonEmpty.CodePoints"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  exports["codePointAt"] = Data_String_NonEmpty_CodePoints.codePointAt;
  exports["cons"] = Data_String_NonEmpty_CodePoints.cons;
  exports["countPrefix"] = Data_String_NonEmpty_CodePoints.countPrefix;
  exports["drop"] = Data_String_NonEmpty_CodePoints.drop;
  exports["dropWhile"] = Data_String_NonEmpty_CodePoints.dropWhile;
  exports["fromCodePointArray"] = Data_String_NonEmpty_CodePoints.fromCodePointArray;
  exports["fromFoldable1"] = Data_String_NonEmpty_CodePoints.fromFoldable1;
  exports["fromNonEmptyCodePointArray"] = Data_String_NonEmpty_CodePoints.fromNonEmptyCodePointArray;
  exports["indexOf"] = Data_String_NonEmpty_CodePoints.indexOf;
  exports["indexOf'"] = Data_String_NonEmpty_CodePoints["indexOf'"];
  exports["lastIndexOf"] = Data_String_NonEmpty_CodePoints.lastIndexOf;
  exports["lastIndexOf'"] = Data_String_NonEmpty_CodePoints["lastIndexOf'"];
  exports["length"] = Data_String_NonEmpty_CodePoints.length;
  exports["singleton"] = Data_String_NonEmpty_CodePoints.singleton;
  exports["snoc"] = Data_String_NonEmpty_CodePoints.snoc;
  exports["splitAt"] = Data_String_NonEmpty_CodePoints.splitAt;
  exports["take"] = Data_String_NonEmpty_CodePoints.take;
  exports["takeWhile"] = Data_String_NonEmpty_CodePoints.takeWhile;
  exports["toCodePointArray"] = Data_String_NonEmpty_CodePoints.toCodePointArray;
  exports["toNonEmptyCodePointArray"] = Data_String_NonEmpty_CodePoints.toNonEmptyCodePointArray;
  exports["uncons"] = Data_String_NonEmpty_CodePoints.uncons;
  exports["NonEmptyReplacement"] = Data_String_NonEmpty_Internal.NonEmptyReplacement;
  exports["MakeNonEmpty"] = Data_String_NonEmpty_Internal.MakeNonEmpty;
  exports["appendString"] = Data_String_NonEmpty_Internal.appendString;
  exports["contains"] = Data_String_NonEmpty_Internal.contains;
  exports["fromString"] = Data_String_NonEmpty_Internal.fromString;
  exports["join1With"] = Data_String_NonEmpty_Internal.join1With;
  exports["joinWith"] = Data_String_NonEmpty_Internal.joinWith;
  exports["joinWith1"] = Data_String_NonEmpty_Internal.joinWith1;
  exports["localeCompare"] = Data_String_NonEmpty_Internal.localeCompare;
  exports["nes"] = Data_String_NonEmpty_Internal.nes;
  exports["prependString"] = Data_String_NonEmpty_Internal.prependString;
  exports["replace"] = Data_String_NonEmpty_Internal.replace;
  exports["replaceAll"] = Data_String_NonEmpty_Internal.replaceAll;
  exports["stripPrefix"] = Data_String_NonEmpty_Internal.stripPrefix;
  exports["stripSuffix"] = Data_String_NonEmpty_Internal.stripSuffix;
  exports["toLower"] = Data_String_NonEmpty_Internal.toLower;
  exports["toString"] = Data_String_NonEmpty_Internal.toString;
  exports["toUpper"] = Data_String_NonEmpty_Internal.toUpper;
  exports["trim"] = Data_String_NonEmpty_Internal.trim;
  exports["unsafeFromString"] = Data_String_NonEmpty_Internal.unsafeFromString;
  exports["Pattern"] = Data_String_Pattern.Pattern;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.NonEmpty.CaseInsensitive"] = $PS["Data.String.NonEmpty.CaseInsensitive"] || {};
  var exports = $PS["Data.String.NonEmpty.CaseInsensitive"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];                
  var CaseInsensitiveNonEmptyString = function (x) {
      return x;
  };
  var showCaseInsensitiveNonEmptyString = new Data_Show.Show(function (v) {
      return "(CaseInsensitiveNonEmptyString " + (Data_Show.show(Data_String_NonEmpty_Internal.showNonEmptyString)(v) + ")");
  });
  var newtypeCaseInsensitiveNonEmptyString = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqCaseInsensitiveNonEmptyString = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(Data_String_NonEmpty_Internal.eqNonEmptyString)(Data_String_NonEmpty_Internal.toLower(v))(Data_String_NonEmpty_Internal.toLower(v1));
      };
  });
  var ordCaseInsensitiveNonEmptyString = new Data_Ord.Ord(function () {
      return eqCaseInsensitiveNonEmptyString;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_String_NonEmpty_Internal.ordNonEmptyString)(Data_String_NonEmpty_Internal.toLower(v))(Data_String_NonEmpty_Internal.toLower(v1));
      };
  });
  exports["CaseInsensitiveNonEmptyString"] = CaseInsensitiveNonEmptyString;
  exports["eqCaseInsensitiveNonEmptyString"] = eqCaseInsensitiveNonEmptyString;
  exports["ordCaseInsensitiveNonEmptyString"] = ordCaseInsensitiveNonEmptyString;
  exports["showCaseInsensitiveNonEmptyString"] = showCaseInsensitiveNonEmptyString;
  exports["newtypeCaseInsensitiveNonEmptyString"] = newtypeCaseInsensitiveNonEmptyString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.NonEmpty.CodeUnits"] = $PS["Data.String.NonEmpty.CodeUnits"] || {};
  var exports = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var toNonEmptyString = Data_String_NonEmpty_Internal.NonEmptyString;
  var snoc = function (c) {
      return function (s) {
          return toNonEmptyString(s + Data_String_CodeUnits.singleton(c));
      };
  };
  var singleton = function ($18) {
      return toNonEmptyString(Data_String_CodeUnits.singleton($18));
  };
  var liftS = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var takeWhile = function (f) {
      var $19 = liftS(Data_String_CodeUnits.takeWhile(f));
      return function ($20) {
          return Data_String_NonEmpty_Internal.fromString($19($20));
      };
  };
  var lastIndexOf$prime = function (pat) {
      var $21 = Data_String_CodeUnits["lastIndexOf'"](pat);
      return function ($22) {
          return liftS($21($22));
      };
  };
  var lastIndexOf = function ($23) {
      return liftS(Data_String_CodeUnits.lastIndexOf($23));
  };
  var indexOf$prime = function (pat) {
      var $24 = Data_String_CodeUnits["indexOf'"](pat);
      return function ($25) {
          return liftS($24($25));
      };
  };
  var indexOf = function ($26) {
      return liftS(Data_String_CodeUnits.indexOf($26));
  };
  var fromNonEmptyString = function (v) {
      return v;
  };
  var length = function ($27) {
      return Data_String_CodeUnits.length(fromNonEmptyString($27));
  };
  var splitAt = function (i) {
      return function (nes) {
          var v = Data_String_CodeUnits.splitAt(i)(fromNonEmptyString(nes));
          return {
              before: Data_String_NonEmpty_Internal.fromString(v.before),
              after: Data_String_NonEmpty_Internal.fromString(v.after)
          };
      };
  };
  var take = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $13 = i < 1;
          if ($13) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.take(i)(s)));
      };
  };
  var takeRight = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $14 = i < 1;
          if ($14) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.takeRight(i)(s)));
      };
  };
  var toChar = function ($28) {
      return Data_String_CodeUnits.toChar(fromNonEmptyString($28));
  };
  var toCharArray = function ($29) {
      return Data_String_CodeUnits.toCharArray(fromNonEmptyString($29));
  };
  var toNonEmptyCharArray = (function () {
      var $30 = Data_Maybe.fromJust();
      return function ($31) {
          return $30(Data_Array_NonEmpty.fromArray(toCharArray($31)));
      };
  })();
  var uncons = function (nes) {
      var s = fromNonEmptyString(nes);
      return {
          head: Data_String_Unsafe.charAt(0)(s),
          tail: Data_String_NonEmpty_Internal.fromString(Data_String_CodeUnits.drop(1)(s))
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      var $32 = Data_Semigroup_Foldable.fold1(dictFoldable1)(Data_String_NonEmpty_Internal.semigroupNonEmptyString);
      return function ($33) {
          return $32($33);
      };
  };
  var fromCharArray = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.fromCharArray(v)));
  };
  var fromNonEmptyCharArray = (function () {
      var $34 = Data_Maybe.fromJust();
      return function ($35) {
          return $34(fromCharArray(Data_Array_NonEmpty.toArray($35)));
      };
  })();
  var dropWhile = function (f) {
      var $36 = liftS(Data_String_CodeUnits.dropWhile(f));
      return function ($37) {
          return Data_String_NonEmpty_Internal.fromString($36($37));
      };
  };
  var dropRight = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $16 = i >= Data_String_CodeUnits.length(s);
          if ($16) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.dropRight(i)(s)));
      };
  };
  var drop = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $17 = i >= Data_String_CodeUnits.length(s);
          if ($17) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.drop(i)(s)));
      };
  };
  var countPrefix = function ($38) {
      return liftS(Data_String_CodeUnits.countPrefix($38));
  };
  var cons = function (c) {
      return function (s) {
          return toNonEmptyString(Data_String_CodeUnits.singleton(c) + s);
      };
  };
  var charAt = function ($39) {
      return liftS(Data_String_CodeUnits.charAt($39));
  };
  exports["fromCharArray"] = fromCharArray;
  exports["fromNonEmptyCharArray"] = fromNonEmptyCharArray;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toCharArray"] = toCharArray;
  exports["toNonEmptyCharArray"] = toNonEmptyCharArray;
  exports["charAt"] = charAt;
  exports["toChar"] = toChar;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["takeRight"] = takeRight;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropRight"] = dropRight;
  exports["dropWhile"] = dropWhile;
  exports["countPrefix"] = countPrefix;
  exports["splitAt"] = splitAt;
})(PS);
(function(exports) {
  "use strict";

  exports.showRegexImpl = function (r) {
    return "" + r;
  };

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.source = function (r) {
    return r.source;
  };

  exports.flagsImpl = function (r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      dotAll: r.dotAll,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports._replaceBy = function (just) {
    return function (nothing) {
      return function (r) {
        return function (f) {
          return function (s) {
            return s.replace(r, function (match) {
              var groups = [];
              var group, i = 1;
              while (typeof (group = arguments[i++]) !== "number") {
                groups.push(group == null ? nothing : just(group));
              }
              return f(match)(groups);
            });
          };
        };
      };
    };
  };

  exports._search = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var result = s.search(r);
          return result === -1 ? nothing : just(result);
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: true
  });
  var sticky = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: true,
      unicode: false
  });
  var showRegexFlags = new Data_Show.Show(function (v) {
      var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.dotAll))("dotAll"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.unicode))("unicode")))))));
      var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([  ]);
      if ($6) {
          return "noFlags";
      };
      return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
  });
  var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new RegexFlags({
              global: v.value0.global || v1.value0.global,
              ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
              multiline: v.value0.multiline || v1.value0.multiline,
              dotAll: v.value0.dotAll || v1.value0.dotAll,
              sticky: v.value0.sticky || v1.value0.sticky,
              unicode: v.value0.unicode || v1.value0.unicode
          });
      };
  });
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var multiline = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: true,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var monoidRegexFlags = new Data_Monoid.Monoid(function () {
      return semigroupRegexFlags;
  }, noFlags);
  var ignoreCase = new RegexFlags({
      global: false,
      ignoreCase: true,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var eqRegexFlags = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.dotAll === v1.value0.dotAll && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode))));
      };
  });
  var dotAll = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: true,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
  exports["global"] = global;
  exports["ignoreCase"] = ignoreCase;
  exports["multiline"] = multiline;
  exports["sticky"] = sticky;
  exports["unicode"] = unicode;
  exports["dotAll"] = dotAll;
  exports["semigroupRegexFlags"] = semigroupRegexFlags;
  exports["monoidRegexFlags"] = monoidRegexFlags;
  exports["eqRegexFlags"] = eqRegexFlags;
  exports["showRegexFlags"] = showRegexFlags;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];                
  var showRegex = new Data_Show.Show($foreign.showRegexImpl);
  var search = $foreign["_search"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var replace$prime = $foreign["_replaceBy"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return new Data_String_Regex_Flags.RegexFlags({
          global: Data_String_CodeUnits.contains("g")(s),
          ignoreCase: Data_String_CodeUnits.contains("i")(s),
          multiline: Data_String_CodeUnits.contains("m")(s),
          dotAll: Data_String_CodeUnits.contains("s")(s),
          sticky: Data_String_CodeUnits.contains("y")(s),
          unicode: Data_String_CodeUnits.contains("u")(s)
      });
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var flags = function ($9) {
      return Data_String_Regex_Flags.RegexFlags.create($foreign.flagsImpl($9));
  };
  exports["regex"] = regex;
  exports["flags"] = flags;
  exports["renderFlags"] = renderFlags;
  exports["parseFlags"] = parseFlags;
  exports["match"] = match;
  exports["replace'"] = replace$prime;
  exports["search"] = search;
  exports["showRegex"] = showRegex;
  exports["source"] = $foreign.source;
  exports["test"] = $foreign.test;
  exports["replace"] = $foreign.replace;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Time.Duration.Gen"] = $PS["Data.Time.Duration.Gen"] || {};
  var exports = $PS["Data.Time.Duration.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var genSeconds = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Seconds)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(600.0));
  };
  var genMinutes = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Minutes)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(600.0));
  };
  var genMilliseconds = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Milliseconds)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(600000.0));
  };
  var genHours = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Hours)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(240.0));
  };
  var genDays = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Days)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(42.0));
  };
  exports["genMilliseconds"] = genMilliseconds;
  exports["genSeconds"] = genSeconds;
  exports["genMinutes"] = genMinutes;
  exports["genHours"] = genHours;
  exports["genDays"] = genDays;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple.Nested"] = $PS["Data.Tuple.Nested"] || {};
  var exports = $PS["Data.Tuple.Nested"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry1 = function (f) {
      return function (v) {
          return f(v.value0);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  var tuple2 = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
      };
  };
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple1 = function (a) {
      return new Data_Tuple.Tuple(a, Data_Unit.unit);
  };
  var over9 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
      };
  };
  var over8 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
      };
  };
  var over7 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
      };
  };
  var over6 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
      };
  };
  var over5 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
      };
  };
  var over4 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
      };
  };
  var over3 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
      };
  };
  var over2 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
      };
  };
  var over10 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
      };
  };
  var over1 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(o(v.value0), v.value1);
      };
  };
  var get9 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get8 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get7 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value0;
  };
  var get6 = function (v) {
      return v.value1.value1.value1.value1.value1.value0;
  };
  var get5 = function (v) {
      return v.value1.value1.value1.value1.value0;
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get10 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  var curry9 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                      };
                  };
              };
          };
      };
  };
  var curry3 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                  };
              };
          };
      };
  };
  var curry2 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
              };
          };
      };
  };
  var curry10 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return function (j) {
                                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry1 = function (z) {
      return function (f) {
          return function (a) {
              return f(new Data_Tuple.Tuple(a, z));
          };
      };
  };
  exports["tuple1"] = tuple1;
  exports["tuple2"] = tuple2;
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
  exports["tuple5"] = tuple5;
  exports["tuple6"] = tuple6;
  exports["tuple7"] = tuple7;
  exports["tuple8"] = tuple8;
  exports["tuple9"] = tuple9;
  exports["tuple10"] = tuple10;
  exports["get1"] = get1;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
  exports["get5"] = get5;
  exports["get6"] = get6;
  exports["get7"] = get7;
  exports["get8"] = get8;
  exports["get9"] = get9;
  exports["get10"] = get10;
  exports["over1"] = over1;
  exports["over2"] = over2;
  exports["over3"] = over3;
  exports["over4"] = over4;
  exports["over5"] = over5;
  exports["over6"] = over6;
  exports["over7"] = over7;
  exports["over8"] = over8;
  exports["over9"] = over9;
  exports["over10"] = over10;
  exports["uncurry1"] = uncurry1;
  exports["uncurry2"] = uncurry2;
  exports["uncurry3"] = uncurry3;
  exports["uncurry4"] = uncurry4;
  exports["uncurry5"] = uncurry5;
  exports["uncurry6"] = uncurry6;
  exports["uncurry7"] = uncurry7;
  exports["uncurry8"] = uncurry8;
  exports["uncurry9"] = uncurry9;
  exports["uncurry10"] = uncurry10;
  exports["curry1"] = curry1;
  exports["curry2"] = curry2;
  exports["curry3"] = curry3;
  exports["curry4"] = curry4;
  exports["curry5"] = curry5;
  exports["curry6"] = curry6;
  exports["curry7"] = curry7;
  exports["curry8"] = curry8;
  exports["curry9"] = curry9;
  exports["curry10"] = curry10;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Witherable"] = $PS["Data.Witherable"] || {};
  var exports = $PS["Data.Witherable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var Witherable = function (Filterable0, Traversable1, wilt, wither) {
      this.Filterable0 = Filterable0;
      this.Traversable1 = Traversable1;
      this.wilt = wilt;
      this.wither = wither;
  };
  var witherableMaybe = new Witherable(function () {
      return Data_Filterable.filterableMaybe;
  }, function () {
      return Data_Traversable.traversableMaybe;
  }, function (dictApplicative) {
      return function (p) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)({
                      left: Data_Maybe.Nothing.value,
                      right: Data_Maybe.Nothing.value
                  });
              };
              if (v instanceof Data_Maybe.Just) {
                  var convert = function (v1) {
                      if (v1 instanceof Data_Either.Left) {
                          return {
                              left: new Data_Maybe.Just(v1.value0),
                              right: Data_Maybe.Nothing.value
                          };
                      };
                      if (v1 instanceof Data_Either.Right) {
                          return {
                              left: Data_Maybe.Nothing.value,
                              right: new Data_Maybe.Just(v1.value0)
                          };
                      };
                      throw new Error("Failed pattern match at Data.Witherable (line 147, column 5 - line 147, column 56): " + [ v1.constructor.name ]);
                  };
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(convert)(p(v.value0));
              };
              throw new Error("Failed pattern match at Data.Witherable (line 144, column 1 - line 151, column 26): " + [ p.constructor.name, v.constructor.name ]);
          };
      };
  }, function (dictApplicative) {
      return function (p) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return p(v.value0);
              };
              throw new Error("Failed pattern match at Data.Witherable (line 144, column 1 - line 151, column 26): " + [ p.constructor.name, v.constructor.name ]);
          };
      };
  });
  var witherableMap = function (dictOrd) {
      return new Witherable(function () {
          return Data_Filterable.filterableMap(dictOrd);
      }, function () {
          return Data_Map_Internal.traversableMap;
      }, function (dictApplicative) {
          return function (p) {
              var toList = function (dictOrd1) {
                  return Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
              };
              var go = function (acc) {
                  return function (v) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v1) {
                          return function (v2) {
                              if (v2 instanceof Data_Either.Left) {
                                  return {
                                      left: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.left),
                                      right: v1.right
                                  };
                              };
                              if (v2 instanceof Data_Either.Right) {
                                  return {
                                      left: v1.left,
                                      right: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.right)
                                  };
                              };
                              throw new Error("Failed pattern match at Data.Witherable (line 128, column 9 - line 130, column 59): " + [ v2.constructor.name ]);
                          };
                      })(acc))(p(v.value1));
                  };
              };
              var $91 = Data_Foldable.foldl(Data_List_Types.foldableList)(go)(Control_Applicative.pure(dictApplicative)({
                  left: Data_Map_Internal.empty,
                  right: Data_Map_Internal.empty
              }));
              var $92 = toList(dictOrd);
              return function ($93) {
                  return $91($92($93));
              };
          };
      }, function (dictApplicative) {
          return function (p) {
              var toList = function (dictOrd1) {
                  return Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
              };
              var go = function (acc) {
                  return function (v) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (comp) {
                          return function (v1) {
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return comp;
                              };
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Data_Map_Internal.insert(dictOrd)(v.value0)(v1.value0)(comp);
                              };
                              throw new Error("Failed pattern match at Data.Witherable (line 139, column 9 - line 141, column 41): " + [ v1.constructor.name ]);
                          };
                      })(acc))(p(v.value1));
                  };
              };
              var $94 = Data_Foldable.foldl(Data_List_Types.foldableList)(go)(Control_Applicative.pure(dictApplicative)(Data_Map_Internal.empty));
              var $95 = toList(dictOrd);
              return function ($96) {
                  return $94($95($96));
              };
          };
      });
  };
  var witherableList = new Witherable(function () {
      return Data_Filterable.filterableList;
  }, function () {
      return Data_List_Types.traversableList;
  }, function (dictApplicative) {
      return function (p) {
          var rev = function (v) {
              return {
                  left: Data_List.reverse(v.left),
                  right: Data_List.reverse(v.right)
              };
          };
          var go = function (acc) {
              return function (x) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Either.Left) {
                              return {
                                  left: new Data_List_Types.Cons(v1.value0, v.left),
                                  right: v.right
                              };
                          };
                          if (v1 instanceof Data_Either.Right) {
                              return {
                                  left: v.left,
                                  right: new Data_List_Types.Cons(v1.value0, v.right)
                              };
                          };
                          throw new Error("Failed pattern match at Data.Witherable (line 109, column 7 - line 111, column 46): " + [ v1.constructor.name ]);
                      };
                  })(acc))(p(x));
              };
          };
          var $97 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(rev);
          var $98 = Data_Foldable.foldl(Data_List_Types.foldableList)(go)(Control_Applicative.pure(dictApplicative)({
              left: Data_List_Types.Nil.value,
              right: Data_List_Types.Nil.value
          }));
          return function ($99) {
              return $97($98($99));
          };
      };
  }, function (dictApplicative) {
      return function (p) {
          var go = function (acc) {
              return function (x) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (comp) {
                      return function (v) {
                          if (v instanceof Data_Maybe.Nothing) {
                              return comp;
                          };
                          if (v instanceof Data_Maybe.Just) {
                              return new Data_List_Types.Cons(v.value0, comp);
                          };
                          throw new Error("Failed pattern match at Data.Witherable (line 116, column 7 - line 118, column 28): " + [ v.constructor.name ]);
                      };
                  })(acc))(p(x));
              };
          };
          var $100 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_List.reverse);
          var $101 = Data_Foldable.foldl(Data_List_Types.foldableList)(go)(Control_Applicative.pure(dictApplicative)(Data_List_Types.Nil.value));
          return function ($102) {
              return $100($101($102));
          };
      };
  });
  var witherableEither = function (dictMonoid) {
      return new Witherable(function () {
          return Data_Filterable.filterableEither(dictMonoid);
      }, function () {
          return Data_Traversable.traversableEither;
      }, function (dictApplicative) {
          return function (p) {
              return function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictApplicative)({
                          left: new Data_Either.Left(v.value0),
                          right: new Data_Either.Left(v.value0)
                      });
                  };
                  if (v instanceof Data_Either.Right) {
                      var convert = function (v1) {
                          if (v1 instanceof Data_Either.Left) {
                              return {
                                  left: new Data_Either.Right(v1.value0),
                                  right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
                              };
                          };
                          if (v1 instanceof Data_Either.Right) {
                              return {
                                  left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
                                  right: new Data_Either.Right(v1.value0)
                              };
                          };
                          throw new Error("Failed pattern match at Data.Witherable (line 156, column 5 - line 156, column 61): " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(convert)(p(v.value0));
                  };
                  throw new Error("Failed pattern match at Data.Witherable (line 153, column 1 - line 162, column 31): " + [ p.constructor.name, v.constructor.name ]);
              };
          };
      }, function (dictApplicative) {
          return function (p) {
              return function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      var convert = function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return new Data_Either.Right(v1.value0);
                          };
                          throw new Error("Failed pattern match at Data.Witherable (line 161, column 5 - line 161, column 34): " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(convert)(p(v.value0));
                  };
                  throw new Error("Failed pattern match at Data.Witherable (line 153, column 1 - line 162, column 31): " + [ p.constructor.name, v.constructor.name ]);
              };
          };
      });
  };
  var witherDefault = function (dictWitherable) {
      return function (dictApplicative) {
          return function (p) {
              var $103 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Compactable.compact((dictWitherable.Filterable0()).Compactable0()));
              var $104 = Data_Traversable.traverse(dictWitherable.Traversable1())(dictApplicative)(p);
              return function ($105) {
                  return $103($104($105));
              };
          };
      };
  };
  var wither = function (dict) {
      return dict.wither;
  };
  var withered = function (dictWitherable) {
      return function (dictApplicative) {
          return wither(dictWitherable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var wiltDefault = function (dictWitherable) {
      return function (dictApplicative) {
          return function (p) {
              var $106 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Compactable.separate((dictWitherable.Filterable0()).Compactable0()));
              var $107 = Data_Traversable.traverse(dictWitherable.Traversable1())(dictApplicative)(p);
              return function ($108) {
                  return $106($107($108));
              };
          };
      };
  };
  var witherableArray = new Witherable(function () {
      return Data_Filterable.filterableArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return wiltDefault(witherableArray)(dictApplicative);
  }, function (dictApplicative) {
      return witherDefault(witherableArray)(dictApplicative);
  });
  var wilt = function (dict) {
      return dict.wilt;
  };
  var wilted = function (dictWitherable) {
      return function (dictApplicative) {
          return wilt(dictWitherable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traverseByWither = function (dictWitherable) {
      return function (dictApplicative) {
          return function (f) {
              return wither(dictWitherable)(dictApplicative)((function () {
                  var $109 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create);
                  return function ($110) {
                      return $109(f($110));
                  };
              })());
          };
      };
  };
  var partitionMapByWilt = function (dictWitherable) {
      return function (p) {
          var $111 = Data_Newtype.unwrap();
          var $112 = wilt(dictWitherable)(Data_Identity.applicativeIdentity)(function ($114) {
              return Data_Identity.Identity(p($114));
          });
          return function ($113) {
              return $111($112($113));
          };
      };
  };
  var filterMapByWither = function (dictWitherable) {
      return function (p) {
          var $115 = Data_Newtype.unwrap();
          var $116 = wither(dictWitherable)(Data_Identity.applicativeIdentity)(function ($118) {
              return Data_Identity.Identity(p($118));
          });
          return function ($117) {
              return $115($116($117));
          };
      };
  };
  exports["Witherable"] = Witherable;
  exports["wilt"] = wilt;
  exports["wither"] = wither;
  exports["partitionMapByWilt"] = partitionMapByWilt;
  exports["filterMapByWither"] = filterMapByWither;
  exports["traverseByWither"] = traverseByWither;
  exports["wilted"] = wilted;
  exports["withered"] = withered;
  exports["witherDefault"] = witherDefault;
  exports["wiltDefault"] = wiltDefault;
  exports["witherableArray"] = witherableArray;
  exports["witherableList"] = witherableList;
  exports["witherableMap"] = witherableMap;
  exports["witherableMaybe"] = witherableMaybe;
  exports["witherableEither"] = witherableEither;
  exports["Filterable"] = Data_Filterable.Filterable;
})(PS);
(function(exports) {
  "use strict"

  exports.parseFloat = parseFloat
})(PS["Duration"] = PS["Duration"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Duration"] = $PS["Duration"] || {};
  var exports = $PS["Duration"];
  var $foreign = $PS["Duration"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];                
  var Duration = (function () {
      function Duration(value0) {
          this.value0 = value0;
      };
      Duration.create = function (value0) {
          return new Duration(value0);
      };
      return Duration;
  })();
  var showDuration = function (v) {
      var component = function (value) {
          return function (word) {
              var v1 = Data_Int.fromNumber(value);
              if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
                  return "";
              };
              if (v1 instanceof Data_Maybe.Just && v1.value0 === 1) {
                  return "1 " + word;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Show.show(Data_Show.showInt)(v1.value0) + (" " + (word + "s"));
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Data_Show.show(Data_Show.showNumber)(value) + (" " + (word + "s"));
              };
              throw new Error("Failed pattern match at Duration (line 72, column 28 - line 76, column 50): " + [ v1.constructor.name ]);
          };
      };
      return Data_Array.intercalate(Data_Monoid.monoidString)(" ")([ component(v.value0.years)("Year"), component(v.value0.weeks)("Week"), component(v.value0.days)("Day"), component(v.value0.hours)("Hour"), component(v.value0.minutes)("Minute"), component(v.value0.seconds)("Second") ]);
  };
  var encodeDuration = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      var component = function (tag) {
          return function (val) {
              var $11 = val === 0.0;
              if ($11) {
                  return "";
              };
              return Data_Show.show(Data_Show.showNumber)(val) + tag;
          };
      };
      return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)("P" + (component("Y")(v.value0.years) + (component("M")(v.value0.months) + (component("W")(v.value0.weeks) + (component("D")(v.value0.days) + ("T" + (component("H")(v.value0.hours) + (component("M")(v.value0.minutes) + component("S")(v.value0.seconds)))))))));
  });
  var durationRegex = (function () {
      var component = function (tag) {
          return "(?:([\\d\\.]+)" + (tag + ")?");
      };
      return "P" + (Data_Array.foldMap(Data_Monoid.monoidString)(component)([ "Y", "M", "W", "D" ]) + ("T?" + Data_Array.foldMap(Data_Monoid.monoidString)(component)([ "H", "M", "S" ])));
  })();
  var parseDuration = function (str) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.hush(Data_String_Regex.regex(durationRegex)(Data_Monoid.mempty(Data_String_Regex_Flags.monoidRegexFlags))))(function (pat) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(pat)(str))(function (matches) {
              var v = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.maybe(0.0)($foreign["parseFloat"]))(Data_Array_NonEmpty.tail(matches));
              if (v.length === 7) {
                  return Data_Maybe.Just.create(new Duration({
                      years: v[0],
                      months: v[1],
                      weeks: v[2],
                      days: v[3],
                      hours: v[4],
                      minutes: v[5],
                      seconds: v[6]
                  }));
              };
              return Data_Maybe.Nothing.value;
          });
      });
  };
  var decodeDuration = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)((function () {
          var $21 = Data_Either.note(Data_Argonaut_Decode_Error.MissingValue.value);
          return function ($22) {
              return $21(parseDuration($22));
          };
      })())(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(json));
  });
  exports["Duration"] = Duration;
  exports["parseDuration"] = parseDuration;
  exports["durationRegex"] = durationRegex;
  exports["showDuration"] = showDuration;
  exports["decodeDuration"] = decodeDuration;
  exports["encodeDuration"] = encodeDuration;
  exports["parseFloat"] = $foreign["parseFloat"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Cont_Trans = $PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = $PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = $PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_RWS_Trans = $PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffContT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
      }, (function () {
          var $10 = Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)((dictMonadAff.MonadEffect0()).Monad0());
          var $11 = liftAff(dictMonadAff);
          return function ($12) {
              return $10($11($12));
          };
      })());
  };
  var monadAffExceptT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
      }, (function () {
          var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0());
          var $14 = liftAff(dictMonadAff);
          return function ($15) {
              return $13($14($15));
          };
      })());
  };
  var monadAffListT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
      }, (function () {
          var $16 = Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)((dictMonadAff.MonadEffect0()).Monad0());
          var $17 = liftAff(dictMonadAff);
          return function ($18) {
              return $16($17($18));
          };
      })());
  };
  var monadAffMaybe = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
      }, (function () {
          var $19 = Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)((dictMonadAff.MonadEffect0()).Monad0());
          var $20 = liftAff(dictMonadAff);
          return function ($21) {
              return $19($20($21));
          };
      })());
  };
  var monadAffRWS = function (dictMonadAff) {
      return function (dictMonoid) {
          return new MonadAff(function () {
              return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
          }, (function () {
              var $22 = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
              var $23 = liftAff(dictMonadAff);
              return function ($24) {
                  return $22($23($24));
              };
          })());
      };
  };
  var monadAffReader = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
      }, (function () {
          var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
          var $26 = liftAff(dictMonadAff);
          return function ($27) {
              return $25($26($27));
          };
      })());
  };
  var monadAffState = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
      }, (function () {
          var $28 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0());
          var $29 = liftAff(dictMonadAff);
          return function ($30) {
              return $28($29($30));
          };
      })());
  };
  var monadAffWriter = function (dictMonadAff) {
      return function (dictMonoid) {
          return new MonadAff(function () {
              return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
          }, (function () {
              var $31 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
              var $32 = liftAff(dictMonadAff);
              return function ($33) {
                  return $31($32($33));
              };
          })());
      };
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffContT"] = monadAffContT;
  exports["monadAffExceptT"] = monadAffExceptT;
  exports["monadAffListT"] = monadAffListT;
  exports["monadAffMaybe"] = monadAffMaybe;
  exports["monadAffReader"] = monadAffReader;
  exports["monadAffRWS"] = monadAffRWS;
  exports["monadAffState"] = monadAffState;
  exports["monadAffWriter"] = monadAffWriter;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
    };
  };

  exports.info = function (s) {
    return function () {
      console.info(s);
    };
  };

  exports.time = function (s) {
    return function () {
      console.time(s);
    };
  };

  exports.timeLog = function (s) {
    return function () {
      console.timeLog(s);
    };
  };

  exports.timeEnd = function (s) {
    return function () {
      console.timeEnd(s);
    };
  };

  exports.clear = function () {
    console.clear();
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  var Data_Show = $PS["Data.Show"];                
  var warnShow = function (dictShow) {
      return function (a) {
          return $foreign.warn(Data_Show.show(dictShow)(a));
      };
  };
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var infoShow = function (dictShow) {
      return function (a) {
          return $foreign.info(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["warnShow"] = warnShow;
  exports["errorShow"] = errorShow;
  exports["infoShow"] = infoShow;
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
  exports["error"] = $foreign.error;
  exports["info"] = $foreign.info;
  exports["time"] = $foreign.time;
  exports["timeLog"] = $foreign.timeLog;
  exports["timeEnd"] = $foreign.timeEnd;
  exports["clear"] = $foreign.clear;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];                
  var warnShow = function (dictMonadEffect) {
      return function (dictShow) {
          var $16 = Effect_Class.liftEffect(dictMonadEffect);
          var $17 = Effect_Console.warnShow(dictShow);
          return function ($18) {
              return $16($17($18));
          };
      };
  };
  var warn = function (dictMonadEffect) {
      var $19 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($20) {
          return $19(Effect_Console.warn($20));
      };
  };
  var timeLog = function (dictMonadEffect) {
      var $21 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($22) {
          return $21(Effect_Console.timeLog($22));
      };
  };
  var timeEnd = function (dictMonadEffect) {
      var $23 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($24) {
          return $23(Effect_Console.timeEnd($24));
      };
  };
  var time = function (dictMonadEffect) {
      var $25 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($26) {
          return $25(Effect_Console.time($26));
      };
  };
  var logShow = function (dictMonadEffect) {
      return function (dictShow) {
          var $27 = Effect_Class.liftEffect(dictMonadEffect);
          var $28 = Effect_Console.logShow(dictShow);
          return function ($29) {
              return $27($28($29));
          };
      };
  };
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  var infoShow = function (dictMonadEffect) {
      return function (dictShow) {
          var $32 = Effect_Class.liftEffect(dictMonadEffect);
          var $33 = Effect_Console.infoShow(dictShow);
          return function ($34) {
              return $32($33($34));
          };
      };
  };
  var info = function (dictMonadEffect) {
      var $35 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($36) {
          return $35(Effect_Console.info($36));
      };
  };
  var errorShow = function (dictMonadEffect) {
      return function (dictShow) {
          var $37 = Effect_Class.liftEffect(dictMonadEffect);
          var $38 = Effect_Console.errorShow(dictShow);
          return function ($39) {
              return $37($38($39));
          };
      };
  };
  var error = function (dictMonadEffect) {
      var $40 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($41) {
          return $40(Effect_Console.error($41));
      };
  };
  var clear = function (dictMonadEffect) {
      return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.clear);
  };
  exports["log"] = log;
  exports["logShow"] = logShow;
  exports["warn"] = warn;
  exports["warnShow"] = warnShow;
  exports["error"] = error;
  exports["errorShow"] = errorShow;
  exports["info"] = info;
  exports["infoShow"] = infoShow;
  exports["time"] = time;
  exports["timeLog"] = timeLog;
  exports["timeEnd"] = timeEnd;
  exports["clear"] = clear;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Exception.Unsafe"] = $PS["Effect.Exception.Unsafe"] || {};
  var exports = $PS["Effect.Exception.Unsafe"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];                
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrowException"] = unsafeThrowException;
  exports["unsafeThrow"] = unsafeThrow;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };

  exports.getTimezoneOffset = function () {
    var n = new Date(Date.now());
    return n.getTimezoneOffset();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var nowTime = Data_Functor.map(Effect.functorEffect)(function ($0) {
      return Data_DateTime.time(Data_DateTime_Instant.toDateTime($0));
  })($foreign.now);
  var nowDateTime = Data_Functor.map(Effect.functorEffect)(Data_DateTime_Instant.toDateTime)($foreign.now);
  var nowDate = Data_Functor.map(Effect.functorEffect)(function ($1) {
      return Data_DateTime.date(Data_DateTime_Instant.toDateTime($1));
  })($foreign.now);
  exports["nowDateTime"] = nowDateTime;
  exports["nowDate"] = nowDate;
  exports["nowTime"] = nowTime;
  exports["now"] = $foreign.now;
  exports["getTimezoneOffset"] = $foreign.getTimezoneOffset;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Foreign = $PS["Foreign"];                
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  var readIndex = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableExceptT = function (dictMonad) {
      return new Indexable(function (dictIndex) {
          return function (f) {
              return function (i) {
                  return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(dictMonad))(Data_Function.flip(index(dictIndex))(i))(f);
              };
          };
      });
  };
  var indexableForeign = function (dictMonad) {
      return new Indexable(function (dictIndex) {
          return index(dictIndex);
      });
  };
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexInt = function (dictMonad) {
      return new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex(dictMonad)));
  };
  var indexString = function (dictMonad) {
      return new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp(dictMonad)));
  };
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["Indexable"] = Indexable;
  exports["readProp"] = readProp;
  exports["readIndex"] = readIndex;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["hasProperty"] = hasProperty;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["errorAt"] = errorAt;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;
  exports["indexableForeign"] = indexableForeign;
  exports["indexableExceptT"] = indexableExceptT;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
})(PS["Foreign.Keys"] = PS["Foreign.Keys"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Keys"] = $PS["Foreign.Keys"] || {};
  var exports = $PS["Foreign.Keys"];
  var $foreign = $PS["Foreign.Keys"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Foreign = $PS["Foreign"];                
  var keys = function (dictMonad) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", "null"));
          };
          if (Foreign.isUndefined(value)) {
              return Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", "undefined"));
          };
          if (Foreign.typeOf(value) === "object") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))($foreign.unsafeKeys(value));
          };
          if (Data_Boolean.otherwise) {
              return Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value)));
          };
          throw new Error("Failed pattern match at Foreign.Keys (line 15, column 1 - line 15, column 60): " + [ value.constructor.name ]);
      };
  };
  exports["keys"] = keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object.Gen"] = $PS["Foreign.Object.Gen"] || {};
  var exports = $PS["Foreign.Object.Gen"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Gen = $PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = $PS["Control.Monad.Gen.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var genForeignObject = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (genKey) {
              return function (genValue) {
                  return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                      return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(size))(function (newSize) {
                          return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](newSize))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Foreign_Object.fromFoldable(Data_List_Types.foldableList))(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_List_Types.unfoldableList)(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Tuple.Tuple.create)(genKey))(genValue))));
                      });
                  });
              };
          };
      };
  };
  exports["genForeignObject"] = genForeignObject;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeFreeze = function (m) {
    return function () {
      return m;
    };
  };
})(PS["Foreign.Object.ST.Unsafe"] = PS["Foreign.Object.ST.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object.ST.Unsafe"] = $PS["Foreign.Object.ST.Unsafe"] || {};
  var exports = $PS["Foreign.Object.ST.Unsafe"];
  var $foreign = $PS["Foreign.Object.ST.Unsafe"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeIndex = function (m) {
    return function (k) {
      return m[k];
    };
  };
})(PS["Foreign.Object.Unsafe"] = PS["Foreign.Object.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object.Unsafe"] = $PS["Foreign.Object.Unsafe"] || {};
  var exports = $PS["Foreign.Object.Unsafe"];
  var $foreign = $PS["Foreign.Object.Unsafe"];
  exports["unsafeIndex"] = $foreign.unsafeIndex;
})(PS);
(function(exports) {
  /* Web.DOM.DOMParser */
  "use strict";

  exports.makeDOMParser = function () {
    return new DOMParser();
  };

  exports.parseFromString = function (documentType) {
    return function (sourceString) {
      return function (domParser) {
        return function () { // Effect thunk
          return domParser.parseFromString(sourceString, documentType);
        };
      };
    };
  };
})(PS["Web.DOM.DOMParser"] = PS["Web.DOM.DOMParser"] || {});
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (doc) {
      return function () {
        return doc[name];
      };
    };
  };

  exports.url = getEffProp("URL");
  exports.documentURI = getEffProp("documentURI");
  exports.origin = getEffProp("origin");
  exports.compatMode = getEffProp("compatMode");
  exports.characterSet = getEffProp("characterSet");
  exports.contentType = getEffProp("contentType");

  exports._doctype = getEffProp("doctype");
  exports._documentElement = getEffProp("documentElement");

  exports.getElementsByTagName = function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagName(localName);
      };
    };
  };

  exports._getElementsByTagNameNS = function (ns) {
    return function (localName) {
      return function (doc) {
        return function () {
          return doc.getElementsByTagNameNS(ns, localName);
        };
      };
    };
  };

  exports.getElementsByClassName = function (classNames) {
    return function (doc) {
      return function () {
        return doc.getElementsByClassName(classNames);
      };
    };
  };

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };

  exports._createElementNS = function (ns) {
    return function (qualifiedName) {
      return function (doc) {
        return function () {
          return doc.createElementNS(ns, qualifiedName);
        };
      };
    };
  };

  exports.createDocumentFragment = function (doc) {
    return function () {
      return doc.createDocumentFragment();
    };
  };

  exports.createTextNode = function (data) {
    return function (doc) {
      return function () {
        return doc.createTextNode(data);
      };
    };
  };

  exports.createComment = function (data) {
    return function (doc) {
      return function () {
        return doc.createComment(data);
      };
    };
  };

  exports.createProcessingInstruction = function (target) {
    return function (data) {
      return function (doc) {
        return function () {
          return doc.createProcessingInstruction(target, data);
        };
      };
    };
  };

  exports.importNode = function (node) {
    return function (deep) {
      return function (doc) {
        return function () {
          return doc.importNode(node, deep);
        };
      };
    };
  };

  exports.adoptNode = function (node) {
    return function (doc) {
      return function () {
        return doc.adoptNode(node);
      };
    };
  };
})(PS["Web.DOM.Document"] = PS["Web.DOM.Document"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var $foreign = $PS["Web.DOM.Document"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var getElementsByTagNameNS = function ($0) {
      return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($0));
  };
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
  var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Document");
  var documentElement = (function () {
      var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($2) {
          return $1($foreign["_documentElement"]($2));
      };
  })();
  var doctype = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_doctype"]($4));
      };
  })();
  var createElementNS = function ($5) {
      return $foreign["_createElementNS"](Data_Nullable.toNullable($5));
  };
  exports["fromNode"] = fromNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromNonElementParentNode"] = fromNonElementParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toParentNode"] = toParentNode;
  exports["toNonElementParentNode"] = toNonElementParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["doctype"] = doctype;
  exports["documentElement"] = documentElement;
  exports["getElementsByTagNameNS"] = getElementsByTagNameNS;
  exports["createElementNS"] = createElementNS;
  exports["url"] = $foreign.url;
  exports["documentURI"] = $foreign.documentURI;
  exports["origin"] = $foreign.origin;
  exports["compatMode"] = $foreign.compatMode;
  exports["characterSet"] = $foreign.characterSet;
  exports["contentType"] = $foreign.contentType;
  exports["getElementsByTagName"] = $foreign.getElementsByTagName;
  exports["getElementsByClassName"] = $foreign.getElementsByClassName;
  exports["createElement"] = $foreign.createElement;
  exports["createDocumentFragment"] = $foreign.createDocumentFragment;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["createComment"] = $foreign.createComment;
  exports["createProcessingInstruction"] = $foreign.createProcessingInstruction;
  exports["importNode"] = $foreign.importNode;
  exports["adoptNode"] = $foreign.adoptNode;
})(PS);
(function(exports) {
  "use strict";

  var getProp = function (name) {
    return function (doctype) {
      return doctype[name];
    };
  };

  exports._namespaceURI = getProp("namespaceURI");
  exports._prefix = getProp("prefix");
  exports.localName = getProp("localName");
  exports.tagName = getProp("tagName");

  exports.id = function (node) {
    return function () {
      return node.id;
    };
  };

  exports.setId = function (id) {
    return function (node) {
      return function () {
        node.id = id;
      };
    };
  };

  exports.className = function (node) {
    return function () {
      return node.className;
    };
  };

  exports.classList = function (element) {
    return function () {
      return element.classList;
    };
  };

  exports.setClassName = function (className) {
    return function (node) {
      return function () {
        node.className = className;
      };
    };
  };

  exports.getElementsByTagName = function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagName(localName);
      };
    };
  };

  exports._getElementsByTagNameNS = function (ns) {
    return function (localName) {
      return function (doc) {
        return function () {
          return doc.getElementsByTagNameNS(ns, localName);
        };
      };
    };
  };

  exports.getElementsByClassName = function (classNames) {
    return function (doc) {
      return function () {
        return doc.getElementsByClassName(classNames);
      };
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
        };
      };
    };
  };

  exports._getAttribute = function (name) {
    return function (element) {
      return function () {
        return element.getAttribute(name);
      };
    };
  };

  exports.hasAttribute = function(name) {
    return function (element) {
      return function () {
        return element.hasAttribute(name);
      };
    };
  };

  exports.removeAttribute = function (name) {
    return function (element) {
      return function () {
        element.removeAttribute(name);
      };
    };
  };

  exports.matches = function (selector) {
    return function(element) {
      return function () {
        return element.matches(selector);
      };
    };
  };

  exports._closest = function (selector) {
    return function(element) {
      return function () {
        return element.closest(selector);
      };
    };
  };

  // - CSSOM ---------------------------------------------------------------------

  exports.scrollTop = function (node) {
    return function () {
      return node.scrollTop;
    };
  };

  exports.setScrollTop = function (scrollTop) {
    return function (node) {
      return function () {
        node.scrollTop = scrollTop;
      };
    };
  };

  exports.scrollLeft = function (node) {
    return function () {
      return node.scrollLeft;
    };
  };

  exports.setScrollLeft = function (scrollLeft) {
    return function (node) {
      return function () {
        node.scrollLeft = scrollLeft;
      };
    };
  };

  exports.scrollWidth = function (el) {
    return function () {
      return el.scrollWidth;
    };
  };

  exports.scrollHeight = function (el) {
    return function () {
      return el.scrollHeight;
    };
  };

  exports.clientTop = function (el) {
    return function () {
      return el.clientTop;
    };
  };

  exports.clientLeft = function (el) {
    return function () {
      return el.clientLeft;
    };
  };

  exports.clientWidth = function (el) {
    return function () {
      return el.clientWidth;
    };
  };

  exports.clientHeight = function (el) {
    return function () {
      return el.clientHeight;
    };
  };

  exports._attachShadow = function(props) {
    return function (el) {
      return function() {
        return el.attachShadow(props);
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.children = getEffProp("children");

  exports._firstElementChild = getEffProp("firstElementChild");

  exports._lastElementChild = getEffProp("lastElementChild");

  exports.childElementCount = getEffProp("childElementCount");

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };

  exports.querySelectorAll = function (selector) {
    return function (node) {
      return function () {
        return node.querySelectorAll(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Effect = $PS["Effect"];                
  var QuerySelector = function (x) {
      return x;
  };
  var querySelector = function (qs) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_querySelector"](qs);
      return function ($2) {
          return $0($1($2));
      };
  };
  var ordQuerySelector = Data_Ord.ordString;
  var newtypeQuerySelector = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var lastElementChild = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_lastElementChild"]($4));
      };
  })();
  var firstElementChild = (function () {
      var $5 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($6) {
          return $5($foreign["_firstElementChild"]($6));
      };
  })();
  var eqQuerySelector = Data_Eq.eqString;
  exports["firstElementChild"] = firstElementChild;
  exports["lastElementChild"] = lastElementChild;
  exports["QuerySelector"] = QuerySelector;
  exports["querySelector"] = querySelector;
  exports["eqQuerySelector"] = eqQuerySelector;
  exports["ordQuerySelector"] = ordQuerySelector;
  exports["newtypeQuerySelector"] = newtypeQuerySelector;
  exports["children"] = $foreign.children;
  exports["childElementCount"] = $foreign.childElementCount;
  exports["querySelectorAll"] = $foreign.querySelectorAll;
})(PS);
(function(exports) {
  "use strict";

  exports._mode = function (el) {
    return el.mode;
  };

  exports.host = function (el) {
    return function() {
      return el.host;
    };
  };
})(PS["Web.DOM.ShadowRoot"] = PS["Web.DOM.ShadowRoot"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.ShadowRoot"] = $PS["Web.DOM.ShadowRoot"] || {};
  var exports = $PS["Web.DOM.ShadowRoot"];
  var $foreign = $PS["Web.DOM.ShadowRoot"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Open = (function () {
      function Open() {

      };
      Open.value = new Open();
      return Open;
  })();
  var Closed = (function () {
      function Closed() {

      };
      Closed.value = new Closed();
      return Closed;
  })();
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var showShadowRootMode = new Data_Show.Show(function (v) {
      if (v instanceof Open) {
          return "open";
      };
      if (v instanceof Closed) {
          return "closed";
      };
      throw new Error("Failed pattern match at Web.DOM.ShadowRoot (line 22, column 1 - line 24, column 25): " + [ v.constructor.name ]);
  });
  var mode = (function () {
      var modeFromString = function (v) {
          if (v === "open") {
              return new Data_Maybe.Just(Open.value);
          };
          if (v === "closed") {
              return new Data_Maybe.Just(Closed.value);
          };
          return Data_Maybe.Nothing.value;
      };
      return function ($4) {
          return modeFromString($foreign["_mode"]($4));
      };
  })();
  exports["Open"] = Open;
  exports["Closed"] = Closed;
  exports["toNode"] = toNode;
  exports["mode"] = mode;
  exports["showShadowRootMode"] = showShadowRootMode;
  exports["host"] = $foreign.host;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_DOM_Internal_Types = $PS["Web.DOM.Internal.Types"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_DOM_ShadowRoot = $PS["Web.DOM.ShadowRoot"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var prefix = function ($0) {
      return Data_Nullable.toMaybe($foreign["_prefix"]($0));
  };
  var namespaceURI = function ($1) {
      return Data_Nullable.toMaybe($foreign["_namespaceURI"]($1));
  };
  var initToProps = function (init) {
      return {
          mode: Data_Show.show(Web_DOM_ShadowRoot.showShadowRootMode)(init.mode),
          delegatesFocus: init.delegatesFocus
      };
  };
  var getElementsByTagNameNS = function ($2) {
      return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($2));
  };
  var getAttribute = function (attr) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_getAttribute"](attr);
      return function ($5) {
          return $3($4($5));
      };
  };
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var closest = function (qs) {
      var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $7 = $foreign["_closest"](qs);
      return function ($8) {
          return $6($7($8));
      };
  };
  var attachShadow = function ($9) {
      return $foreign["_attachShadow"](initToProps($9));
  };
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["namespaceURI"] = namespaceURI;
  exports["prefix"] = prefix;
  exports["getElementsByTagNameNS"] = getElementsByTagNameNS;
  exports["getAttribute"] = getAttribute;
  exports["closest"] = closest;
  exports["attachShadow"] = attachShadow;
  exports["localName"] = $foreign.localName;
  exports["tagName"] = $foreign.tagName;
  exports["id"] = $foreign.id;
  exports["setId"] = $foreign.setId;
  exports["className"] = $foreign.className;
  exports["classList"] = $foreign.classList;
  exports["setClassName"] = $foreign.setClassName;
  exports["getElementsByTagName"] = $foreign.getElementsByTagName;
  exports["getElementsByClassName"] = $foreign.getElementsByClassName;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["hasAttribute"] = $foreign.hasAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["matches"] = $foreign.matches;
  exports["scrollTop"] = $foreign.scrollTop;
  exports["setScrollTop"] = $foreign.setScrollTop;
  exports["scrollLeft"] = $foreign.scrollLeft;
  exports["setScrollLeft"] = $foreign.setScrollLeft;
  exports["scrollWidth"] = $foreign.scrollWidth;
  exports["scrollHeight"] = $foreign.scrollHeight;
  exports["clientTop"] = $foreign.clientTop;
  exports["clientLeft"] = $foreign.clientLeft;
  exports["clientWidth"] = $foreign.clientWidth;
  exports["clientHeight"] = $foreign.clientHeight;
})(PS);
(function(exports) {
  "use strict";

  exports.length = function (list) {
    return function () {
      return list.length;
    };
  };

  exports.toArray = function (list) {
    return function () {
      return [].slice.call(list);
    };
  };

  exports._item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };

  exports._namedItem = function (name) {
    return function (list) {
      return function () {
        return list.namedItem(name);
      };
    };
  };
})(PS["Web.DOM.HTMLCollection"] = PS["Web.DOM.HTMLCollection"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.HTMLCollection"] = $PS["Web.DOM.HTMLCollection"] || {};
  var exports = $PS["Web.DOM.HTMLCollection"];
  var $foreign = $PS["Web.DOM.HTMLCollection"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Web_DOM_Internal_Types = $PS["Web.DOM.Internal.Types"];                
  var namedItem = function (id) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_namedItem"](id);
      return function ($2) {
          return $0($1($2));
      };
  };
  var item = function (i) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_item"](i);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["item"] = item;
  exports["namedItem"] = namedItem;
  exports["length"] = $foreign.length;
  exports["toArray"] = $foreign.toArray;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.nodeTypeIndex = function (node) {
    return node.nodeType;
  };

  exports.nodeName = function (node) {
    return node.nodeName;
  };

  exports.baseURI = getEffProp("baseURI");

  exports._ownerDocument = getEffProp("ownerDocument");

  exports._parentNode = getEffProp("parentNode");

  exports._parentElement = getEffProp("parentElement");

  exports.hasChildNodes = function (node) {
    return function () {
      return node.hasChildNodes();
    };
  };

  exports.childNodes = getEffProp("childNodes");

  exports._firstChild = getEffProp("firstChild");

  exports._lastChild = getEffProp("lastChild");

  exports._previousSibling = getEffProp("previousSibling");

  exports._nextSibling = getEffProp("nextSibling");

  exports._nodeValue = getEffProp("nodeValue");

  exports.setNodeValue = function (value) {
    return function (node) {
      return function () {
        node.nodeValue = value;
      };
    };
  };

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
      };
    };
  };

  exports.normalize = function (node) {
    return function () {
      node.normalize();
    };
  };

  exports.clone = function (node) {
    return function () {
      return node.cloneNode(false);
    };
  };

  exports.deepClone = function (node) {
    return function () {
      return node.cloneNode(true);
    };
  };

  exports.isEqualNode = function (node1) {
    return function (node2) {
      return function () {
        return node1.isEqualNode(node2);
      };
    };
  };

  exports.compareDocumentPositionBits = function (node1) {
    return function (node2) {
      return function () {
        return node1.compareDocumentPosition(node2);
      };
    };
  };

  exports.contains = function (node1) {
    return function (node2) {
      return function () {
        return node1.contains(node2);
      };
    };
  };

  exports._lookupPrefix = function (prefix) {
    return function (node) {
      return function () {
        return node.lookupPrefix(prefix);
      };
    };
  };

  exports._lookupNamespaceURI = function (ns) {
    return function (node) {
      return function () {
        return node.lookupNamespaceURI(ns);
      };
    };
  };

  exports.isDefaultNamespace = function (ns) {
    return function (node) {
      return function () {
        return node.isDefaultNamespace(ns);
      };
    };
  };

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        parent.appendChild(node);
      };
    };
  };

  exports.replaceChild = function (newChild) {
    return function (oldChild) {
      return function (parent) {
        return function () {
          parent.replaceChild(newChild, oldChild);
        };
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.NodeType"] = $PS["Web.DOM.NodeType"] || {};
  var exports = $PS["Web.DOM.NodeType"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];                
  var ElementNode = (function () {
      function ElementNode() {

      };
      ElementNode.value = new ElementNode();
      return ElementNode;
  })();
  var AttributeNode = (function () {
      function AttributeNode() {

      };
      AttributeNode.value = new AttributeNode();
      return AttributeNode;
  })();
  var TextNode = (function () {
      function TextNode() {

      };
      TextNode.value = new TextNode();
      return TextNode;
  })();
  var CDATASectionNode = (function () {
      function CDATASectionNode() {

      };
      CDATASectionNode.value = new CDATASectionNode();
      return CDATASectionNode;
  })();
  var EntityReferenceNode = (function () {
      function EntityReferenceNode() {

      };
      EntityReferenceNode.value = new EntityReferenceNode();
      return EntityReferenceNode;
  })();
  var EntityNode = (function () {
      function EntityNode() {

      };
      EntityNode.value = new EntityNode();
      return EntityNode;
  })();
  var ProcessingInstructionNode = (function () {
      function ProcessingInstructionNode() {

      };
      ProcessingInstructionNode.value = new ProcessingInstructionNode();
      return ProcessingInstructionNode;
  })();
  var CommentNode = (function () {
      function CommentNode() {

      };
      CommentNode.value = new CommentNode();
      return CommentNode;
  })();
  var DocumentNode = (function () {
      function DocumentNode() {

      };
      DocumentNode.value = new DocumentNode();
      return DocumentNode;
  })();
  var DocumentTypeNode = (function () {
      function DocumentTypeNode() {

      };
      DocumentTypeNode.value = new DocumentTypeNode();
      return DocumentTypeNode;
  })();
  var DocumentFragmentNode = (function () {
      function DocumentFragmentNode() {

      };
      DocumentFragmentNode.value = new DocumentFragmentNode();
      return DocumentFragmentNode;
  })();
  var NotationNode = (function () {
      function NotationNode() {

      };
      NotationNode.value = new NotationNode();
      return NotationNode;
  })();
  var toEnumNodeType = function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(ElementNode.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AttributeNode.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(TextNode.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(CDATASectionNode.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(EntityReferenceNode.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(EntityNode.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(ProcessingInstructionNode.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(CommentNode.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(DocumentNode.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(DocumentTypeNode.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(DocumentFragmentNode.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(NotationNode.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showNodeType = new Data_Show.Show(function (v) {
      if (v instanceof ElementNode) {
          return "ElementNode";
      };
      if (v instanceof AttributeNode) {
          return "AttributeNode";
      };
      if (v instanceof TextNode) {
          return "TextNode";
      };
      if (v instanceof CDATASectionNode) {
          return "CDATASectionNode";
      };
      if (v instanceof EntityReferenceNode) {
          return "EntityReferenceNode";
      };
      if (v instanceof EntityNode) {
          return "EntityNode";
      };
      if (v instanceof ProcessingInstructionNode) {
          return "ProcessingInstructionNode";
      };
      if (v instanceof CommentNode) {
          return "CommentNode";
      };
      if (v instanceof DocumentNode) {
          return "DocumentNode";
      };
      if (v instanceof DocumentTypeNode) {
          return "DocumentTypeNode";
      };
      if (v instanceof DocumentFragmentNode) {
          return "DocumentFragmentNode";
      };
      if (v instanceof NotationNode) {
          return "NotationNode";
      };
      throw new Error("Failed pattern match at Web.DOM.NodeType (line 39, column 1 - line 51, column 37): " + [ v.constructor.name ]);
  });
  var fromEnumNodeType = function (v) {
      if (v instanceof ElementNode) {
          return 1;
      };
      if (v instanceof AttributeNode) {
          return 2;
      };
      if (v instanceof TextNode) {
          return 3;
      };
      if (v instanceof CDATASectionNode) {
          return 4;
      };
      if (v instanceof EntityReferenceNode) {
          return 5;
      };
      if (v instanceof EntityNode) {
          return 6;
      };
      if (v instanceof ProcessingInstructionNode) {
          return 7;
      };
      if (v instanceof CommentNode) {
          return 8;
      };
      if (v instanceof DocumentNode) {
          return 9;
      };
      if (v instanceof DocumentTypeNode) {
          return 10;
      };
      if (v instanceof DocumentFragmentNode) {
          return 11;
      };
      if (v instanceof NotationNode) {
          return 12;
      };
      throw new Error("Failed pattern match at Web.DOM.NodeType (line 68, column 1 - line 68, column 36): " + [ v.constructor.name ]);
  };
  var eqNodeType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ElementNode && y instanceof ElementNode) {
              return true;
          };
          if (x instanceof AttributeNode && y instanceof AttributeNode) {
              return true;
          };
          if (x instanceof TextNode && y instanceof TextNode) {
              return true;
          };
          if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
              return true;
          };
          if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
              return true;
          };
          if (x instanceof EntityNode && y instanceof EntityNode) {
              return true;
          };
          if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
              return true;
          };
          if (x instanceof CommentNode && y instanceof CommentNode) {
              return true;
          };
          if (x instanceof DocumentNode && y instanceof DocumentNode) {
              return true;
          };
          if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
              return true;
          };
          if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
              return true;
          };
          if (x instanceof NotationNode && y instanceof NotationNode) {
              return true;
          };
          return false;
      };
  });
  var ordNodeType = new Data_Ord.Ord(function () {
      return eqNodeType;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
      };
  });
  var enumNodeType = new Data_Enum.Enum(function () {
      return ordNodeType;
  }, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
  var boundedNodeType = new Data_Bounded.Bounded(function () {
      return ordNodeType;
  }, ElementNode.value, NotationNode.value);
  var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
      return boundedNodeType;
  }, function () {
      return enumNodeType;
  }, 12, fromEnumNodeType, toEnumNodeType);
  exports["ElementNode"] = ElementNode;
  exports["AttributeNode"] = AttributeNode;
  exports["TextNode"] = TextNode;
  exports["CDATASectionNode"] = CDATASectionNode;
  exports["EntityReferenceNode"] = EntityReferenceNode;
  exports["EntityNode"] = EntityNode;
  exports["ProcessingInstructionNode"] = ProcessingInstructionNode;
  exports["CommentNode"] = CommentNode;
  exports["DocumentNode"] = DocumentNode;
  exports["DocumentTypeNode"] = DocumentTypeNode;
  exports["DocumentFragmentNode"] = DocumentFragmentNode;
  exports["NotationNode"] = NotationNode;
  exports["eqNodeType"] = eqNodeType;
  exports["ordNodeType"] = ordNodeType;
  exports["boundedNodeType"] = boundedNodeType;
  exports["enumNodeType"] = enumNodeType;
  exports["boundedEnumNodeType"] = boundedEnumNodeType;
  exports["showNodeType"] = showNodeType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_DOM_Internal_Types = $PS["Web.DOM.Internal.Types"];
  var Web_DOM_NodeType = $PS["Web.DOM.NodeType"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var previousSibling = (function () {
      var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($2) {
          return $1($foreign["_previousSibling"]($2));
      };
  })();
  var parentNode = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_parentNode"]($4));
      };
  })();
  var parentElement = (function () {
      var $5 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($6) {
          return $5($foreign["_parentElement"]($6));
      };
  })();
  var ownerDocument = (function () {
      var $7 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($8) {
          return $7($foreign["_ownerDocument"]($8));
      };
  })();
  var nodeValue = (function () {
      var $9 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($10) {
          return $9($foreign["_nodeValue"]($10));
      };
  })();
  var nodeType = function (dictPartial) {
      var $11 = Data_Maybe.fromJust();
      var $12 = Data_Enum.toEnum(Web_DOM_NodeType.boundedEnumNodeType);
      return function ($13) {
          return $11($12($foreign.nodeTypeIndex($13)));
      };
  };
  var nextSibling = (function () {
      var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($15) {
          return $14($foreign["_nextSibling"]($15));
      };
  })();
  var lookupPrefix = function (p) {
      var $16 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $17 = $foreign["_lookupPrefix"](p);
      return function ($18) {
          return $16($17($18));
      };
  };
  var lookupNamespaceURI = function (ns) {
      var $19 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $20 = $foreign["_lookupNamespaceURI"](ns);
      return function ($21) {
          return $19($20($21));
      };
  };
  var lastChild = (function () {
      var $22 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($23) {
          return $22($foreign["_lastChild"]($23));
      };
  })();
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Node");
  var firstChild = (function () {
      var $24 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($25) {
          return $24($foreign["_firstChild"]($25));
      };
  })();
  exports["fromEventTarget"] = fromEventTarget;
  exports["toEventTarget"] = toEventTarget;
  exports["nodeType"] = nodeType;
  exports["ownerDocument"] = ownerDocument;
  exports["parentNode"] = parentNode;
  exports["parentElement"] = parentElement;
  exports["firstChild"] = firstChild;
  exports["lastChild"] = lastChild;
  exports["previousSibling"] = previousSibling;
  exports["nextSibling"] = nextSibling;
  exports["nodeValue"] = nodeValue;
  exports["lookupPrefix"] = lookupPrefix;
  exports["lookupNamespaceURI"] = lookupNamespaceURI;
  exports["nodeTypeIndex"] = $foreign.nodeTypeIndex;
  exports["nodeName"] = $foreign.nodeName;
  exports["baseURI"] = $foreign.baseURI;
  exports["hasChildNodes"] = $foreign.hasChildNodes;
  exports["childNodes"] = $foreign.childNodes;
  exports["setNodeValue"] = $foreign.setNodeValue;
  exports["textContent"] = $foreign.textContent;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["normalize"] = $foreign.normalize;
  exports["clone"] = $foreign.clone;
  exports["deepClone"] = $foreign.deepClone;
  exports["isEqualNode"] = $foreign.isEqualNode;
  exports["compareDocumentPositionBits"] = $foreign.compareDocumentPositionBits;
  exports["contains"] = $foreign.contains;
  exports["isDefaultNamespace"] = $foreign.isDefaultNamespace;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["replaceChild"] = $foreign.replaceChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.DOMParser"] = $PS["Web.DOM.DOMParser"] || {};
  var exports = $PS["Web.DOM.DOMParser"];
  var $foreign = $PS["Web.DOM.DOMParser"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_HTMLCollection = $PS["Web.DOM.HTMLCollection"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];                
  var returnIfNothing = function (errMay) {
      return function (val) {
          if (errMay instanceof Data_Maybe.Nothing) {
              return new Data_Either.Right(val);
          };
          if (errMay instanceof Data_Maybe.Just) {
              return new Data_Either.Left(errMay.value0);
          };
          throw new Error("Failed pattern match at Web.DOM.DOMParser (line 73, column 30 - line 75, column 21): " + [ errMay.constructor.name ]);
      };
  };
  var _getParserError = function (doc) {
      var getText = function (elMay) {
          var v = Data_Functor.map(Data_Maybe.functorMaybe)(Web_DOM_Element.toNode)(elMay);
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Web_DOM_Node.textContent(v.value0));
          };
          throw new Error("Failed pattern match at Web.DOM.DOMParser (line 65, column 23 - line 67, column 45): " + [ v.constructor.name ]);
      };
      return function __do() {
          var v = Control_Bind.join(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Web_DOM_HTMLCollection.toArray)(Web_DOM_Document.getElementsByTagName("parsererror")(doc)))();
          var v1 = Data_Array.head(v);
          return getText(v1)();
      };
  };
  var parseHTMLFromString = function (s) {
      return function (d) {
          return function __do() {
              var doc = $foreign.parseFromString("text/html")(s)(d)();
              var errMay = _getParserError(doc)();
              return returnIfNothing(errMay)(doc);
          };
      };
  };
  var parseSVGFromString = function (s) {
      return function (d) {
          return function __do() {
              var doc = $foreign.parseFromString("image/svg+xml")(s)(d)();
              var errMay = _getParserError(doc)();
              return returnIfNothing(errMay)(doc);
          };
      };
  };
  var parseXMLFromString = function (s) {
      return function (d) {
          return function __do() {
              var doc = $foreign.parseFromString("application/xml")(s)(d)();
              var errMay = _getParserError(doc)();
              return returnIfNothing(errMay)(doc);
          };
      };
  };
  exports["parseHTMLFromString"] = parseHTMLFromString;
  exports["parseSVGFromString"] = parseSVGFromString;
  exports["parseXMLFromString"] = parseXMLFromString;
  exports["_getParserError"] = _getParserError;
  exports["makeDOMParser"] = $foreign.makeDOMParser;
  exports["parseFromString"] = $foreign.parseFromString;
})(PS);
(function(exports) {
  "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
  var exports = $PS["Web.DOM.NonElementParentNode"];
  var $foreign = $PS["Web.DOM.NonElementParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var getElementById = function (eid) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_getElementById"](eid);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
  "use strict";

  exports.splitText = function (offset) {
    return function (t) {
      return function () {
        return t.splitText(offset);
      };
    };
  };

  exports.wholeText = function (t) {
    return function () {
      return t.wholeText;
    };
  };
})(PS["Web.DOM.Text"] = PS["Web.DOM.Text"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Text"] = $PS["Web.DOM.Text"] || {};
  var exports = $PS["Web.DOM.Text"];
  var $foreign = $PS["Web.DOM.Text"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var toCharacterData = Unsafe_Coerce.unsafeCoerce;
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Text");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Text");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Text");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Text");
  var fromCharacterData = Web_Internal_FFI.unsafeReadProtoTagged("Text");
  exports["fromCharacterData"] = fromCharacterData;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toCharacterData"] = toCharacterData;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toEventTarget"] = toEventTarget;
  exports["splitText"] = $foreign.splitText;
  exports["wholeText"] = $foreign.wholeText;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.dispatchEvent = function (event) {
    return function (target) {
      return function () {
        return target.dispatchEvent(event);
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  var Web_Event_Internal_Types = $PS["Web.Event.Internal.Types"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["dispatchEvent"] = $foreign.dispatchEvent;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Common"] = $PS["Web.HTML.Common"] || {};
  var exports = $PS["Web.HTML.Common"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];                
  var PropName = function (x) {
      return x;
  };
  var ClassName = function (x) {
      return x;
  };
  var AttrName = function (x) {
      return x;
  };
  var ordPropName = Data_Ord.ordString;
  var ordClassName = Data_Ord.ordString;
  var ordAttrName = Data_Ord.ordString;
  var newtypePropName = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeClassName = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeAttrName = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqPropName = Data_Eq.eqString;
  var eqClassName = Data_Eq.eqString;
  var eqAttrName = Data_Eq.eqString;
  exports["PropName"] = PropName;
  exports["AttrName"] = AttrName;
  exports["ClassName"] = ClassName;
  exports["newtypePropName"] = newtypePropName;
  exports["eqPropName"] = eqPropName;
  exports["ordPropName"] = ordPropName;
  exports["newtypeAttrName"] = newtypeAttrName;
  exports["eqAttrName"] = eqAttrName;
  exports["ordAttrName"] = ordAttrName;
  exports["newtypeClassName"] = newtypeClassName;
  exports["eqClassName"] = eqClassName;
  exports["ordClassName"] = ordClassName;
})(PS);
(function(exports) {
  "use strict";

  exports.target = function (a) {
    return function () {
      return a.target;
    };
  };

  exports.setTarget = function (target) {
    return function (a) {
      return function () {
        a.target = target;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.download = function (a) {
    return function () {
      return a.download;
    };
  };

  exports.setDownload = function (download) {
    return function (a) {
      return function () {
        a.download = download;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rel = function (a) {
    return function () {
      return a.rel;
    };
  };

  exports.setRel = function (rel) {
    return function (a) {
      return function () {
        a.rel = rel;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rev = function (a) {
    return function () {
      return a.rev;
    };
  };

  exports.setRev = function (rev) {
    return function (a) {
      return function () {
        a.rev = rev;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.relList = function (a) {
    return function () {
      return a.relList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.hreflang = function (a) {
    return function () {
      return a.hreflang;
    };
  };

  exports.setHreflang = function (hreflang) {
    return function (a) {
      return function () {
        a.hreflang = hreflang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (a) {
    return function () {
      return a.type;
    };
  };

  exports.setType = function (type) {
    return function (a) {
      return function () {
        a.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.text = function (a) {
    return function () {
      return a.text;
    };
  };

  exports.setText = function (text) {
    return function (a) {
      return function () {
        a.text = text;
      };
    };
  };
})(PS["Web.HTML.HTMLAnchorElement"] = PS["Web.HTML.HTMLAnchorElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLAnchorElement"] = $PS["Web.HTML.HTMLAnchorElement"] || {};
  var exports = $PS["Web.HTML.HTMLAnchorElement"];
  var $foreign = $PS["Web.HTML.HTMLAnchorElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLHyperlinkElementUtils = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["toHTMLHyperlinkElementUtils"] = toHTMLHyperlinkElementUtils;
  exports["target"] = $foreign.target;
  exports["setTarget"] = $foreign.setTarget;
  exports["download"] = $foreign.download;
  exports["setDownload"] = $foreign.setDownload;
  exports["rel"] = $foreign.rel;
  exports["setRel"] = $foreign.setRel;
  exports["rev"] = $foreign.rev;
  exports["setRev"] = $foreign.setRev;
  exports["relList"] = $foreign.relList;
  exports["hreflang"] = $foreign.hreflang;
  exports["setHreflang"] = $foreign.setHreflang;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["text"] = $foreign.text;
  exports["setText"] = $foreign.setText;
})(PS);
(function(exports) {
  "use strict";

  exports.alt = function (area) {
    return function () {
      return area.alt;
    };
  };

  exports.setAlt = function (alt) {
    return function (area) {
      return function () {
        area.alt = alt;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.coords = function (area) {
    return function () {
      return area.coords;
    };
  };

  exports.setCoords = function (coords) {
    return function (area) {
      return function () {
        area.coords = coords;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.shape = function (area) {
    return function () {
      return area.shape;
    };
  };

  exports.setShape = function (shape) {
    return function (area) {
      return function () {
        area.shape = shape;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.target = function (area) {
    return function () {
      return area.target;
    };
  };

  exports.setTarget = function (target) {
    return function (area) {
      return function () {
        area.target = target;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.download = function (area) {
    return function () {
      return area.download;
    };
  };

  exports.setDownload = function (download) {
    return function (area) {
      return function () {
        area.download = download;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rel = function (area) {
    return function () {
      return area.rel;
    };
  };

  exports.setRel = function (rel) {
    return function (area) {
      return function () {
        area.rel = rel;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.relList = function (area) {
    return function () {
      return area.relList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.hreflang = function (area) {
    return function () {
      return area.hreflang;
    };
  };

  exports.setHreflang = function (hreflang) {
    return function (area) {
      return function () {
        area.hreflang = hreflang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (area) {
    return function () {
      return area.type;
    };
  };

  exports.setType = function (type) {
    return function (area) {
      return function () {
        area.type = type;
      };
    };
  };
})(PS["Web.HTML.HTMLAreaElement"] = PS["Web.HTML.HTMLAreaElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLAreaElement"] = $PS["Web.HTML.HTMLAreaElement"] || {};
  var exports = $PS["Web.HTML.HTMLAreaElement"];
  var $foreign = $PS["Web.HTML.HTMLAreaElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["alt"] = $foreign.alt;
  exports["setAlt"] = $foreign.setAlt;
  exports["coords"] = $foreign.coords;
  exports["setCoords"] = $foreign.setCoords;
  exports["shape"] = $foreign.shape;
  exports["setShape"] = $foreign.setShape;
  exports["target"] = $foreign.target;
  exports["setTarget"] = $foreign.setTarget;
  exports["download"] = $foreign.download;
  exports["setDownload"] = $foreign.setDownload;
  exports["rel"] = $foreign.rel;
  exports["setRel"] = $foreign.setRel;
  exports["relList"] = $foreign.relList;
  exports["hreflang"] = $foreign.hreflang;
  exports["setHreflang"] = $foreign.setHreflang;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
})(PS);
(function(exports) {
  "use strict";

  exports.create = function () {
    return new Audio();
  };

  exports.createWithURL = function (url) {
    return function () {
      return new Audio(url);
    };
  };
})(PS["Web.HTML.HTMLAudioElement"] = PS["Web.HTML.HTMLAudioElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLAudioElement"] = $PS["Web.HTML.HTMLAudioElement"] || {};
  var exports = $PS["Web.HTML.HTMLAudioElement"];
  var $foreign = $PS["Web.HTML.HTMLAudioElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLMediaElement = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromHTMLMediaElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
  var create$prime = $foreign.createWithURL;
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLMediaElement"] = toHTMLMediaElement;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["create'"] = create$prime;
  exports["create"] = $foreign.create;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLBRElement"] = $PS["Web.HTML.HTMLBRElement"] || {};
  var exports = $PS["Web.HTML.HTMLBRElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.href = function (base) {
    return function () {
      return base.href;
    };
  };

  exports.setHref = function (href) {
    return function (base) {
      return function () {
        base.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.target = function (base) {
    return function () {
      return base.target;
    };
  };

  exports.setTarget = function (target) {
    return function (base) {
      return function () {
        base.target = target;
      };
    };
  };
})(PS["Web.HTML.HTMLBaseElement"] = PS["Web.HTML.HTMLBaseElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLBaseElement"] = $PS["Web.HTML.HTMLBaseElement"] || {};
  var exports = $PS["Web.HTML.HTMLBaseElement"];
  var $foreign = $PS["Web.HTML.HTMLBaseElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["href"] = $foreign.href;
  exports["setHref"] = $foreign.setHref;
  exports["target"] = $foreign.target;
  exports["setTarget"] = $foreign.setTarget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLBodyElement"] = $PS["Web.HTML.HTMLBodyElement"] || {};
  var exports = $PS["Web.HTML.HTMLBodyElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.autofocus = function (button) {
    return function () {
      return button.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (button) {
      return function () {
        button.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (button) {
    return function () {
      return button.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (button) {
      return function () {
        button.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (button) {
    return function () {
      return button.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.formAction = function (button) {
    return function () {
      return button.formAction;
    };
  };

  exports.setFormAction = function (formAction) {
    return function (button) {
      return function () {
        button.formAction = formAction;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formEnctype = function (button) {
    return function () {
      return button.formEnctype;
    };
  };

  exports.setFormEnctype = function (formEnctype) {
    return function (button) {
      return function () {
        button.formEnctype = formEnctype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formMethod = function (button) {
    return function () {
      return button.formMethod;
    };
  };

  exports.setFormMethod = function (formMethod) {
    return function (button) {
      return function () {
        button.formMethod = formMethod;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formNoValidate = function (button) {
    return function () {
      return button.formNoValidate;
    };
  };

  exports.setFormNoValidate = function (formNoValidate) {
    return function (button) {
      return function () {
        button.formNoValidate = formNoValidate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formTarget = function (button) {
    return function () {
      return button.formTarget;
    };
  };

  exports.setFormTarget = function (formTarget) {
    return function (button) {
      return function () {
        button.formTarget = formTarget;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (button) {
    return function () {
      return button.name;
    };
  };

  exports.setName = function (name) {
    return function (button) {
      return function () {
        button.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (button) {
    return function () {
      return button.type;
    };
  };

  exports.setType = function (type) {
    return function (button) {
      return function () {
        button.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (button) {
    return function () {
      return button.value;
    };
  };

  exports.setValue = function (value) {
    return function (button) {
      return function () {
        button.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (button) {
    return function () {
      return button.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (button) {
    return function () {
      return button.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (button) {
    return function () {
      return button.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (button) {
    return function () {
      return button.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (button) {
    return function () {
      return button.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (button) {
      return function () {
        button.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (button) {
    return function () {
      return button.labels;
    };
  };
})(PS["Web.HTML.HTMLButtonElement"] = PS["Web.HTML.HTMLButtonElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLButtonElement"] = $PS["Web.HTML.HTMLButtonElement"] || {};
  var exports = $PS["Web.HTML.HTMLButtonElement"];
  var $foreign = $PS["Web.HTML.HTMLButtonElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["autofocus"] = $foreign.autofocus;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["formAction"] = $foreign.formAction;
  exports["setFormAction"] = $foreign.setFormAction;
  exports["formEnctype"] = $foreign.formEnctype;
  exports["setFormEnctype"] = $foreign.setFormEnctype;
  exports["formMethod"] = $foreign.formMethod;
  exports["setFormMethod"] = $foreign.setFormMethod;
  exports["formNoValidate"] = $foreign.formNoValidate;
  exports["setFormNoValidate"] = $foreign.setFormNoValidate;
  exports["formTarget"] = $foreign.formTarget;
  exports["setFormTarget"] = $foreign.setFormTarget;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["labels"] = $foreign.labels;
})(PS);
(function(exports) {
  "use strict";

  exports.width = function (canvas) {
    return function () {
      return canvas.width;
    };
  };

  exports.setWidth = function (width) {
    return function (canvas) {
      return function () {
        canvas.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (canvas) {
    return function () {
      return canvas.height;
    };
  };

  exports.setHeight = function (height) {
    return function (canvas) {
      return function () {
        canvas.height = height;
      };
    };
  };
})(PS["Web.HTML.HTMLCanvasElement"] = PS["Web.HTML.HTMLCanvasElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLCanvasElement"] = $PS["Web.HTML.HTMLCanvasElement"] || {};
  var exports = $PS["Web.HTML.HTMLCanvasElement"];
  var $foreign = $PS["Web.HTML.HTMLCanvasElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDListElement"] = $PS["Web.HTML.HTMLDListElement"] || {};
  var exports = $PS["Web.HTML.HTMLDListElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.value = function (data) {
    return function () {
      return data.value;
    };
  };

  exports.setValue = function (value) {
    return function (data) {
      return function () {
        data.value = value;
      };
    };
  };
})(PS["Web.HTML.HTMLDataElement"] = PS["Web.HTML.HTMLDataElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDataElement"] = $PS["Web.HTML.HTMLDataElement"] || {};
  var exports = $PS["Web.HTML.HTMLDataElement"];
  var $foreign = $PS["Web.HTML.HTMLDataElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
})(PS);
(function(exports) {
  "use strict";

  exports.options = function (dle) {
    return function () {
      return dle.options;
    };
  };
})(PS["Web.HTML.HTMLDataListElement"] = PS["Web.HTML.HTMLDataListElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDataListElement"] = $PS["Web.HTML.HTMLDataListElement"] || {};
  var exports = $PS["Web.HTML.HTMLDataListElement"];
  var $foreign = $PS["Web.HTML.HTMLDataListElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["options"] = $foreign.options;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDivElement"] = $PS["Web.HTML.HTMLDivElement"] || {};
  var exports = $PS["Web.HTML.HTMLDivElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports._head = function (doc) {
    return function () {
      return doc.head;
    };
  };

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };

  exports._readyState = function (doc) {
    return function () {
      return doc.readyState;
    };
  };

  exports._activeElement = function (doc) {
    return function () {
      return doc.activeElement;
    };
  };

  exports._currentScript = function (doc) {
    return function () {
      return doc.currentScript;
    };
  };

  exports.referrer = function (doc) {
    return function () {
      return doc.referrer;
    };
  };

  exports.title = function (doc) {
    return function () {
      return doc.title;
    };
  };

  exports.setTitle = function (title) {
    return function (doc) {
      return function () {
        doc.title = title;
      };
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDocument.ReadyState"] = $PS["Web.HTML.HTMLDocument.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Interactive = (function () {
      function Interactive() {

      };
      Interactive.value = new Interactive();
      return Interactive;
  })();
  var Complete = (function () {
      function Complete() {

      };
      Complete.value = new Complete();
      return Complete;
  })();
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof Loading) {
          return "Loading";
      };
      if (v instanceof Interactive) {
          return "Interactive";
      };
      if (v instanceof Complete) {
          return "Complete";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 18, column 27): " + [ v.constructor.name ]);
  });
  var print = function (v) {
      if (v instanceof Loading) {
          return "loading";
      };
      if (v instanceof Interactive) {
          return "interactive";
      };
      if (v instanceof Complete) {
          return "complete";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 24, column 25): " + [ v.constructor.name ]);
  };
  var parse = function (v) {
      if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
      };
      if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Loading && y instanceof Loading) {
              return true;
          };
          if (x instanceof Interactive && y instanceof Interactive) {
              return true;
          };
          if (x instanceof Complete && y instanceof Complete) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Loading) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Loading) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Interactive && y instanceof Interactive) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Interactive) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Interactive) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Complete && y instanceof Complete) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 1 - line 12, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Loading"] = Loading;
  exports["Interactive"] = Interactive;
  exports["Complete"] = Complete;
  exports["print"] = print;
  exports["parse"] = parse;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["showReadyState"] = showReadyState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var readyState = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)((function () {
          var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
          };
      })());
      return function ($1) {
          return $0($foreign["_readyState"]($1));
      };
  })();
  var head = (function () {
      var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($5) {
          return $4($foreign["_head"]($5));
      };
  })();
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
  var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
  var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
  var currentScript = (function () {
      var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($7) {
          return $6($foreign["_currentScript"]($7));
      };
  })();
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  var activeElement = (function () {
      var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($11) {
          return $10($foreign["_activeElement"]($11));
      };
  })();
  exports["fromDocument"] = fromDocument;
  exports["fromNode"] = fromNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromNonElementParentNode"] = fromNonElementParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toDocument"] = toDocument;
  exports["toNode"] = toNode;
  exports["toParentNode"] = toParentNode;
  exports["toNonElementParentNode"] = toNonElementParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["head"] = head;
  exports["body"] = body;
  exports["readyState"] = readyState;
  exports["activeElement"] = activeElement;
  exports["currentScript"] = currentScript;
  exports["referrer"] = $foreign.referrer;
  exports["title"] = $foreign.title;
  exports["setTitle"] = $foreign.setTitle;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };

  // ----------------------------------------------------------------------------

  exports.title = function (elt) {
    return function () {
      return elt.title;
    };
  };

  exports.setTitle = function (title) {
    return function (elt) {
      return function () {
        elt.title = title;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.lang = function (elt) {
    return function () {
      return elt.lang;
    };
  };

  exports.setLang = function (lang) {
    return function (elt) {
      return function () {
        elt.lang = lang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dir = function (elt) {
    return function () {
      return elt.dir;
    };
  };

  exports.setDir = function (dir) {
    return function (elt) {
      return function () {
        elt.dir = dir;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.className = function (elt) {
    return function () {
      return elt.className;
    };
  };

  exports.setClassName = function (className) {
    return function (elt) {
      return function () {
        elt.className = className;
      };
    };
  };

  exports.classList = function (element) {
    return function () {
      return element.classList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.hidden = function (elt) {
    return function () {
      return elt.hidden;
    };
  };

  exports.setHidden = function (hidden) {
    return function (elt) {
      return function () {
        elt.hidden = hidden;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.tabIndex = function (elt) {
    return function () {
      return elt.tabIndex;
    };
  };

  exports.setTabIndex = function (tabIndex) {
    return function (elt) {
      return function () {
        elt.tabIndex = tabIndex;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.draggable = function (elt) {
    return function () {
      return elt.draggable;
    };
  };

  exports.setDraggable = function (draggable) {
    return function (elt) {
      return function () {
        elt.draggable = draggable;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.contentEditable = function (elt) {
    return function () {
      return elt.contentEditable;
    };
  };

  exports.setContentEditable = function (contentEditable) {
    return function (elt) {
      return function () {
        elt.contentEditable = contentEditable;
      };
    };
  };

  exports.isContentEditable = function (elt) {
    return function () {
      return elt.isContentEditable;
    };
  };

  // ----------------------------------------------------------------------------

  exports.spellcheck = function (elt) {
    return function () {
      return elt.spellcheck;
    };
  };

  exports.setSpellcheck = function (spellcheck) {
    return function (elt) {
      return function () {
        elt.spellcheck = spellcheck;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.click = function (elt) {
    return function () {
      return elt.click();
    };
  };

  exports.focus = function (elt) {
    return function () {
      return elt.focus();
    };
  };

  exports.blur = function (elt) {
    return function () {
      return elt.blur();
    };
  };

  // - CSSOM ---------------------------------------------------------------------

  exports.getBoundingClientRect = function (el) {
    return function () {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height
      };
    };
  };

  exports._offsetParent = function (el) {
    return function () {
      return el.offsetParent;
    };
  };

  exports.offsetTop = function (el) {
    return function () {
      return el.offsetTop;
    };
  };

  exports.offsetLeft = function (el) {
    return function () {
      return el.offsetLeft;
    };
  };

  exports.offsetWidth = function (el) {
    return function () {
      return el.offsetWidth;
    };
  };

  exports.offsetHeight = function (el) {
    return function () {
      return el.offsetHeight;
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var offsetParent = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_offsetParent"]($1));
      };
  })();
  var fromParentNode = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  var fromNonDocumentTypeChildNode = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  var fromNode = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  var fromEventTarget = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  var fromChildNode = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["offsetParent"] = offsetParent;
  exports["title"] = $foreign.title;
  exports["setTitle"] = $foreign.setTitle;
  exports["lang"] = $foreign.lang;
  exports["setLang"] = $foreign.setLang;
  exports["dir"] = $foreign.dir;
  exports["setDir"] = $foreign.setDir;
  exports["className"] = $foreign.className;
  exports["setClassName"] = $foreign.setClassName;
  exports["classList"] = $foreign.classList;
  exports["hidden"] = $foreign.hidden;
  exports["setHidden"] = $foreign.setHidden;
  exports["tabIndex"] = $foreign.tabIndex;
  exports["setTabIndex"] = $foreign.setTabIndex;
  exports["draggable"] = $foreign.draggable;
  exports["setDraggable"] = $foreign.setDraggable;
  exports["contentEditable"] = $foreign.contentEditable;
  exports["setContentEditable"] = $foreign.setContentEditable;
  exports["isContentEditable"] = $foreign.isContentEditable;
  exports["spellcheck"] = $foreign.spellcheck;
  exports["setSpellcheck"] = $foreign.setSpellcheck;
  exports["click"] = $foreign.click;
  exports["focus"] = $foreign.focus;
  exports["blur"] = $foreign.blur;
  exports["getBoundingClientRect"] = $foreign.getBoundingClientRect;
  exports["offsetTop"] = $foreign.offsetTop;
  exports["offsetLeft"] = $foreign.offsetLeft;
  exports["offsetWidth"] = $foreign.offsetWidth;
  exports["offsetHeight"] = $foreign.offsetHeight;
})(PS);
(function(exports) {
  "use strict";

  exports.src = function (embed) {
    return function () {
      return embed.src;
    };
  };

  exports.setSrc = function (src) {
    return function (embed) {
      return function () {
        embed.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (embed) {
    return function () {
      return embed.type;
    };
  };

  exports.setType = function (type) {
    return function (embed) {
      return function () {
        embed.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (embed) {
    return function () {
      return embed.width;
    };
  };

  exports.setWidth = function (width) {
    return function (embed) {
      return function () {
        embed.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (embed) {
    return function () {
      return embed.height;
    };
  };

  exports.setHeight = function (height) {
    return function (embed) {
      return function () {
        embed.height = height;
      };
    };
  };
})(PS["Web.HTML.HTMLEmbedElement"] = PS["Web.HTML.HTMLEmbedElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLEmbedElement"] = $PS["Web.HTML.HTMLEmbedElement"] || {};
  var exports = $PS["Web.HTML.HTMLEmbedElement"];
  var $foreign = $PS["Web.HTML.HTMLEmbedElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
})(PS);
(function(exports) {
  "use strict";

  exports.disabled = function (fieldset) {
    return function () {
      return fieldset.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (fieldset) {
      return function () {
        fieldset.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (fieldset) {
    return function () {
      return fieldset.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (fieldset) {
    return function () {
      return fieldset.name;
    };
  };

  exports.setName = function (name) {
    return function (fieldset) {
      return function () {
        fieldset.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (fieldset) {
    return function () {
      return fieldset.type;
    };
  };

  exports.setType = function (type) {
    return function (fieldset) {
      return function () {
        fieldset.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (fieldset) {
    return function () {
      return fieldset.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (fieldset) {
    return function () {
      return fieldset.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (fieldset) {
    return function () {
      return fieldset.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (fieldset) {
    return function () {
      return fieldset.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (fieldset) {
    return function () {
      return fieldset.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (fieldset) {
      return function () {
        fieldset.setCustomValidity(value);
      };
    };
  };
})(PS["Web.HTML.HTMLFieldSetElement"] = PS["Web.HTML.HTMLFieldSetElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLFieldSetElement"] = $PS["Web.HTML.HTMLFieldSetElement"] || {};
  var exports = $PS["Web.HTML.HTMLFieldSetElement"];
  var $foreign = $PS["Web.HTML.HTMLFieldSetElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
})(PS);
(function(exports) {
  "use strict";

  exports.acceptCharset = function (form) {
    return function () {
      return form.acceptCharset;
    };
  };

  exports.setAcceptCharset = function (acceptCharset) {
    return function (form) {
      return function () {
        form.acceptCharset = acceptCharset;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.action = function (form) {
    return function () {
      return form.action;
    };
  };

  exports.setAction = function (action) {
    return function (form) {
      return function () {
        form.action = action;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autocomplete = function (form) {
    return function () {
      return form.autocomplete;
    };
  };

  exports.setAutocomplete = function (autocomplete) {
    return function (form) {
      return function () {
        form.autocomplete = autocomplete;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.enctype = function (form) {
    return function () {
      return form.enctype;
    };
  };

  exports.setEnctype = function (enctype) {
    return function (form) {
      return function () {
        form.enctype = enctype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.encoding = function (form) {
    return function () {
      return form.encoding;
    };
  };

  exports.setEncoding = function (encoding) {
    return function (form) {
      return function () {
        form.encoding = encoding;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.method = function (form) {
    return function () {
      return form.method;
    };
  };

  exports.setMethod = function (method) {
    return function (form) {
      return function () {
        form.method = method;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (form) {
    return function () {
      return form.name;
    };
  };

  exports.setName = function (name) {
    return function (form) {
      return function () {
        form.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.noValidate = function (form) {
    return function () {
      return form.noValidate;
    };
  };

  exports.setNoValidate = function (noValidate) {
    return function (form) {
      return function () {
        form.noValidate = noValidate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.target = function (form) {
    return function () {
      return form.target;
    };
  };

  exports.setTarget = function (target) {
    return function (form) {
      return function () {
        form.target = target;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.length = function (form) {
    return function () {
      return form.length;
    };
  };

  // ----------------------------------------------------------------------------

  exports.submit = function (form) {
    return function () {
      form.submit();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reset = function (form) {
    return function () {
      form.reset();
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (form) {
    return function () {
      return form.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (form) {
    return function () {
      return form.reportValidity();
    };
  };
})(PS["Web.HTML.HTMLFormElement"] = PS["Web.HTML.HTMLFormElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLFormElement"] = $PS["Web.HTML.HTMLFormElement"] || {};
  var exports = $PS["Web.HTML.HTMLFormElement"];
  var $foreign = $PS["Web.HTML.HTMLFormElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["acceptCharset"] = $foreign.acceptCharset;
  exports["setAcceptCharset"] = $foreign.setAcceptCharset;
  exports["action"] = $foreign.action;
  exports["setAction"] = $foreign.setAction;
  exports["autocomplete"] = $foreign.autocomplete;
  exports["setAutocomplete"] = $foreign.setAutocomplete;
  exports["enctype"] = $foreign.enctype;
  exports["setEnctype"] = $foreign.setEnctype;
  exports["encoding"] = $foreign.encoding;
  exports["setEncoding"] = $foreign.setEncoding;
  exports["method"] = $foreign.method;
  exports["setMethod"] = $foreign.setMethod;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["noValidate"] = $foreign.noValidate;
  exports["setNoValidate"] = $foreign.setNoValidate;
  exports["target"] = $foreign.target;
  exports["setTarget"] = $foreign.setTarget;
  exports["length"] = $foreign.length;
  exports["submit"] = $foreign.submit;
  exports["reset"] = $foreign.reset;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLHRElement"] = $PS["Web.HTML.HTMLHRElement"] || {};
  var exports = $PS["Web.HTML.HTMLHRElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLHeadElement"] = $PS["Web.HTML.HTMLHeadElement"] || {};
  var exports = $PS["Web.HTML.HTMLHeadElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLHeadingElement"] = $PS["Web.HTML.HTMLHeadingElement"] || {};
  var exports = $PS["Web.HTML.HTMLHeadingElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.src = function (iframe) {
    return function () {
      return iframe.src;
    };
  };

  exports.setSrc = function (src) {
    return function (iframe) {
      return function () {
        iframe.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.srcdoc = function (iframe) {
    return function () {
      return iframe.srcdoc;
    };
  };

  exports.setSrcdoc = function (srcdoc) {
    return function (iframe) {
      return function () {
        iframe.srcdoc = srcdoc;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (iframe) {
    return function () {
      return iframe.name;
    };
  };

  exports.setName = function (name) {
    return function (iframe) {
      return function () {
        iframe.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (iframe) {
    return function () {
      return iframe.width;
    };
  };

  exports.setWidth = function (width) {
    return function (iframe) {
      return function () {
        iframe.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (iframe) {
    return function () {
      return iframe.height;
    };
  };

  exports.setHeight = function (height) {
    return function (iframe) {
      return function () {
        iframe.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._contentDocument = function (iframe) {
    return function () {
      return iframe.contentDocument;
    };
  };

  exports._contentWindow = function (iframe) {
    return function () {
      return iframe.contentWindow;
    };
  };
})(PS["Web.HTML.HTMLIFrameElement"] = PS["Web.HTML.HTMLIFrameElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLIFrameElement"] = $PS["Web.HTML.HTMLIFrameElement"] || {};
  var exports = $PS["Web.HTML.HTMLIFrameElement"];
  var $foreign = $PS["Web.HTML.HTMLIFrameElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
  var contentWindow = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_contentWindow"]($1));
      };
  })();
  var contentDocument = (function () {
      var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($3) {
          return $2($foreign["_contentDocument"]($3));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["contentDocument"] = contentDocument;
  exports["contentWindow"] = contentWindow;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["srcdoc"] = $foreign.srcdoc;
  exports["setSrcdoc"] = $foreign.setSrcdoc;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
})(PS);
(function(exports) {
  "use strict";

  exports.create = function () {
    return new Image();
  };

  exports.createWithDimensions = function (width) {
    return function (height) {
      return function () {
        return new Image(width, height);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.alt = function (image) {
    return function () {
      return image.alt;
    };
  };

  exports.setAlt = function (alt) {
    return function (image) {
      return function () {
        image.alt = alt;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.src = function (image) {
    return function () {
      return image.src;
    };
  };

  exports.setSrc = function (src) {
    return function (image) {
      return function () {
        image.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.srcset = function (image) {
    return function () {
      return image.srcset;
    };
  };

  exports.setSrcset = function (srcset) {
    return function (image) {
      return function () {
        image.srcset = srcset;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.sizes = function (image) {
    return function () {
      return image.sizes;
    };
  };

  exports.setSizes = function (sizes) {
    return function (image) {
      return function () {
        image.sizes = sizes;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.currentSrc = function (image) {
    return function () {
      return image.currentSrc;
    };
  };

  // ----------------------------------------------------------------------------

  exports._crossOrigin = function (image) {
    return image.crossOrigin;
  };

  exports._setCrossOrigin = function (crossOrigin, image) {
    image.crossOrigin = crossOrigin;
  };

  // ----------------------------------------------------------------------------

  exports.useMap = function (image) {
    return function () {
      return image.useMap;
    };
  };

  exports.setUseMap = function (useMap) {
    return function (image) {
      return function () {
        image.useMap = useMap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.isMap = function (image) {
    return function () {
      return image.isMap;
    };
  };

  exports.setIsMap = function (isMap) {
    return function (image) {
      return function () {
        image.isMap = isMap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (image) {
    return function () {
      return image.width;
    };
  };

  exports.setWidth = function (width) {
    return function (image) {
      return function () {
        image.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (image) {
    return function () {
      return image.height;
    };
  };

  exports.setHeight = function (height) {
    return function (image) {
      return function () {
        image.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.naturalWidth = function (image) {
    return function () {
      return image.naturalWidth;
    };
  };

  exports.naturalHeight = function (image) {
    return function () {
      return image.naturalHeight;
    };
  };

  // ----------------------------------------------------------------------------

  exports.referrerPolicy = function (image) {
    return function () {
      return image.referrerPolicy;
    };
  };

  exports.setReferrerPolicy = function (referrerPolicy) {
    return function (image) {
      return function () {
        image.referrerPolicy = referrerPolicy;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._decoding = function (image) {
    return image.decoding;
  };

  exports._setDecoding = function (decoding, image) {
    image.decoding = decoding;
  };

  // ----------------------------------------------------------------------------

  exports._loading = function (image) {
    return image.loading;
  };

  exports._setLoading = function (loading, image) {
    image.loading = loading;
  };

  // ----------------------------------------------------------------------------

  exports.complete = function (image) {
    return function () {
      return image.complete;
    };
  };
})(PS["Web.HTML.HTMLImageElement"] = PS["Web.HTML.HTMLImageElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLImageElement.CORSMode"] = $PS["Web.HTML.HTMLImageElement.CORSMode"] || {};
  var exports = $PS["Web.HTML.HTMLImageElement.CORSMode"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Anonymous = (function () {
      function Anonymous() {

      };
      Anonymous.value = new Anonymous();
      return Anonymous;
  })();
  var UseCredentials = (function () {
      function UseCredentials() {

      };
      UseCredentials.value = new UseCredentials();
      return UseCredentials;
  })();
  var showDecodingHint = new Data_Show.Show(function (v) {
      if (v instanceof Anonymous) {
          return "Anonymous";
      };
      if (v instanceof UseCredentials) {
          return "UseCredentials";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.CORSMode (line 18, column 10 - line 20, column 39): " + [ v.constructor.name ]);
  });
  var print = function (v) {
      if (v instanceof Anonymous) {
          return "anonymous";
      };
      if (v instanceof UseCredentials) {
          return "use-credentials";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.CORSMode (line 30, column 9 - line 32, column 38): " + [ v.constructor.name ]);
  };
  var parse = function (v) {
      if (v === "") {
          return new Data_Maybe.Just(Anonymous.value);
      };
      if (v === "anonymous") {
          return new Data_Maybe.Just(Anonymous.value);
      };
      if (v === "use-credentials") {
          return new Data_Maybe.Just(UseCredentials.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqCORSMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Anonymous && y instanceof Anonymous) {
              return true;
          };
          if (x instanceof UseCredentials && y instanceof UseCredentials) {
              return true;
          };
          return false;
      };
  });
  var ordCORSMode = new Data_Ord.Ord(function () {
      return eqCORSMode;
  }, function (x) {
      return function (y) {
          if (x instanceof Anonymous && y instanceof Anonymous) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Anonymous) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Anonymous) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof UseCredentials && y instanceof UseCredentials) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.CORSMode (line 15, column 1 - line 15, column 44): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Anonymous"] = Anonymous;
  exports["UseCredentials"] = UseCredentials;
  exports["parse"] = parse;
  exports["print"] = print;
  exports["eqCORSMode"] = eqCORSMode;
  exports["ordCORSMode"] = ordCORSMode;
  exports["showDecodingHint"] = showDecodingHint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLImageElement.DecodingHint"] = $PS["Web.HTML.HTMLImageElement.DecodingHint"] || {};
  var exports = $PS["Web.HTML.HTMLImageElement.DecodingHint"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Sync = (function () {
      function Sync() {

      };
      Sync.value = new Sync();
      return Sync;
  })();
  var Async = (function () {
      function Async() {

      };
      Async.value = new Async();
      return Async;
  })();
  var Auto = (function () {
      function Auto() {

      };
      Auto.value = new Auto();
      return Auto;
  })();
  var showDecodingHint = new Data_Show.Show(function (v) {
      if (v instanceof Sync) {
          return "Sync";
      };
      if (v instanceof Async) {
          return "Async";
      };
      if (v instanceof Auto) {
          return "Auto";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.DecodingHint (line 19, column 10 - line 22, column 19): " + [ v.constructor.name ]);
  });
  var print = function (v) {
      if (v instanceof Sync) {
          return "sync";
      };
      if (v instanceof Async) {
          return "async";
      };
      if (v instanceof Auto) {
          return "auto";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.DecodingHint (line 33, column 9 - line 36, column 17): " + [ v.constructor.name ]);
  };
  var parse = function (v) {
      if (v === "") {
          return new Data_Maybe.Just(Auto.value);
      };
      if (v === "sync") {
          return new Data_Maybe.Just(Sync.value);
      };
      if (v === "async") {
          return new Data_Maybe.Just(Async.value);
      };
      if (v === "auto") {
          return new Data_Maybe.Just(Auto.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqDecodingHint = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sync && y instanceof Sync) {
              return true;
          };
          if (x instanceof Async && y instanceof Async) {
              return true;
          };
          if (x instanceof Auto && y instanceof Auto) {
              return true;
          };
          return false;
      };
  });
  var ordDecodingHint = new Data_Ord.Ord(function () {
      return eqDecodingHint;
  }, function (x) {
      return function (y) {
          if (x instanceof Sync && y instanceof Sync) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Sync) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Sync) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Async && y instanceof Async) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Async) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Async) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Auto && y instanceof Auto) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.DecodingHint (line 16, column 1 - line 16, column 52): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Sync"] = Sync;
  exports["Async"] = Async;
  exports["Auto"] = Auto;
  exports["parse"] = parse;
  exports["print"] = print;
  exports["eqDecodingHint"] = eqDecodingHint;
  exports["ordDecodingHint"] = ordDecodingHint;
  exports["showDecodingHint"] = showDecodingHint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLImageElement.Laziness"] = $PS["Web.HTML.HTMLImageElement.Laziness"] || {};
  var exports = $PS["Web.HTML.HTMLImageElement.Laziness"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Eager = (function () {
      function Eager() {

      };
      Eager.value = new Eager();
      return Eager;
  })();
  var Lazy = (function () {
      function Lazy() {

      };
      Lazy.value = new Lazy();
      return Lazy;
  })();
  var showDecodingHint = new Data_Show.Show(function (v) {
      if (v instanceof Eager) {
          return "Eager";
      };
      if (v instanceof Lazy) {
          return "Lazy";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.Laziness (line 18, column 10 - line 20, column 19): " + [ v.constructor.name ]);
  });
  var print = function (v) {
      if (v instanceof Eager) {
          return "eager";
      };
      if (v instanceof Lazy) {
          return "lazy";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.Laziness (line 31, column 9 - line 33, column 17): " + [ v.constructor.name ]);
  };
  var parse = function (v) {
      if (v === "") {
          return new Data_Maybe.Just(Eager.value);
      };
      if (v === "eager") {
          return new Data_Maybe.Just(Eager.value);
      };
      if (v === "lazy") {
          return new Data_Maybe.Just(Lazy.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqDecodingHint = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Eager && y instanceof Eager) {
              return true;
          };
          if (x instanceof Lazy && y instanceof Lazy) {
              return true;
          };
          return false;
      };
  });
  var ordDecodingHint = new Data_Ord.Ord(function () {
      return eqDecodingHint;
  }, function (x) {
      return function (y) {
          if (x instanceof Eager && y instanceof Eager) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Eager) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Eager) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Lazy && y instanceof Lazy) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.Laziness (line 15, column 1 - line 15, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Eager"] = Eager;
  exports["Lazy"] = Lazy;
  exports["parse"] = parse;
  exports["print"] = print;
  exports["eqDecodingHint"] = eqDecodingHint;
  exports["ordDecodingHint"] = ordDecodingHint;
  exports["showDecodingHint"] = showDecodingHint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLImageElement"] = $PS["Web.HTML.HTMLImageElement"] || {};
  var exports = $PS["Web.HTML.HTMLImageElement"];
  var $foreign = $PS["Web.HTML.HTMLImageElement"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLImageElement_CORSMode = $PS["Web.HTML.HTMLImageElement.CORSMode"];
  var Web_HTML_HTMLImageElement_DecodingHint = $PS["Web.HTML.HTMLImageElement.DecodingHint"];
  var Web_HTML_HTMLImageElement_Laziness = $PS["Web.HTML.HTMLImageElement.Laziness"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var setLoading = function (laziness) {
      return Effect_Uncurried.runEffectFn2($foreign["_setLoading"])(Web_HTML_HTMLImageElement_Laziness.print(laziness));
  };
  var setDecoding = function (hint) {
      return Effect_Uncurried.runEffectFn2($foreign["_setDecoding"])(Web_HTML_HTMLImageElement_DecodingHint.print(hint));
  };
  var setCrossOrigin = function (mode) {
      return Effect_Uncurried.runEffectFn2($foreign["_setCrossOrigin"])(Web_HTML_HTMLImageElement_CORSMode.print(mode));
  };
  var loading = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)((function () {
          var $3 = Data_Maybe.fromMaybe(Web_HTML_HTMLImageElement_Laziness.Eager.value);
          return function ($4) {
              return $3(Web_HTML_HTMLImageElement_Laziness.parse($4));
          };
      })());
      var $1 = Effect_Uncurried.runEffectFn1($foreign["_loading"]);
      return function ($2) {
          return $0($1($2));
      };
  })();
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
  var decoding = (function () {
      var $5 = Data_Functor.map(Effect.functorEffect)((function () {
          var $8 = Data_Maybe.fromMaybe(Web_HTML_HTMLImageElement_DecodingHint.Auto.value);
          return function ($9) {
              return $8(Web_HTML_HTMLImageElement_DecodingHint.parse($9));
          };
      })());
      var $6 = Effect_Uncurried.runEffectFn1($foreign["_decoding"]);
      return function ($7) {
          return $5($6($7));
      };
  })();
  var crossOrigin = (function () {
      var $10 = Data_Functor.map(Effect.functorEffect)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLImageElement_CORSMode.parse)(Data_Nullable.toMaybe));
      var $11 = Effect_Uncurried.runEffectFn1($foreign["_crossOrigin"]);
      return function ($12) {
          return $10($11($12));
      };
  })();
  var create$prime = $foreign.createWithDimensions;
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["create'"] = create$prime;
  exports["crossOrigin"] = crossOrigin;
  exports["setCrossOrigin"] = setCrossOrigin;
  exports["decoding"] = decoding;
  exports["setDecoding"] = setDecoding;
  exports["loading"] = loading;
  exports["setLoading"] = setLoading;
  exports["create"] = $foreign.create;
  exports["alt"] = $foreign.alt;
  exports["setAlt"] = $foreign.setAlt;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["srcset"] = $foreign.srcset;
  exports["setSrcset"] = $foreign.setSrcset;
  exports["currentSrc"] = $foreign.currentSrc;
  exports["sizes"] = $foreign.sizes;
  exports["setSizes"] = $foreign.setSizes;
  exports["useMap"] = $foreign.useMap;
  exports["setUseMap"] = $foreign.setUseMap;
  exports["isMap"] = $foreign.isMap;
  exports["setIsMap"] = $foreign.setIsMap;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
  exports["naturalWidth"] = $foreign.naturalWidth;
  exports["naturalHeight"] = $foreign.naturalHeight;
  exports["referrerPolicy"] = $foreign.referrerPolicy;
  exports["setReferrerPolicy"] = $foreign.setReferrerPolicy;
  exports["complete"] = $foreign.complete;
})(PS);
(function(exports) {
  "use strict";

  exports.accept = function (input) {
    return function () {
      return input.accept;
    };
  };

  exports.setAccept = function (accept) {
    return function (input) {
      return function () {
        input.accept = accept;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.alt = function (input) {
    return function () {
      return input.alt;
    };
  };

  exports.setAlt = function (alt) {
    return function (input) {
      return function () {
        input.alt = alt;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autocomplete = function (input) {
    return function () {
      return input.autocomplete;
    };
  };

  exports.setAutocomplete = function (autocomplete) {
    return function (input) {
      return function () {
        input.autocomplete = autocomplete;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autofocus = function (input) {
    return function () {
      return input.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (input) {
      return function () {
        input.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultChecked = function (input) {
    return function () {
      return input.defaultChecked;
    };
  };

  exports.setDefaultChecked = function (defaultChecked) {
    return function (input) {
      return function () {
        input.defaultChecked = defaultChecked;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.checked = function (input) {
    return function () {
      return input.checked;
    };
  };

  exports.setChecked = function (checked) {
    return function (input) {
      return function () {
        input.checked = checked;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dirName = function (input) {
    return function () {
      return input.dirName;
    };
  };

  exports.setDirName = function (dirName) {
    return function (input) {
      return function () {
        input.dirName = dirName;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (input) {
    return function () {
      return input.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (input) {
      return function () {
        input.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (input) {
    return function () {
      return input.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports._files = function (input) {
    return function () {
      return input.files;
    };
  };

  // ----------------------------------------------------------------------------

  exports.formAction = function (input) {
    return function () {
      return input.formAction;
    };
  };

  exports.setFormAction = function (formAction) {
    return function (input) {
      return function () {
        input.formAction = formAction;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formEnctype = function (input) {
    return function () {
      return input.formEnctype;
    };
  };

  exports.setFormEnctype = function (formEnctype) {
    return function (input) {
      return function () {
        input.formEnctype = formEnctype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formMethod = function (input) {
    return function () {
      return input.formMethod;
    };
  };

  exports.setFormMethod = function (formMethod) {
    return function (input) {
      return function () {
        input.formMethod = formMethod;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formNoValidate = function (input) {
    return function () {
      return input.formNoValidate;
    };
  };

  exports.setFormNoValidate = function (formNoValidate) {
    return function (input) {
      return function () {
        input.formNoValidate = formNoValidate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formTarget = function (input) {
    return function () {
      return input.formTarget;
    };
  };

  exports.setFormTarget = function (formTarget) {
    return function (input) {
      return function () {
        input.formTarget = formTarget;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (input) {
    return function () {
      return input.height;
    };
  };

  exports.setHeight = function (height) {
    return function (input) {
      return function () {
        input.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.indeterminate = function (input) {
    return function () {
      return input.indeterminate;
    };
  };

  exports.setIndeterminate = function (indeterminate) {
    return function (input) {
      return function () {
        input.indeterminate = indeterminate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._list = function (input) {
    return function () {
      return input.list;
    };
  };

  // ----------------------------------------------------------------------------

  exports.max = function (input) {
    return function () {
      return input.max;
    };
  };

  exports.setMax = function (max) {
    return function (input) {
      return function () {
        input.max = max;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.maxLength = function (input) {
    return function () {
      return input.maxLength;
    };
  };

  exports.setMaxLength = function (maxLength) {
    return function (input) {
      return function () {
        input.maxLength = maxLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.min = function (input) {
    return function () {
      return input.min;
    };
  };

  exports.setMin = function (min) {
    return function (input) {
      return function () {
        input.min = min;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.minLength = function (input) {
    return function () {
      return input.minLength;
    };
  };

  exports.setMinLength = function (minLength) {
    return function (input) {
      return function () {
        input.minLength = minLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.multiple = function (input) {
    return function () {
      return input.multiple;
    };
  };

  exports.setMultiple = function (multiple) {
    return function (input) {
      return function () {
        input.multiple = multiple;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (input) {
    return function () {
      return input.name;
    };
  };

  exports.setName = function (name) {
    return function (input) {
      return function () {
        input.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.pattern = function (input) {
    return function () {
      return input.pattern;
    };
  };

  exports.setPattern = function (pattern) {
    return function (input) {
      return function () {
        input.pattern = pattern;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.placeholder = function (input) {
    return function () {
      return input.placeholder;
    };
  };

  exports.setPlaceholder = function (placeholder) {
    return function (input) {
      return function () {
        input.placeholder = placeholder;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.readOnly = function (input) {
    return function () {
      return input.readOnly;
    };
  };

  exports.setReadOnly = function (readOnly) {
    return function (input) {
      return function () {
        input.readOnly = readOnly;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.required = function (input) {
    return function () {
      return input.required;
    };
  };

  exports.setRequired = function (required) {
    return function (input) {
      return function () {
        input.required = required;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.size = function (input) {
    return function () {
      return input.size;
    };
  };

  exports.setSize = function (size) {
    return function (input) {
      return function () {
        input.size = size;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.src = function (input) {
    return function () {
      return input.src;
    };
  };

  exports.setSrc = function (src) {
    return function (input) {
      return function () {
        input.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.step = function (input) {
    return function () {
      return input.step;
    };
  };

  exports.setStep = function (step) {
    return function (input) {
      return function () {
        input.step = step;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (input) {
    return function () {
      return input.type;
    };
  };

  exports.setType = function (type) {
    return function (input) {
      return function () {
        input.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultValue = function (input) {
    return function () {
      return input.defaultValue;
    };
  };

  exports.setDefaultValue = function (defaultValue) {
    return function (input) {
      return function () {
        input.defaultValue = defaultValue;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };

  exports.setValue = function (value) {
    return function (input) {
      return function () {
        input.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.valueAsDate = function (input) {
    return function () {
      return input.valueAsDate;
    };
  };

  exports.setValueAsDate = function (valueAsDate) {
    return function (input) {
      return function () {
        input.valueAsDate = valueAsDate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.valueAsNumber = function (input) {
    return function () {
      return input.valueAsNumber;
    };
  };

  exports.setValueAsNumber = function (valueAsNumber) {
    return function (input) {
      return function () {
        input.valueAsNumber = valueAsNumber;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (input) {
    return function () {
      return input.width;
    };
  };

  exports.setWidth = function (width) {
    return function (input) {
      return function () {
        input.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.stepUpBy = function (n) {
    return function (input) {
      return function () {
        input.stepUp(n);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.stepDownBy = function (n) {
    return function (input) {
      return function () {
        input.stepDown(n);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (input) {
    return function () {
      return input.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (input) {
    return function () {
      return input.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (input) {
    return function () {
      return input.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (input) {
    return function () {
      return input.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (input) {
    return function () {
      return input.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (input) {
      return function () {
        input.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (input) {
    return function () {
      return input.labels;
    };
  };

  // ----------------------------------------------------------------------------

  exports.select = function (input) {
    return function () {
      input.select();
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionStart = function (input) {
    return function () {
      return input.selectionStart;
    };
  };

  exports.setSelectionStart = function (selectionStart) {
    return function (input) {
      return function () {
        input.selectionStart = selectionStart;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionEnd = function (input) {
    return function () {
      return input.selectionEnd;
    };
  };

  exports.setSelectionEnd = function (selectionEnd) {
    return function (input) {
      return function () {
        input.selectionEnd = selectionEnd;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionDirection = function (input) {
    return function () {
      return input.selectionDirection;
    };
  };

  exports.setSelectionDirection = function (selectionDirection) {
    return function (input) {
      return function () {
        input.selectionDirection = selectionDirection;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.setRangeText = function (replacement) {
    return function (input) {
      return function () {
        input.setRangeText(replacement);
      };
    };
  };
  exports._setRangeText = function (replacement, start, end, selectionMode, textarea) {
    textarea.setRangeText(replacement, start, end, selectionMode);
  };

  // ----------------------------------------------------------------------------

  exports.setSelectionRange = function (start) {
    return function (end) {
      return function (direction) {
        return function (input) {
          return function () {
            input.setSelectionRange(start, end, direction, input);
          };
        };
      };
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.SelectionMode"] = $PS["Web.HTML.SelectionMode"] || {};
  var exports = $PS["Web.HTML.SelectionMode"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Preserve = (function () {
      function Preserve() {

      };
      Preserve.value = new Preserve();
      return Preserve;
  })();
  var Select = (function () {
      function Select() {

      };
      Select.value = new Select();
      return Select;
  })();
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var showSelectionMode = new Data_Show.Show(function (v) {
      if (v instanceof Preserve) {
          return "Preserve";
      };
      if (v instanceof Select) {
          return "Select";
      };
      if (v instanceof Start) {
          return "Start";
      };
      if (v instanceof End) {
          return "End";
      };
      throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 17, column 10 - line 21, column 17): " + [ v.constructor.name ]);
  });
  var print = function (v) {
      if (v instanceof Preserve) {
          return "preserve";
      };
      if (v instanceof Select) {
          return "select";
      };
      if (v instanceof Start) {
          return "start";
      };
      if (v instanceof End) {
          return "end";
      };
      throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 32, column 9 - line 36, column 15): " + [ v.constructor.name ]);
  };
  var parse = function (v) {
      if (v === "preserve") {
          return new Data_Maybe.Just(Preserve.value);
      };
      if (v === "select") {
          return new Data_Maybe.Just(Select.value);
      };
      if (v === "start") {
          return new Data_Maybe.Just(Start.value);
      };
      if (v === "end") {
          return new Data_Maybe.Just(End.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqSelectionMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Preserve && y instanceof Preserve) {
              return true;
          };
          if (x instanceof Select && y instanceof Select) {
              return true;
          };
          if (x instanceof Start && y instanceof Start) {
              return true;
          };
          if (x instanceof End && y instanceof End) {
              return true;
          };
          return false;
      };
  });
  var ordSelectionMode = new Data_Ord.Ord(function () {
      return eqSelectionMode;
  }, function (x) {
      return function (y) {
          if (x instanceof Preserve && y instanceof Preserve) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Preserve) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Preserve) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Select && y instanceof Select) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Select) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Select) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Start && y instanceof Start) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Start) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Start) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof End && y instanceof End) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 14, column 1 - line 14, column 54): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Preserve"] = Preserve;
  exports["Select"] = Select;
  exports["Start"] = Start;
  exports["End"] = End;
  exports["parse"] = parse;
  exports["print"] = print;
  exports["eqSelectionMode"] = eqSelectionMode;
  exports["ordSelectionMode"] = ordSelectionMode;
  exports["showSelectionMode"] = showSelectionMode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_SelectionMode = $PS["Web.HTML.SelectionMode"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var stepUp$prime = $foreign.stepUpBy;
  var stepUp = stepUp$prime(1);
  var stepDown$prime = $foreign.stepDownBy;
  var stepDown = stepDown$prime(1);
  var setRangeText$prime = function (rpl) {
      return function (s) {
          return function (e) {
              return function (mode) {
                  return function (area) {
                      return function () {
                          return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                      };
                  };
              };
          };
      };
  };
  var list = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_list"]($1));
      };
  })();
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var form = (function () {
      var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($3) {
          return $2($foreign["_form"]($3));
      };
  })();
  var files = (function () {
      var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($5) {
          return $4($foreign["_files"]($5));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["files"] = files;
  exports["list"] = list;
  exports["stepUp'"] = stepUp$prime;
  exports["stepDown'"] = stepDown$prime;
  exports["setRangeText'"] = setRangeText$prime;
  exports["accept"] = $foreign.accept;
  exports["setAccept"] = $foreign.setAccept;
  exports["alt"] = $foreign.alt;
  exports["setAlt"] = $foreign.setAlt;
  exports["autocomplete"] = $foreign.autocomplete;
  exports["setAutocomplete"] = $foreign.setAutocomplete;
  exports["autofocus"] = $foreign.autofocus;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["defaultChecked"] = $foreign.defaultChecked;
  exports["setDefaultChecked"] = $foreign.setDefaultChecked;
  exports["checked"] = $foreign.checked;
  exports["setChecked"] = $foreign.setChecked;
  exports["dirName"] = $foreign.dirName;
  exports["setDirName"] = $foreign.setDirName;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["formAction"] = $foreign.formAction;
  exports["setFormAction"] = $foreign.setFormAction;
  exports["formEnctype"] = $foreign.formEnctype;
  exports["setFormEnctype"] = $foreign.setFormEnctype;
  exports["formMethod"] = $foreign.formMethod;
  exports["setFormMethod"] = $foreign.setFormMethod;
  exports["formNoValidate"] = $foreign.formNoValidate;
  exports["setFormNoValidate"] = $foreign.setFormNoValidate;
  exports["formTarget"] = $foreign.formTarget;
  exports["setFormTarget"] = $foreign.setFormTarget;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
  exports["indeterminate"] = $foreign.indeterminate;
  exports["setIndeterminate"] = $foreign.setIndeterminate;
  exports["max"] = $foreign.max;
  exports["setMax"] = $foreign.setMax;
  exports["maxLength"] = $foreign.maxLength;
  exports["setMaxLength"] = $foreign.setMaxLength;
  exports["min"] = $foreign.min;
  exports["setMin"] = $foreign.setMin;
  exports["minLength"] = $foreign.minLength;
  exports["setMinLength"] = $foreign.setMinLength;
  exports["multiple"] = $foreign.multiple;
  exports["setMultiple"] = $foreign.setMultiple;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["pattern"] = $foreign.pattern;
  exports["setPattern"] = $foreign.setPattern;
  exports["placeholder"] = $foreign.placeholder;
  exports["setPlaceholder"] = $foreign.setPlaceholder;
  exports["readOnly"] = $foreign.readOnly;
  exports["setReadOnly"] = $foreign.setReadOnly;
  exports["required"] = $foreign.required;
  exports["setRequired"] = $foreign.setRequired;
  exports["size"] = $foreign.size;
  exports["setSize"] = $foreign.setSize;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["step"] = $foreign.step;
  exports["setStep"] = $foreign.setStep;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["defaultValue"] = $foreign.defaultValue;
  exports["setDefaultValue"] = $foreign.setDefaultValue;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["valueAsDate"] = $foreign.valueAsDate;
  exports["setValueAsDate"] = $foreign.setValueAsDate;
  exports["valueAsNumber"] = $foreign.valueAsNumber;
  exports["setValueAsNumber"] = $foreign.setValueAsNumber;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["labels"] = $foreign.labels;
  exports["select"] = $foreign.select;
  exports["selectionStart"] = $foreign.selectionStart;
  exports["setSelectionStart"] = $foreign.setSelectionStart;
  exports["selectionEnd"] = $foreign.selectionEnd;
  exports["setSelectionEnd"] = $foreign.setSelectionEnd;
  exports["selectionDirection"] = $foreign.selectionDirection;
  exports["setSelectionDirection"] = $foreign.setSelectionDirection;
  exports["setRangeText"] = $foreign.setRangeText;
  exports["setSelectionRange"] = $foreign.setSelectionRange;
})(PS);
(function(exports) {
  "use strict";

  exports.autofocus = function (keygen) {
    return function () {
      return keygen.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (keygen) {
      return function () {
        keygen.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.challenge = function (keygen) {
    return function () {
      return keygen.challenge;
    };
  };

  exports.setChallenge = function (challenge) {
    return function (keygen) {
      return function () {
        keygen.challenge = challenge;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (keygen) {
    return function () {
      return keygen.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (keygen) {
      return function () {
        keygen.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (keygen) {
    return function () {
      return keygen.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.keytype = function (keygen) {
    return function () {
      return keygen.keytype;
    };
  };

  exports.setKeytype = function (keytype) {
    return function (keygen) {
      return function () {
        keygen.keytype = keytype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (keygen) {
    return function () {
      return keygen.name;
    };
  };

  exports.setName = function (name) {
    return function (keygen) {
      return function () {
        keygen.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (keygen) {
    return function () {
      return keygen.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (keygen) {
    return function () {
      return keygen.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (keygen) {
    return function () {
      return keygen.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (keygen) {
    return function () {
      return keygen.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (keygen) {
    return function () {
      return keygen.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (keygen) {
    return function () {
      return keygen.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (keygen) {
      return function () {
        keygen.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (keygen) {
    return function () {
      return keygen.labels;
    };
  };
})(PS["Web.HTML.HTMLKeygenElement"] = PS["Web.HTML.HTMLKeygenElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLKeygenElement"] = $PS["Web.HTML.HTMLKeygenElement"] || {};
  var exports = $PS["Web.HTML.HTMLKeygenElement"];
  var $foreign = $PS["Web.HTML.HTMLKeygenElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["autofocus"] = $foreign.autofocus;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["challenge"] = $foreign.challenge;
  exports["setChallenge"] = $foreign.setChallenge;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["keytype"] = $foreign.keytype;
  exports["setKeytype"] = $foreign.setKeytype;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["type_"] = $foreign.type_;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["labels"] = $foreign.labels;
})(PS);
(function(exports) {
  "use strict";

  exports.value = function (li) {
    return function () {
      return li.value;
    };
  };

  exports.setValue = function (value) {
    return function (li) {
      return function () {
        li.value = value;
      };
    };
  };
})(PS["Web.HTML.HTMLLIElement"] = PS["Web.HTML.HTMLLIElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLLIElement"] = $PS["Web.HTML.HTMLLIElement"] || {};
  var exports = $PS["Web.HTML.HTMLLIElement"];
  var $foreign = $PS["Web.HTML.HTMLLIElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
})(PS);
(function(exports) {
  "use strict";

  exports._form = function (label) {
    return function () {
      return label.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.htmlFor = function (label) {
    return function () {
      return label.htmlFor;
    };
  };

  exports.setHtmlFor = function (htmlFor) {
    return function (label) {
      return function () {
        label.htmlFor = htmlFor;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._control = function (label) {
    return function () {
      return label.control;
    };
  };
})(PS["Web.HTML.HTMLLabelElement"] = PS["Web.HTML.HTMLLabelElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLLabelElement"] = $PS["Web.HTML.HTMLLabelElement"] || {};
  var exports = $PS["Web.HTML.HTMLLabelElement"];
  var $foreign = $PS["Web.HTML.HTMLLabelElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  var control = (function () {
      var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($3) {
          return $2($foreign["_control"]($3));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["control"] = control;
  exports["htmlFor"] = $foreign.htmlFor;
  exports["setHtmlFor"] = $foreign.setHtmlFor;
})(PS);
(function(exports) {
  "use strict";

  exports._form = function (le) {
    return function () {
      return le.form;
    };
  };
})(PS["Web.HTML.HTMLLegendElement"] = PS["Web.HTML.HTMLLegendElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLLegendElement"] = $PS["Web.HTML.HTMLLegendElement"] || {};
  var exports = $PS["Web.HTML.HTMLLegendElement"];
  var $foreign = $PS["Web.HTML.HTMLLegendElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
})(PS);
(function(exports) {
  "use strict";

  exports.disabled = function (link) {
    return function () {
      return link.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (link) {
      return function () {
        link.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.href = function (link) {
    return function () {
      return link.href;
    };
  };

  exports.setHref = function (href) {
    return function (link) {
      return function () {
        link.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (link) {
    return function () {
      return link.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (link) {
      return function () {
        link.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rel = function (link) {
    return function () {
      return link.rel;
    };
  };

  exports.setRel = function (rel) {
    return function (link) {
      return function () {
        link.rel = rel;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rev = function (link) {
    return function () {
      return link.rev;
    };
  };

  exports.setRev = function (rev) {
    return function (link) {
      return function () {
        link.rev = rev;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.relList = function (link) {
    return function () {
      return link.relList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.media = function (link) {
    return function () {
      return link.media;
    };
  };

  exports.setMedia = function (media) {
    return function (link) {
      return function () {
        link.media = media;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hreflang = function (link) {
    return function () {
      return link.hreflang;
    };
  };

  exports.setHreflang = function (hreflang) {
    return function (link) {
      return function () {
        link.hreflang = hreflang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (link) {
    return function () {
      return link.type;
    };
  };

  exports.setType = function (type) {
    return function (link) {
      return function () {
        link.type = type;
      };
    };
  };
})(PS["Web.HTML.HTMLLinkElement"] = PS["Web.HTML.HTMLLinkElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLLinkElement"] = $PS["Web.HTML.HTMLLinkElement"] || {};
  var exports = $PS["Web.HTML.HTMLLinkElement"];
  var $foreign = $PS["Web.HTML.HTMLLinkElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["href"] = $foreign.href;
  exports["setHref"] = $foreign.setHref;
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["rel"] = $foreign.rel;
  exports["setRel"] = $foreign.setRel;
  exports["rev"] = $foreign.rev;
  exports["setRev"] = $foreign.setRev;
  exports["relList"] = $foreign.relList;
  exports["media"] = $foreign.media;
  exports["setMedia"] = $foreign.setMedia;
  exports["hreflang"] = $foreign.hreflang;
  exports["setHreflang"] = $foreign.setHreflang;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
})(PS);
(function(exports) {
  "use strict";

  exports.name = function (map) {
    return function () {
      return map.name;
    };
  };

  exports.setName = function (name) {
    return function (map) {
      return function () {
        map.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.areas = function (map) {
    return function () {
      return map.areas;
    };
  };

  // ----------------------------------------------------------------------------

  exports.images = function (map) {
    return function () {
      return map.images;
    };
  };
})(PS["Web.HTML.HTMLMapElement"] = PS["Web.HTML.HTMLMapElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMapElement"] = $PS["Web.HTML.HTMLMapElement"] || {};
  var exports = $PS["Web.HTML.HTMLMapElement"];
  var $foreign = $PS["Web.HTML.HTMLMapElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["areas"] = $foreign.areas;
  exports["images"] = $foreign.images;
})(PS);
(function(exports) {
  "use strict";

  exports.src = function (media) {
    return function () {
      return media.src;
    };
  };

  exports.setSrc = function (src) {
    return function (media) {
      return function () {
        media.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.currentSrc = function (media) {
    return function () {
      return media.currentSrc;
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (media) {
    return function () {
      return media.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (media) {
      return function () {
        media.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._networkState = function (media) {
    return media.networkState;
  };

  // ----------------------------------------------------------------------------

  exports.preload = function (media) {
    return function () {
      return media.preload;
    };
  };

  exports.setPreload = function (preload) {
    return function (media) {
      return function () {
        media.preload = preload;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.load = function (media) {
    return function () {
      return media.load();
    };
  };

  // ----------------------------------------------------------------------------

  exports._canPlayType = function (type, media) {
    return media.canPlayType(type);
  };

  // ----------------------------------------------------------------------------

  exports._readyState = function (media) {
    return media.readyState;
  };

  // ----------------------------------------------------------------------------

  exports.seeking = function (media) {
    return function () {
      return media.seeking;
    };
  };

  // ----------------------------------------------------------------------------

  exports.currentTime = function (media) {
    return function () {
      return media.currentTime;
    };
  };

  exports.setCurrentTime = function (currentTime) {
    return function (media) {
      return function () {
        media.currentTime = currentTime;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.duration = function (media) {
    return function () {
      return media.duration;
    };
  };

  // ----------------------------------------------------------------------------

  exports.getStartDate = function (media) {
    return function () {
      return media.getStartDate();
    };
  };

  // ----------------------------------------------------------------------------

  exports.paused = function (media) {
    return function () {
      return media.paused;
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultPlaybackRate = function (media) {
    return function () {
      return media.defaultPlaybackRate;
    };
  };

  exports.setDefaultPlaybackRate = function (defaultPlaybackRate) {
    return function (media) {
      return function () {
        media.defaultPlaybackRate = defaultPlaybackRate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.playbackRate = function (media) {
    return function () {
      return media.playbackRate;
    };
  };

  exports.setPlaybackRate = function (playbackRate) {
    return function (media) {
      return function () {
        media.playbackRate = playbackRate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.ended = function (media) {
    return function () {
      return media.ended;
    };
  };

  // ----------------------------------------------------------------------------

  exports.autoplay = function (media) {
    return function () {
      return media.autoplay;
    };
  };

  exports.setAutoplay = function (autoplay) {
    return function (media) {
      return function () {
        media.autoplay = autoplay;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.loop = function (media) {
    return function () {
      return media.loop;
    };
  };

  exports.setLoop = function (loop) {
    return function (media) {
      return function () {
        media.loop = loop;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.play = function (media) {
    return function () {
      media.play();
    };
  };

  // ----------------------------------------------------------------------------

  exports.pause = function (media) {
    return function () {
      media.pause();
    };
  };

  // ----------------------------------------------------------------------------

  exports.mediaGroup = function (media) {
    return function () {
      return media.mediaGroup;
    };
  };

  exports.setMediaGroup = function (mediaGroup) {
    return function (media) {
      return function () {
        media.mediaGroup = mediaGroup;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.controls = function (media) {
    return function () {
      return media.controls;
    };
  };

  exports.setControls = function (controls) {
    return function (media) {
      return function () {
        media.controls = controls;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.volume = function (media) {
    return function () {
      return media.volume;
    };
  };

  exports.setVolume = function (volume) {
    return function (media) {
      return function () {
        media.volume = volume;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.muted = function (media) {
    return function () {
      return media.muted;
    };
  };

  exports.setMuted = function (muted) {
    return function (media) {
      return function () {
        media.muted = muted;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultMuted = function (media) {
    return function () {
      return media.defaultMuted;
    };
  };

  exports.setDefaultMuted = function (defaultMuted) {
    return function (media) {
      return function () {
        media.defaultMuted = defaultMuted;
      };
    };
  };
})(PS["Web.HTML.HTMLMediaElement"] = PS["Web.HTML.HTMLMediaElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMediaElement.CanPlayType"] = $PS["Web.HTML.HTMLMediaElement.CanPlayType"] || {};
  var exports = $PS["Web.HTML.HTMLMediaElement.CanPlayType"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Unspecified = (function () {
      function Unspecified() {

      };
      Unspecified.value = new Unspecified();
      return Unspecified;
  })();
  var Maybe = (function () {
      function Maybe() {

      };
      Maybe.value = new Maybe();
      return Maybe;
  })();
  var Probably = (function () {
      function Probably() {

      };
      Probably.value = new Probably();
      return Probably;
  })();
  var showCanPlayType = new Data_Show.Show(function (v) {
      if (v instanceof Unspecified) {
          return "Unspecified";
      };
      if (v instanceof Maybe) {
          return "Maybe";
      };
      if (v instanceof Probably) {
          return "Probably";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.CanPlayType (line 16, column 10 - line 19, column 27): " + [ v.constructor.name ]);
  });
  var print = function (v) {
      if (v instanceof Unspecified) {
          return "";
      };
      if (v instanceof Maybe) {
          return "maybe";
      };
      if (v instanceof Probably) {
          return "probably";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.CanPlayType (line 29, column 9 - line 32, column 25): " + [ v.constructor.name ]);
  };
  var parse = function (v) {
      if (v === "") {
          return new Data_Maybe.Just(Unspecified.value);
      };
      if (v === "maybe") {
          return new Data_Maybe.Just(Maybe.value);
      };
      if (v === "probably") {
          return new Data_Maybe.Just(Probably.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqCanPlayType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Unspecified && y instanceof Unspecified) {
              return true;
          };
          if (x instanceof Maybe && y instanceof Maybe) {
              return true;
          };
          if (x instanceof Probably && y instanceof Probably) {
              return true;
          };
          return false;
      };
  });
  var ordCanPlayType = new Data_Ord.Ord(function () {
      return eqCanPlayType;
  }, function (x) {
      return function (y) {
          if (x instanceof Unspecified && y instanceof Unspecified) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Unspecified) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Unspecified) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Maybe && y instanceof Maybe) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Maybe) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Maybe) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Probably && y instanceof Probably) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.CanPlayType (line 13, column 1 - line 13, column 50): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Unspecified"] = Unspecified;
  exports["Maybe"] = Maybe;
  exports["Probably"] = Probably;
  exports["parse"] = parse;
  exports["print"] = print;
  exports["eqCanPlayType"] = eqCanPlayType;
  exports["ordCanPlayType"] = ordCanPlayType;
  exports["showCanPlayType"] = showCanPlayType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMediaElement.NetworkState"] = $PS["Web.HTML.HTMLMediaElement.NetworkState"] || {};
  var exports = $PS["Web.HTML.HTMLMediaElement.NetworkState"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Idle = (function () {
      function Idle() {

      };
      Idle.value = new Idle();
      return Idle;
  })();
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var NoSource = (function () {
      function NoSource() {

      };
      NoSource.value = new NoSource();
      return NoSource;
  })();
  var toEnumNetworkState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Empty.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Idle.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(NoSource.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showNetworkState = new Data_Show.Show(function (v) {
      if (v instanceof Empty) {
          return "Empty";
      };
      if (v instanceof Idle) {
          return "Idle";
      };
      if (v instanceof Loading) {
          return "Loading";
      };
      if (v instanceof NoSource) {
          return "NoSource";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.NetworkState (line 29, column 1 - line 33, column 29): " + [ v.constructor.name ]);
  });
  var fromEnumNetworkState = function (v) {
      if (v instanceof Empty) {
          return 0;
      };
      if (v instanceof Idle) {
          return 1;
      };
      if (v instanceof Loading) {
          return 2;
      };
      if (v instanceof NoSource) {
          return 3;
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.NetworkState (line 46, column 3 - line 50, column 18): " + [ v.constructor.name ]);
  };
  var eqNetworkState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Empty && y instanceof Empty) {
              return true;
          };
          if (x instanceof Idle && y instanceof Idle) {
              return true;
          };
          if (x instanceof Loading && y instanceof Loading) {
              return true;
          };
          if (x instanceof NoSource && y instanceof NoSource) {
              return true;
          };
          return false;
      };
  });
  var ordNetworkState = new Data_Ord.Ord(function () {
      return eqNetworkState;
  }, function (x) {
      return function (y) {
          if (x instanceof Empty && y instanceof Empty) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Empty) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Empty) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Idle && y instanceof Idle) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Idle) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Idle) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Loading) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Loading) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof NoSource && y instanceof NoSource) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.NetworkState (line 14, column 1 - line 14, column 52): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumNetworkState = new Data_Enum.Enum(function () {
      return ordNetworkState;
  }, Data_Enum.defaultPred(toEnumNetworkState)(fromEnumNetworkState), Data_Enum.defaultSucc(toEnumNetworkState)(fromEnumNetworkState));
  var boundedNetworkState = new Data_Bounded.Bounded(function () {
      return ordNetworkState;
  }, Empty.value, NoSource.value);
  var boundedEnumNetworkState = new Data_Enum.BoundedEnum(function () {
      return boundedNetworkState;
  }, function () {
      return enumNetworkState;
  }, 4, fromEnumNetworkState, toEnumNetworkState);
  exports["Empty"] = Empty;
  exports["Idle"] = Idle;
  exports["Loading"] = Loading;
  exports["NoSource"] = NoSource;
  exports["eqNetworkState"] = eqNetworkState;
  exports["ordNetworkState"] = ordNetworkState;
  exports["boundedNetworkState"] = boundedNetworkState;
  exports["enumNetworkState"] = enumNetworkState;
  exports["boundedEnumNetworkState"] = boundedEnumNetworkState;
  exports["showNetworkState"] = showNetworkState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMediaElement.ReadyState"] = $PS["Web.HTML.HTMLMediaElement.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLMediaElement.ReadyState"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var HaveNothing = (function () {
      function HaveNothing() {

      };
      HaveNothing.value = new HaveNothing();
      return HaveNothing;
  })();
  var HaveMetadata = (function () {
      function HaveMetadata() {

      };
      HaveMetadata.value = new HaveMetadata();
      return HaveMetadata;
  })();
  var HaveCurrentData = (function () {
      function HaveCurrentData() {

      };
      HaveCurrentData.value = new HaveCurrentData();
      return HaveCurrentData;
  })();
  var HaveFutureData = (function () {
      function HaveFutureData() {

      };
      HaveFutureData.value = new HaveFutureData();
      return HaveFutureData;
  })();
  var HaveEnoughData = (function () {
      function HaveEnoughData() {

      };
      HaveEnoughData.value = new HaveEnoughData();
      return HaveEnoughData;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(HaveNothing.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(HaveMetadata.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(HaveCurrentData.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(HaveFutureData.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(HaveEnoughData.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof HaveNothing) {
          return "HaveNothing";
      };
      if (v instanceof HaveMetadata) {
          return "HaveMetadata";
      };
      if (v instanceof HaveCurrentData) {
          return "HaveCurrentData";
      };
      if (v instanceof HaveFutureData) {
          return "HaveFutureData";
      };
      if (v instanceof HaveEnoughData) {
          return "HaveEnoughData";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.ReadyState (line 30, column 1 - line 35, column 41): " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof HaveNothing) {
          return 0;
      };
      if (v instanceof HaveMetadata) {
          return 1;
      };
      if (v instanceof HaveCurrentData) {
          return 2;
      };
      if (v instanceof HaveFutureData) {
          return 3;
      };
      if (v instanceof HaveEnoughData) {
          return 4;
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.ReadyState (line 49, column 3 - line 54, column 24): " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof HaveNothing && y instanceof HaveNothing) {
              return true;
          };
          if (x instanceof HaveMetadata && y instanceof HaveMetadata) {
              return true;
          };
          if (x instanceof HaveCurrentData && y instanceof HaveCurrentData) {
              return true;
          };
          if (x instanceof HaveFutureData && y instanceof HaveFutureData) {
              return true;
          };
          if (x instanceof HaveEnoughData && y instanceof HaveEnoughData) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof HaveNothing && y instanceof HaveNothing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HaveNothing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HaveNothing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HaveMetadata && y instanceof HaveMetadata) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HaveMetadata) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HaveMetadata) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HaveCurrentData && y instanceof HaveCurrentData) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HaveCurrentData) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HaveCurrentData) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HaveFutureData && y instanceof HaveFutureData) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HaveFutureData) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HaveFutureData) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HaveEnoughData && y instanceof HaveEnoughData) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.ReadyState (line 15, column 1 - line 15, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, HaveNothing.value, HaveEnoughData.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 5, fromEnumReadyState, toEnumReadyState);
  exports["HaveNothing"] = HaveNothing;
  exports["HaveMetadata"] = HaveMetadata;
  exports["HaveCurrentData"] = HaveCurrentData;
  exports["HaveFutureData"] = HaveFutureData;
  exports["HaveEnoughData"] = HaveEnoughData;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMediaElement"] = $PS["Web.HTML.HTMLMediaElement"] || {};
  var exports = $PS["Web.HTML.HTMLMediaElement"];
  var $foreign = $PS["Web.HTML.HTMLMediaElement"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLMediaElement_CanPlayType = $PS["Web.HTML.HTMLMediaElement.CanPlayType"];
  var Web_HTML_HTMLMediaElement_NetworkState = $PS["Web.HTML.HTMLMediaElement.NetworkState"];
  var Web_HTML_HTMLMediaElement_ReadyState = $PS["Web.HTML.HTMLMediaElement.ReadyState"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var readyState = function (el) {
      return Data_Functor.map(Effect.functorEffect)((function () {
          var $0 = Data_Maybe.fromMaybe(Web_HTML_HTMLMediaElement_ReadyState.HaveNothing.value);
          var $1 = Data_Enum.toEnum(Web_HTML_HTMLMediaElement_ReadyState.boundedEnumReadyState);
          return function ($2) {
              return $0($1($2));
          };
      })())(function () {
          return $foreign["_readyState"](el);
      });
  };
  var networkState = function (el) {
      return Data_Functor.map(Effect.functorEffect)((function () {
          var $3 = Data_Maybe.fromMaybe(Web_HTML_HTMLMediaElement_NetworkState.Empty.value);
          var $4 = Data_Enum.toEnum(Web_HTML_HTMLMediaElement_NetworkState.boundedEnumNetworkState);
          return function ($5) {
              return $3($4($5));
          };
      })())(function () {
          return $foreign["_networkState"](el);
      });
  };
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
  var canPlayType = function (ty) {
      return function (el) {
          return Data_Functor.map(Effect.functorEffect)((function () {
              var $6 = Data_Maybe.fromMaybe(Web_HTML_HTMLMediaElement_CanPlayType.Unspecified.value);
              return function ($7) {
                  return $6(Web_HTML_HTMLMediaElement_CanPlayType.parse($7));
              };
          })())(function () {
              return $foreign["_canPlayType"](ty, el);
          });
      };
  };
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["networkState"] = networkState;
  exports["canPlayType"] = canPlayType;
  exports["readyState"] = readyState;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["currentSrc"] = $foreign.currentSrc;
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["preload"] = $foreign.preload;
  exports["setPreload"] = $foreign.setPreload;
  exports["load"] = $foreign.load;
  exports["seeking"] = $foreign.seeking;
  exports["currentTime"] = $foreign.currentTime;
  exports["setCurrentTime"] = $foreign.setCurrentTime;
  exports["duration"] = $foreign.duration;
  exports["getStartDate"] = $foreign.getStartDate;
  exports["paused"] = $foreign.paused;
  exports["defaultPlaybackRate"] = $foreign.defaultPlaybackRate;
  exports["setDefaultPlaybackRate"] = $foreign.setDefaultPlaybackRate;
  exports["playbackRate"] = $foreign.playbackRate;
  exports["setPlaybackRate"] = $foreign.setPlaybackRate;
  exports["ended"] = $foreign.ended;
  exports["autoplay"] = $foreign.autoplay;
  exports["setAutoplay"] = $foreign.setAutoplay;
  exports["loop"] = $foreign.loop;
  exports["setLoop"] = $foreign.setLoop;
  exports["play"] = $foreign.play;
  exports["pause"] = $foreign.pause;
  exports["mediaGroup"] = $foreign.mediaGroup;
  exports["setMediaGroup"] = $foreign.setMediaGroup;
  exports["controls"] = $foreign.controls;
  exports["setControls"] = $foreign.setControls;
  exports["volume"] = $foreign.volume;
  exports["setVolume"] = $foreign.setVolume;
  exports["muted"] = $foreign.muted;
  exports["setMuted"] = $foreign.setMuted;
  exports["defaultMuted"] = $foreign.defaultMuted;
  exports["setDefaultMuted"] = $foreign.setDefaultMuted;
})(PS);
(function(exports) {
  "use strict";

  exports.name = function (meta) {
    return function () {
      return meta.name;
    };
  };

  exports.setName = function (name) {
    return function (meta) {
      return function () {
        meta.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.httpEquiv = function (meta) {
    return function () {
      return meta.httpEquiv;
    };
  };

  exports.setHttpEquiv = function (httpEquiv) {
    return function (meta) {
      return function () {
        meta.httpEquiv = httpEquiv;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.content = function (meta) {
    return function () {
      return meta.content;
    };
  };

  exports.setContent = function (content) {
    return function (meta) {
      return function () {
        meta.content = content;
      };
    };
  };
})(PS["Web.HTML.HTMLMetaElement"] = PS["Web.HTML.HTMLMetaElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMetaElement"] = $PS["Web.HTML.HTMLMetaElement"] || {};
  var exports = $PS["Web.HTML.HTMLMetaElement"];
  var $foreign = $PS["Web.HTML.HTMLMetaElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["httpEquiv"] = $foreign.httpEquiv;
  exports["setHttpEquiv"] = $foreign.setHttpEquiv;
  exports["content"] = $foreign.content;
  exports["setContent"] = $foreign.setContent;
})(PS);
(function(exports) {
  "use strict";

  exports.value = function (meter) {
    return function () {
      return meter.value;
    };
  };

  exports.setValue = function (value) {
    return function (meter) {
      return function () {
        meter.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.min = function (meter) {
    return function () {
      return meter.min;
    };
  };

  exports.setMin = function (min) {
    return function (meter) {
      return function () {
        meter.min = min;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.max = function (meter) {
    return function () {
      return meter.max;
    };
  };

  exports.setMax = function (max) {
    return function (meter) {
      return function () {
        meter.max = max;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.low = function (meter) {
    return function () {
      return meter.low;
    };
  };

  exports.setLow = function (low) {
    return function (meter) {
      return function () {
        meter.low = low;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.high = function (meter) {
    return function () {
      return meter.high;
    };
  };

  exports.setHigh = function (high) {
    return function (meter) {
      return function () {
        meter.high = high;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.optimum = function (meter) {
    return function () {
      return meter.optimum;
    };
  };

  exports.setOptimum = function (optimum) {
    return function (meter) {
      return function () {
        meter.optimum = optimum;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (meter) {
    return function () {
      return meter.labels;
    };
  };
})(PS["Web.HTML.HTMLMeterElement"] = PS["Web.HTML.HTMLMeterElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLMeterElement"] = $PS["Web.HTML.HTMLMeterElement"] || {};
  var exports = $PS["Web.HTML.HTMLMeterElement"];
  var $foreign = $PS["Web.HTML.HTMLMeterElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["min"] = $foreign.min;
  exports["setMin"] = $foreign.setMin;
  exports["max"] = $foreign.max;
  exports["setMax"] = $foreign.setMax;
  exports["low"] = $foreign.low;
  exports["setLow"] = $foreign.setLow;
  exports["high"] = $foreign.high;
  exports["setHigh"] = $foreign.setHigh;
  exports["optimum"] = $foreign.optimum;
  exports["setOptimum"] = $foreign.setOptimum;
  exports["labels"] = $foreign.labels;
})(PS);
(function(exports) {
  "use strict";

  exports.cite = function (mod) {
    return function () {
      return mod.cite;
    };
  };

  exports.setCite = function (cite) {
    return function (mod) {
      return function () {
        mod.cite = cite;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dateTime = function (mod) {
    return function () {
      return mod.dateTime;
    };
  };

  exports.setDateTime = function (dateTime) {
    return function (mod) {
      return function () {
        mod.dateTime = dateTime;
      };
    };
  };
})(PS["Web.HTML.HTMLModElement"] = PS["Web.HTML.HTMLModElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLModElement"] = $PS["Web.HTML.HTMLModElement"] || {};
  var exports = $PS["Web.HTML.HTMLModElement"];
  var $foreign = $PS["Web.HTML.HTMLModElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["cite"] = $foreign.cite;
  exports["setCite"] = $foreign.setCite;
  exports["dateTime"] = $foreign.dateTime;
  exports["setDateTime"] = $foreign.setDateTime;
})(PS);
(function(exports) {
  "use strict";

  exports.reversed = function (ol) {
    return function () {
      return ol.reversed;
    };
  };

  exports.setReversed = function (reversed) {
    return function (ol) {
      return function () {
        ol.reversed = reversed;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.start = function (ol) {
    return function () {
      return ol.start;
    };
  };

  exports.setStart = function (start) {
    return function (ol) {
      return function () {
        ol.start = start;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (ol) {
    return function () {
      return ol.type;
    };
  };

  exports.setType = function (type) {
    return function (ol) {
      return function () {
        ol.type = type;
      };
    };
  };
})(PS["Web.HTML.HTMLOListElement"] = PS["Web.HTML.HTMLOListElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLOListElement"] = $PS["Web.HTML.HTMLOListElement"] || {};
  var exports = $PS["Web.HTML.HTMLOListElement"];
  var $foreign = $PS["Web.HTML.HTMLOListElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["reversed"] = $foreign.reversed;
  exports["setReversed"] = $foreign.setReversed;
  exports["start"] = $foreign.start;
  exports["setStart"] = $foreign.setStart;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
})(PS);
(function(exports) {
  "use strict";

  exports.data_ = function (object) {
    return function () {
      return object.data;
    };
  };

  exports.setData = function (data) {
    return function (object) {
      return function () {
        object.data = data;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (object) {
    return function () {
      return object.type;
    };
  };

  exports.setType = function (type) {
    return function (object) {
      return function () {
        object.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.typeMustMatch = function (object) {
    return function () {
      return object.typeMustMatch;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (object) {
    return function () {
      return object.name;
    };
  };

  exports.setName = function (name) {
    return function (object) {
      return function () {
        object.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.useMap = function (object) {
    return function () {
      return object.useMap;
    };
  };

  exports.setUseMap = function (useMap) {
    return function (object) {
      return function () {
        object.useMap = useMap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (object) {
    return function () {
      return object.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (object) {
    return function () {
      return object.width;
    };
  };

  exports.setWidth = function (width) {
    return function (object) {
      return function () {
        object.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (object) {
    return function () {
      return object.height;
    };
  };

  exports.setHeight = function (height) {
    return function (object) {
      return function () {
        object.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._contentDocument = function (object) {
    return function () {
      return object.contentDocument;
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (object) {
    return function () {
      return object.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (object) {
    return function () {
      return object.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (object) {
    return function () {
      return object.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (object) {
    return function () {
      return object.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (object) {
    return function () {
      return object.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (object) {
      return function () {
        object.setCustomValidity(value);
      };
    };
  };
})(PS["Web.HTML.HTMLObjectElement"] = PS["Web.HTML.HTMLObjectElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLObjectElement"] = $PS["Web.HTML.HTMLObjectElement"] || {};
  var exports = $PS["Web.HTML.HTMLObjectElement"];
  var $foreign = $PS["Web.HTML.HTMLObjectElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  var contentDocument = (function () {
      var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($3) {
          return $2($foreign["_contentDocument"]($3));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["contentDocument"] = contentDocument;
  exports["data_"] = $foreign.data_;
  exports["setData"] = $foreign.setData;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["typeMustMatch"] = $foreign.typeMustMatch;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["useMap"] = $foreign.useMap;
  exports["setUseMap"] = $foreign.setUseMap;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
})(PS);
(function(exports) {
  "use strict";

  exports.disabled = function (optgroup) {
    return function () {
      return optgroup.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (optgroup) {
      return function () {
        optgroup.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.label = function (optgroup) {
    return function () {
      return optgroup.label;
    };
  };

  exports.setLabel = function (label) {
    return function (optgroup) {
      return function () {
        optgroup.label = label;
      };
    };
  };
})(PS["Web.HTML.HTMLOptGroupElement"] = PS["Web.HTML.HTMLOptGroupElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLOptGroupElement"] = $PS["Web.HTML.HTMLOptGroupElement"] || {};
  var exports = $PS["Web.HTML.HTMLOptGroupElement"];
  var $foreign = $PS["Web.HTML.HTMLOptGroupElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["label"] = $foreign.label;
  exports["setLabel"] = $foreign.setLabel;
})(PS);
(function(exports) {
  "use strict";

  exports.disabled = function (option) {
    return function () {
      return option.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (option) {
      return function () {
        option.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (option) {
    return function () {
      return option.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.label = function (option) {
    return function () {
      return option.label;
    };
  };

  exports.setLabel = function (label) {
    return function (option) {
      return function () {
        option.label = label;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultSelected = function (option) {
    return function () {
      return option.defaultSelected;
    };
  };

  exports.setDefaultSelected = function (defaultSelected) {
    return function (option) {
      return function () {
        option.defaultSelected = defaultSelected;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selected = function (option) {
    return function () {
      return option.selected;
    };
  };

  exports.setSelected = function (selected) {
    return function (option) {
      return function () {
        option.selected = selected;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (option) {
    return function () {
      return option.value;
    };
  };

  exports.setValue = function (value) {
    return function (option) {
      return function () {
        option.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.text = function (option) {
    return function () {
      return option.text;
    };
  };

  exports.setText = function (text) {
    return function (option) {
      return function () {
        option.text = text;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.index = function (option) {
    return function () {
      return option.index;
    };
  };
})(PS["Web.HTML.HTMLOptionElement"] = PS["Web.HTML.HTMLOptionElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLOptionElement"] = $PS["Web.HTML.HTMLOptionElement"] || {};
  var exports = $PS["Web.HTML.HTMLOptionElement"];
  var $foreign = $PS["Web.HTML.HTMLOptionElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["label"] = $foreign.label;
  exports["setLabel"] = $foreign.setLabel;
  exports["defaultSelected"] = $foreign.defaultSelected;
  exports["setDefaultSelected"] = $foreign.setDefaultSelected;
  exports["selected"] = $foreign.selected;
  exports["setSelected"] = $foreign.setSelected;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["text"] = $foreign.text;
  exports["setText"] = $foreign.setText;
  exports["index"] = $foreign.index;
})(PS);
(function(exports) {
  "use strict";

  exports._form = function (output) {
    return function () {
      return output.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (output) {
    return function () {
      return output.name;
    };
  };

  exports.setName = function (name) {
    return function (output) {
      return function () {
        output.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (output) {
    return function () {
      return output.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultValue = function (output) {
    return function () {
      return output.defaultValue;
    };
  };

  exports.setDefaultValue = function (defaultValue) {
    return function (output) {
      return function () {
        output.defaultValue = defaultValue;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (output) {
    return function () {
      return output.value;
    };
  };

  exports.setValue = function (value) {
    return function (output) {
      return function () {
        output.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (output) {
    return function () {
      return output.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (output) {
    return function () {
      return output.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (output) {
    return function () {
      return output.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (output) {
    return function () {
      return output.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (output) {
    return function () {
      return output.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (output) {
      return function () {
        output.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (output) {
    return function () {
      return output.labels;
    };
  };
})(PS["Web.HTML.HTMLOutputElement"] = PS["Web.HTML.HTMLOutputElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLOutputElement"] = $PS["Web.HTML.HTMLOutputElement"] || {};
  var exports = $PS["Web.HTML.HTMLOutputElement"];
  var $foreign = $PS["Web.HTML.HTMLOutputElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["type_"] = $foreign.type_;
  exports["defaultValue"] = $foreign.defaultValue;
  exports["setDefaultValue"] = $foreign.setDefaultValue;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["labels"] = $foreign.labels;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLParagraphElement"] = $PS["Web.HTML.HTMLParagraphElement"] || {};
  var exports = $PS["Web.HTML.HTMLParagraphElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.name = function (param) {
    return function () {
      return param.name;
    };
  };

  exports.setName = function (name) {
    return function (param) {
      return function () {
        param.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (param) {
    return function () {
      return param.value;
    };
  };

  exports.setValue = function (value) {
    return function (param) {
      return function () {
        param.value = value;
      };
    };
  };
})(PS["Web.HTML.HTMLParamElement"] = PS["Web.HTML.HTMLParamElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLParamElement"] = $PS["Web.HTML.HTMLParamElement"] || {};
  var exports = $PS["Web.HTML.HTMLParamElement"];
  var $foreign = $PS["Web.HTML.HTMLParamElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLPreElement"] = $PS["Web.HTML.HTMLPreElement"] || {};
  var exports = $PS["Web.HTML.HTMLPreElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.value = function (progress) {
    return function () {
      return progress.value;
    };
  };

  exports.setValue = function (value) {
    return function (progress) {
      return function () {
        progress.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.max = function (progress) {
    return function () {
      return progress.max;
    };
  };

  exports.setMax = function (max) {
    return function (progress) {
      return function () {
        progress.max = max;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.position = function (progress) {
    return function () {
      return progress.position;
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (progress) {
    return function () {
      return progress.labels;
    };
  };
})(PS["Web.HTML.HTMLProgressElement"] = PS["Web.HTML.HTMLProgressElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLProgressElement"] = $PS["Web.HTML.HTMLProgressElement"] || {};
  var exports = $PS["Web.HTML.HTMLProgressElement"];
  var $foreign = $PS["Web.HTML.HTMLProgressElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["max"] = $foreign.max;
  exports["setMax"] = $foreign.setMax;
  exports["position"] = $foreign.position;
  exports["labels"] = $foreign.labels;
})(PS);
(function(exports) {
  "use strict";

  exports.cite = function (quote) {
    return function () {
      return quote.cite;
    };
  };

  exports.setCite = function (cite) {
    return function (quote) {
      return function () {
        quote.cite = cite;
      };
    };
  };
})(PS["Web.HTML.HTMLQuoteElement"] = PS["Web.HTML.HTMLQuoteElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLQuoteElement"] = $PS["Web.HTML.HTMLQuoteElement"] || {};
  var exports = $PS["Web.HTML.HTMLQuoteElement"];
  var $foreign = $PS["Web.HTML.HTMLQuoteElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["cite"] = $foreign.cite;
  exports["setCite"] = $foreign.setCite;
})(PS);
(function(exports) {
  "use strict";

  exports.src = function (script) {
    return function () {
      return script.src;
    };
  };

  exports.setSrc = function (src) {
    return function (script) {
      return function () {
        script.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (script) {
    return function () {
      return script.type;
    };
  };

  exports.setType = function (type) {
    return function (script) {
      return function () {
        script.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.charset = function (script) {
    return function () {
      return script.charset;
    };
  };

  exports.setCharset = function (charset) {
    return function (script) {
      return function () {
        script.charset = charset;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.async = function (script) {
    return function () {
      return script.async;
    };
  };

  exports.setAsync = function (async) {
    return function (script) {
      return function () {
        script.async = async;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defer = function (script) {
    return function () {
      return script.defer;
    };
  };

  exports.setDefer = function (defer) {
    return function (script) {
      return function () {
        script.defer = defer;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (script) {
    return function () {
      return script.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (script) {
      return function () {
        script.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.text = function (script) {
    return function () {
      return script.text;
    };
  };

  exports.setText = function (text) {
    return function (script) {
      return function () {
        script.text = text;
      };
    };
  };
})(PS["Web.HTML.HTMLScriptElement"] = PS["Web.HTML.HTMLScriptElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLScriptElement"] = $PS["Web.HTML.HTMLScriptElement"] || {};
  var exports = $PS["Web.HTML.HTMLScriptElement"];
  var $foreign = $PS["Web.HTML.HTMLScriptElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["charset"] = $foreign.charset;
  exports["setCharset"] = $foreign.setCharset;
  exports["async"] = $foreign.async;
  exports["setAsync"] = $foreign.setAsync;
  exports["defer"] = $foreign.defer;
  exports["setDefer"] = $foreign.setDefer;
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["text"] = $foreign.text;
  exports["setText"] = $foreign.setText;
})(PS);
(function(exports) {
  "use strict";

  exports.autofocus = function (select) {
    return function () {
      return select.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (select) {
      return function () {
        select.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (select) {
    return function () {
      return select.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (select) {
      return function () {
        select.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.multiple = function (select) {
    return function () {
      return select.multiple;
    };
  };

  exports.setMultiple = function (multiple) {
    return function (select) {
      return function () {
        select.multiple = multiple;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (select) {
    return function () {
      return select.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (select) {
    return function () {
      return select.name;
    };
  };

  exports.setName = function (name) {
    return function (select) {
      return function () {
        select.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.required = function (select) {
    return function () {
      return select.required;
    };
  };

  exports.setRequired = function (required) {
    return function (select) {
      return function () {
        select.required = required;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.size = function (select) {
    return function () {
      return select.size;
    };
  };

  exports.setSize = function (size) {
    return function (select) {
      return function () {
        select.size = size;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (select) {
    return function () {
      return select.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.length = function (select) {
    return function () {
      return select.length;
    };
  };

  exports.setLength = function (length) {
    return function (select) {
      return function () {
        select.length = length;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectedOptions = function (select) {
    return function () {
      return select.selectedOptions;
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectedIndex = function (select) {
    return function () {
      return select.selectedIndex;
    };
  };

  exports.setSelectedIndex = function (selectedIndex) {
    return function (select) {
      return function () {
        select.selectedIndex = selectedIndex;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (select) {
    return function () {
      return select.value;
    };
  };

  exports.setValue = function (value) {
    return function (select) {
      return function () {
        select.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (select) {
    return function () {
      return select.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (select) {
    return function () {
      return select.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (select) {
    return function () {
      return select.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (select) {
    return function () {
      return select.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (select) {
    return function () {
      return select.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (select) {
      return function () {
        select.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (select) {
    return function () {
      return select.labels;
    };
  };
})(PS["Web.HTML.HTMLSelectElement"] = PS["Web.HTML.HTMLSelectElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLSelectElement"] = $PS["Web.HTML.HTMLSelectElement"] || {};
  var exports = $PS["Web.HTML.HTMLSelectElement"];
  var $foreign = $PS["Web.HTML.HTMLSelectElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["autofocus"] = $foreign.autofocus;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["multiple"] = $foreign.multiple;
  exports["setMultiple"] = $foreign.setMultiple;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["required"] = $foreign.required;
  exports["setRequired"] = $foreign.setRequired;
  exports["size"] = $foreign.size;
  exports["setSize"] = $foreign.setSize;
  exports["type_"] = $foreign.type_;
  exports["length"] = $foreign.length;
  exports["setLength"] = $foreign.setLength;
  exports["selectedOptions"] = $foreign.selectedOptions;
  exports["selectedIndex"] = $foreign.selectedIndex;
  exports["setSelectedIndex"] = $foreign.setSelectedIndex;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["labels"] = $foreign.labels;
})(PS);
(function(exports) {
  "use strict";

  exports.src = function (source) {
    return function () {
      return source.src;
    };
  };

  exports.setSrc = function (src) {
    return function (source) {
      return function () {
        source.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (source) {
    return function () {
      return source.type;
    };
  };

  exports.setType = function (type) {
    return function (source) {
      return function () {
        source.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.media = function (source) {
    return function () {
      return source.media;
    };
  };

  exports.setMedia = function (media) {
    return function (source) {
      return function () {
        source.media = media;
      };
    };
  };
})(PS["Web.HTML.HTMLSourceElement"] = PS["Web.HTML.HTMLSourceElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLSourceElement"] = $PS["Web.HTML.HTMLSourceElement"] || {};
  var exports = $PS["Web.HTML.HTMLSourceElement"];
  var $foreign = $PS["Web.HTML.HTMLSourceElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
  exports["media"] = $foreign.media;
  exports["setMedia"] = $foreign.setMedia;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLSpanElement"] = $PS["Web.HTML.HTMLSpanElement"] || {};
  var exports = $PS["Web.HTML.HTMLSpanElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.media = function (style) {
    return function () {
      return style.media;
    };
  };

  exports.setMedia = function (media) {
    return function (style) {
      return function () {
        style.media = media;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (style) {
    return function () {
      return style.type;
    };
  };

  exports.setType = function (type) {
    return function (style) {
      return function () {
        style.type = type;
      };
    };
  };
})(PS["Web.HTML.HTMLStyleElement"] = PS["Web.HTML.HTMLStyleElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLStyleElement"] = $PS["Web.HTML.HTMLStyleElement"] || {};
  var exports = $PS["Web.HTML.HTMLStyleElement"];
  var $foreign = $PS["Web.HTML.HTMLStyleElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["media"] = $foreign.media;
  exports["setMedia"] = $foreign.setMedia;
  exports["type_"] = $foreign.type_;
  exports["setType"] = $foreign.setType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableCaptionElement"] = $PS["Web.HTML.HTMLTableCaptionElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableCaptionElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.colSpan = function (cell) {
    return function () {
      return cell.colSpan;
    };
  };

  exports.setColSpan = function (colSpan) {
    return function (cell) {
      return function () {
        cell.colSpan = colSpan;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rowSpan = function (cell) {
    return function () {
      return cell.rowSpan;
    };
  };

  exports.setRowSpan = function (rowSpan) {
    return function (cell) {
      return function () {
        cell.rowSpan = rowSpan;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.cellIndex = function (cell) {
    return function () {
      return cell.cellIndex;
    };
  };
})(PS["Web.HTML.HTMLTableCellElement"] = PS["Web.HTML.HTMLTableCellElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableCellElement"] = $PS["Web.HTML.HTMLTableCellElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableCellElement"];
  var $foreign = $PS["Web.HTML.HTMLTableCellElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["colSpan"] = $foreign.colSpan;
  exports["setColSpan"] = $foreign.setColSpan;
  exports["rowSpan"] = $foreign.rowSpan;
  exports["setRowSpan"] = $foreign.setRowSpan;
  exports["cellIndex"] = $foreign.cellIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.span = function (col) {
    return function () {
      return col.span;
    };
  };

  exports.setSpan = function (span) {
    return function (col) {
      return function () {
        col.span = span;
      };
    };
  };
})(PS["Web.HTML.HTMLTableColElement"] = PS["Web.HTML.HTMLTableColElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableColElement"] = $PS["Web.HTML.HTMLTableColElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableColElement"];
  var $foreign = $PS["Web.HTML.HTMLTableColElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["span"] = $foreign.span;
  exports["setSpan"] = $foreign.setSpan;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableDataCellElement"] = $PS["Web.HTML.HTMLTableDataCellElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableDataCellElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLTableCellElement = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromHTMLTableCellElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
  exports["fromHTMLTableCellElement"] = fromHTMLTableCellElement;
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLTableCellElement"] = toHTMLTableCellElement;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports._caption = function (table) {
    return function () {
      return table.caption;
    };
  };

  exports._setCaption = function (caption) {
    return function (table) {
      return function () {
        table.caption = caption;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.createCaption = function (table) {
    return function () {
      return table.createCaption();
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteCaption = function (table) {
    return function () {
      table.deleteCaption();
    };
  };

  // ----------------------------------------------------------------------------

  exports._tHead = function (table) {
    return function () {
      return table.tHead;
    };
  };

  exports._setTHead = function (tHead) {
    return function (table) {
      return function () {
        table.tHead = tHead;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.createTHead = function (table) {
    return function () {
      return table.createTHead();
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteTHead = function (table) {
    return function () {
      table.deleteTHead();
    };
  };

  // ----------------------------------------------------------------------------

  exports._tFoot = function (table) {
    return function () {
      return table.tFoot;
    };
  };

  exports._setTFoot = function (tFoot) {
    return function (table) {
      return function () {
        table.tFoot = tFoot;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.createTFoot = function (table) {
    return function () {
      return table.createTFoot();
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteTFoot = function (table) {
    return function () {
      table.deleteTFoot();
    };
  };

  // ----------------------------------------------------------------------------

  exports.tBodies = function (table) {
    return function () {
      return table.tBodies;
    };
  };

  // ----------------------------------------------------------------------------

  exports.createTBody = function (table) {
    return function () {
      return table.createTBody();
    };
  };

  // ----------------------------------------------------------------------------

  exports.rows = function (table) {
    return function () {
      return table.rows;
    };
  };

  // ----------------------------------------------------------------------------

  exports.insertRowAt = function (index) {
    return function (table) {
      return function () {
        return table.insertRow(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteRow = function (index) {
    return function (table) {
      return function () {
        table.deleteRow(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.border = function (table) {
    return function () {
      return table.border;
    };
  };

  exports.setBorder = function (border) {
    return function (table) {
      return function () {
        table.border = border;
      };
    };
  };
})(PS["Web.HTML.HTMLTableElement"] = PS["Web.HTML.HTMLTableElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableElement"] = $PS["Web.HTML.HTMLTableElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableElement"];
  var $foreign = $PS["Web.HTML.HTMLTableElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var tHead = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_tHead"]($1));
      };
  })();
  var tFoot = (function () {
      var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($3) {
          return $2($foreign["_tFoot"]($3));
      };
  })();
  var setTHead = function ($4) {
      return $foreign["_setTHead"](Data_Nullable.toNullable($4));
  };
  var setTFoot = function ($5) {
      return $foreign["_setTFoot"](Data_Nullable.toNullable($5));
  };
  var setCaption = function ($6) {
      return $foreign["_setCaption"](Data_Nullable.toNullable($6));
  };
  var insertRow$prime = $foreign.insertRowAt;
  var insertRow = insertRow$prime(-1 | 0);
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
  var caption = (function () {
      var $7 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($8) {
          return $7($foreign["_caption"]($8));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["caption"] = caption;
  exports["setCaption"] = setCaption;
  exports["tHead"] = tHead;
  exports["setTHead"] = setTHead;
  exports["tFoot"] = tFoot;
  exports["setTFoot"] = setTFoot;
  exports["insertRow"] = insertRow;
  exports["insertRow'"] = insertRow$prime;
  exports["createCaption"] = $foreign.createCaption;
  exports["deleteCaption"] = $foreign.deleteCaption;
  exports["createTHead"] = $foreign.createTHead;
  exports["deleteTHead"] = $foreign.deleteTHead;
  exports["createTFoot"] = $foreign.createTFoot;
  exports["deleteTFoot"] = $foreign.deleteTFoot;
  exports["tBodies"] = $foreign.tBodies;
  exports["createTBody"] = $foreign.createTBody;
  exports["rows"] = $foreign.rows;
  exports["deleteRow"] = $foreign.deleteRow;
  exports["border"] = $foreign.border;
  exports["setBorder"] = $foreign.setBorder;
})(PS);
(function(exports) {
  "use strict";

  exports.scope = function (cell) {
    return function () {
      return cell.scope;
    };
  };

  exports.setScope = function (scope) {
    return function (cell) {
      return function () {
        cell.scope = scope;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.abbr = function (cell) {
    return function () {
      return cell.abbr;
    };
  };

  exports.setAbbr = function (abbr) {
    return function (cell) {
      return function () {
        cell.abbr = abbr;
      };
    };
  };
})(PS["Web.HTML.HTMLTableHeaderCellElement"] = PS["Web.HTML.HTMLTableHeaderCellElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableHeaderCellElement"] = $PS["Web.HTML.HTMLTableHeaderCellElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableHeaderCellElement"];
  var $foreign = $PS["Web.HTML.HTMLTableHeaderCellElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLTableCellElement = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromHTMLTableCellElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
  exports["fromHTMLTableCellElement"] = fromHTMLTableCellElement;
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLTableCellElement"] = toHTMLTableCellElement;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["scope"] = $foreign.scope;
  exports["setScope"] = $foreign.setScope;
  exports["abbr"] = $foreign.abbr;
  exports["setAbbr"] = $foreign.setAbbr;
})(PS);
(function(exports) {
  "use strict";

  exports.rowIndex = function (row) {
    return function () {
      return row.rowIndex;
    };
  };

  // ----------------------------------------------------------------------------

  exports.sectionRowIndex = function (row) {
    return function () {
      return row.sectionRowIndex;
    };
  };

  // ----------------------------------------------------------------------------

  exports.cells = function (row) {
    return function () {
      return row.cells;
    };
  };

  // ----------------------------------------------------------------------------

  exports.cells = function (row) {
    return function () {
      return row.cells;
    };
  };

  // ----------------------------------------------------------------------------

  exports.insertCellAt = function (index) {
    return function (row) {
      return function () {
        return row.insertCell(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteCell = function (index) {
    return function (row) {
      return function () {
        row.deleteCell(index);
      };
    };
  };
})(PS["Web.HTML.HTMLTableRowElement"] = PS["Web.HTML.HTMLTableRowElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableRowElement"] = $PS["Web.HTML.HTMLTableRowElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableRowElement"];
  var $foreign = $PS["Web.HTML.HTMLTableRowElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var insertCell$prime = $foreign.insertCellAt;
  var insertCell = insertCell$prime(-1 | 0);
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["insertCell"] = insertCell;
  exports["insertCell'"] = insertCell$prime;
  exports["rowIndex"] = $foreign.rowIndex;
  exports["sectionRowIndex"] = $foreign.sectionRowIndex;
  exports["cells"] = $foreign.cells;
  exports["deleteCell"] = $foreign.deleteCell;
})(PS);
(function(exports) {
  "use strict";

  exports.rows = function (section) {
    return function () {
      return section.rows;
    };
  };

  // ----------------------------------------------------------------------------

  exports.insertRowAt = function (index) {
    return function (section) {
      return function () {
        return section.insertRow(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteRow = function (index) {
    return function (section) {
      return function () {
        section.deleteRow(index);
      };
    };
  };
})(PS["Web.HTML.HTMLTableSectionElement"] = PS["Web.HTML.HTMLTableSectionElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTableSectionElement"] = $PS["Web.HTML.HTMLTableSectionElement"] || {};
  var exports = $PS["Web.HTML.HTMLTableSectionElement"];
  var $foreign = $PS["Web.HTML.HTMLTableSectionElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var insertRow$prime = $foreign.insertRowAt;
  var insertRow = insertRow$prime(-1 | 0);
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["insertRow"] = insertRow;
  exports["insertRow'"] = insertRow$prime;
  exports["rows"] = $foreign.rows;
  exports["deleteRow"] = $foreign.deleteRow;
})(PS);
(function(exports) {
  "use strict";

  exports.content = function (template) {
    return function () {
      return template.content;
    };
  };
})(PS["Web.HTML.HTMLTemplateElement"] = PS["Web.HTML.HTMLTemplateElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTemplateElement"] = $PS["Web.HTML.HTMLTemplateElement"] || {};
  var exports = $PS["Web.HTML.HTMLTemplateElement"];
  var $foreign = $PS["Web.HTML.HTMLTemplateElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["content"] = $foreign.content;
})(PS);
(function(exports) {
  "use strict";

  exports.autocomplete = function (textarea) {
    return function () {
      return textarea.autocomplete;
    };
  };

  exports.setAutocomplete = function (autocomplete) {
    return function (textarea) {
      return function () {
        textarea.autocomplete = autocomplete;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autofocus = function (textarea) {
    return function () {
      return textarea.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (textarea) {
      return function () {
        textarea.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.cols = function (textarea) {
    return function () {
      return textarea.cols;
    };
  };

  exports.setCols = function (cols) {
    return function (textarea) {
      return function () {
        textarea.cols = cols;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dirName = function (textarea) {
    return function () {
      return textarea.dirName;
    };
  };

  exports.setDirName = function (dirName) {
    return function (textarea) {
      return function () {
        textarea.dirName = dirName;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (textarea) {
    return function () {
      return textarea.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (textarea) {
      return function () {
        textarea.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (textarea) {
    return function () {
      return textarea.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.maxLength = function (textarea) {
    return function () {
      return textarea.maxLength;
    };
  };

  exports.setMaxLength = function (maxLength) {
    return function (textarea) {
      return function () {
        textarea.maxLength = maxLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.minLength = function (textarea) {
    return function () {
      return textarea.minLength;
    };
  };

  exports.setMinLength = function (minLength) {
    return function (textarea) {
      return function () {
        textarea.minLength = minLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (textarea) {
    return function () {
      return textarea.name;
    };
  };

  exports.setName = function (name) {
    return function (textarea) {
      return function () {
        textarea.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.placeholder = function (textarea) {
    return function () {
      return textarea.placeholder;
    };
  };

  exports.setPlaceholder = function (placeholder) {
    return function (textarea) {
      return function () {
        textarea.placeholder = placeholder;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.readOnly = function (textarea) {
    return function () {
      return textarea.readOnly;
    };
  };

  exports.setReadOnly = function (readOnly) {
    return function (textarea) {
      return function () {
        textarea.readOnly = readOnly;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.required = function (textarea) {
    return function () {
      return textarea.required;
    };
  };

  exports.setRequired = function (required) {
    return function (textarea) {
      return function () {
        textarea.required = required;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rows = function (textarea) {
    return function () {
      return textarea.rows;
    };
  };

  exports.setRows = function (rows) {
    return function (textarea) {
      return function () {
        textarea.rows = rows;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.wrap = function (textarea) {
    return function () {
      return textarea.wrap;
    };
  };

  exports.setWrap = function (wrap) {
    return function (textarea) {
      return function () {
        textarea.wrap = wrap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (textarea) {
    return function () {
      return textarea.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultValue = function (textarea) {
    return function () {
      return textarea.defaultValue;
    };
  };

  exports.setDefaultValue = function (defaultValue) {
    return function (textarea) {
      return function () {
        textarea.defaultValue = defaultValue;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (textarea) {
    return function () {
      return textarea.value;
    };
  };

  exports.setValue = function (value) {
    return function (textarea) {
      return function () {
        textarea.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.textLength = function (textarea) {
    return function () {
      return textarea.textLength;
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (textarea) {
    return function () {
      return textarea.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (textarea) {
    return function () {
      return textarea.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (textarea) {
    return function () {
      return textarea.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (textarea) {
    return function () {
      return textarea.checkValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reportValidity = function (textarea) {
    return function () {
      return textarea.reportValidity();
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (textarea) {
      return function () {
        textarea.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (textarea) {
    return function () {
      return textarea.labels;
    };
  };

  // ----------------------------------------------------------------------------

  exports.select = function (textarea) {
    return function () {
      textarea.select();
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionStart = function (textarea) {
    return function () {
      return textarea.selectionStart;
    };
  };

  exports.setSelectionStart = function (selectionStart) {
    return function (textarea) {
      return function () {
        textarea.selectionStart = selectionStart;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionEnd = function (textarea) {
    return function () {
      return textarea.selectionEnd;
    };
  };

  exports.setSelectionEnd = function (selectionEnd) {
    return function (textarea) {
      return function () {
        textarea.selectionEnd = selectionEnd;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionDirection = function (textarea) {
    return function () {
      return textarea.selectionDirection;
    };
  };

  exports.setSelectionDirection = function (selectionDirection) {
    return function (textarea) {
      return function () {
        textarea.selectionDirection = selectionDirection;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.setRangeText = function (replacement) {
    return function (textarea) {
      return function () {
        textarea.setRangeText(replacement);
      };
    };
  };

  exports._setRangeText = function (replacement, start, end, selectionMode, textarea) {
    textarea.setRangeText(replacement, start, end, selectionMode);
  };

  // ----------------------------------------------------------------------------

  exports.setSelectionRange = function (start) {
    return function (end) {
      return function (direction) {
        return function (textarea) {
          return function () {
            textarea.setSelectionRange(start, end, direction);
          };
        };
      };
    };
  };
})(PS["Web.HTML.HTMLTextAreaElement"] = PS["Web.HTML.HTMLTextAreaElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTextAreaElement"] = $PS["Web.HTML.HTMLTextAreaElement"] || {};
  var exports = $PS["Web.HTML.HTMLTextAreaElement"];
  var $foreign = $PS["Web.HTML.HTMLTextAreaElement"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_SelectionMode = $PS["Web.HTML.SelectionMode"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var setRangeText$prime = function (rpl) {
      return function (s) {
          return function (e) {
              return function (mode) {
                  return function (area) {
                      return function () {
                          return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                      };
                  };
              };
          };
      };
  };
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
  var form = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_form"]($1));
      };
  })();
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["form"] = form;
  exports["setRangeText'"] = setRangeText$prime;
  exports["autocomplete"] = $foreign.autocomplete;
  exports["setAutocomplete"] = $foreign.setAutocomplete;
  exports["autofocus"] = $foreign.autofocus;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["cols"] = $foreign.cols;
  exports["setCols"] = $foreign.setCols;
  exports["dirName"] = $foreign.dirName;
  exports["setDirName"] = $foreign.setDirName;
  exports["disabled"] = $foreign.disabled;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["maxLength"] = $foreign.maxLength;
  exports["setMaxLength"] = $foreign.setMaxLength;
  exports["minLength"] = $foreign.minLength;
  exports["setMinLength"] = $foreign.setMinLength;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["placeholder"] = $foreign.placeholder;
  exports["setPlaceholder"] = $foreign.setPlaceholder;
  exports["readOnly"] = $foreign.readOnly;
  exports["setReadOnly"] = $foreign.setReadOnly;
  exports["required"] = $foreign.required;
  exports["setRequired"] = $foreign.setRequired;
  exports["rows"] = $foreign.rows;
  exports["setRows"] = $foreign.setRows;
  exports["wrap"] = $foreign.wrap;
  exports["setWrap"] = $foreign.setWrap;
  exports["type_"] = $foreign.type_;
  exports["defaultValue"] = $foreign.defaultValue;
  exports["setDefaultValue"] = $foreign.setDefaultValue;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["textLength"] = $foreign.textLength;
  exports["willValidate"] = $foreign.willValidate;
  exports["validity"] = $foreign.validity;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["reportValidity"] = $foreign.reportValidity;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["labels"] = $foreign.labels;
  exports["select"] = $foreign.select;
  exports["selectionStart"] = $foreign.selectionStart;
  exports["setSelectionStart"] = $foreign.setSelectionStart;
  exports["selectionEnd"] = $foreign.selectionEnd;
  exports["setSelectionEnd"] = $foreign.setSelectionEnd;
  exports["selectionDirection"] = $foreign.selectionDirection;
  exports["setSelectionDirection"] = $foreign.setSelectionDirection;
  exports["setRangeText"] = $foreign.setRangeText;
  exports["setSelectionRange"] = $foreign.setSelectionRange;
})(PS);
(function(exports) {
  "use strict";

  exports.dateTime = function (time) {
    return function () {
      return time.dateTime;
    };
  };

  exports.setDateTime = function (dateTime) {
    return function (time) {
      return function () {
        time.dateTime = dateTime;
      };
    };
  };
})(PS["Web.HTML.HTMLTimeElement"] = PS["Web.HTML.HTMLTimeElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTimeElement"] = $PS["Web.HTML.HTMLTimeElement"] || {};
  var exports = $PS["Web.HTML.HTMLTimeElement"];
  var $foreign = $PS["Web.HTML.HTMLTimeElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["dateTime"] = $foreign.dateTime;
  exports["setDateTime"] = $foreign.setDateTime;
})(PS);
(function(exports) {
  "use strict";

  exports.text = function (title) {
    return function () {
      return title.text;
    };
  };

  exports.setText = function (text) {
    return function (title) {
      return function () {
        title.text = text;
      };
    };
  };
})(PS["Web.HTML.HTMLTitleElement"] = PS["Web.HTML.HTMLTitleElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTitleElement"] = $PS["Web.HTML.HTMLTitleElement"] || {};
  var exports = $PS["Web.HTML.HTMLTitleElement"];
  var $foreign = $PS["Web.HTML.HTMLTitleElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["text"] = $foreign.text;
  exports["setText"] = $foreign.setText;
})(PS);
(function(exports) {
  "use strict";

  exports.kind = function (track) {
    return function () {
      return track.kind;
    };
  };

  exports.setKind = function (kind) {
    return function (track) {
      return function () {
        track.kind = kind;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.src = function (track) {
    return function () {
      return track.src;
    };
  };

  exports.setSrc = function (src) {
    return function (track) {
      return function () {
        track.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.srclang = function (track) {
    return function () {
      return track.srclang;
    };
  };

  exports.setSrclang = function (srclang) {
    return function (track) {
      return function () {
        track.srclang = srclang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.label = function (track) {
    return function () {
      return track.label;
    };
  };

  exports.setLabel = function (label) {
    return function (track) {
      return function () {
        track.label = label;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports["default"] = function (track) {
    return function () {
      return track["default"];
    };
  };

  exports.setDefault = function (def) {
    return function (track) {
      return function () {
        track["default"] = def;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._readyState = function (track) {
    return track.readyState;
  };
})(PS["Web.HTML.HTMLTrackElement"] = PS["Web.HTML.HTMLTrackElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTrackElement.ReadyState"] = $PS["Web.HTML.HTMLTrackElement.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLTrackElement.ReadyState"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Loaded = (function () {
      function Loaded() {

      };
      Loaded.value = new Loaded();
      return Loaded;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(None.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Loaded.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just($$Error.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof None) {
          return "None";
      };
      if (v instanceof Loading) {
          return "Loading";
      };
      if (v instanceof Loaded) {
          return "Loaded";
      };
      if (v instanceof $$Error) {
          return "Error";
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLTrackElement.ReadyState (line 29, column 1 - line 33, column 23): " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof None) {
          return 0;
      };
      if (v instanceof Loading) {
          return 1;
      };
      if (v instanceof Loaded) {
          return 2;
      };
      if (v instanceof $$Error) {
          return 3;
      };
      throw new Error("Failed pattern match at Web.HTML.HTMLTrackElement.ReadyState (line 46, column 3 - line 50, column 15): " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return true;
          };
          if (x instanceof Loading && y instanceof Loading) {
              return true;
          };
          if (x instanceof Loaded && y instanceof Loaded) {
              return true;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof None) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof None) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Loading) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Loading) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Loaded && y instanceof Loaded) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Loaded) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Loaded) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.HTMLTrackElement.ReadyState (line 14, column 1 - line 14, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, None.value, $$Error.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 4, fromEnumReadyState, toEnumReadyState);
  exports["None"] = None;
  exports["Loading"] = Loading;
  exports["Loaded"] = Loaded;
  exports["Error"] = $$Error;
  exports["toEnumReadyState"] = toEnumReadyState;
  exports["fromEnumReadyState"] = fromEnumReadyState;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLTrackElement"] = $PS["Web.HTML.HTMLTrackElement"] || {};
  var exports = $PS["Web.HTML.HTMLTrackElement"];
  var $foreign = $PS["Web.HTML.HTMLTrackElement"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLTrackElement_ReadyState = $PS["Web.HTML.HTMLTrackElement.ReadyState"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var readyState = function (el) {
      return Data_Functor.map(Effect.functorEffect)((function () {
          var $0 = Data_Maybe.fromMaybe(Web_HTML_HTMLTrackElement_ReadyState.None.value);
          var $1 = Data_Enum.toEnum(Web_HTML_HTMLTrackElement_ReadyState.boundedEnumReadyState);
          return function ($2) {
              return $0($1($2));
          };
      })())(function () {
          return $foreign["_readyState"](el);
      });
  };
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["readyState"] = readyState;
  exports["kind"] = $foreign.kind;
  exports["setKind"] = $foreign.setKind;
  exports["src"] = $foreign.src;
  exports["setSrc"] = $foreign.setSrc;
  exports["srclang"] = $foreign.srclang;
  exports["setSrclang"] = $foreign.setSrclang;
  exports["label"] = $foreign.label;
  exports["setLabel"] = $foreign.setLabel;
  exports["default"] = $foreign["default"];
  exports["setDefault"] = $foreign.setDefault;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLUListElement"] = $PS["Web.HTML.HTMLUListElement"] || {};
  var exports = $PS["Web.HTML.HTMLUListElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.width = function (video) {
    return function () {
      return video.width;
    };
  };

  exports.setWidth = function (width) {
    return function (video) {
      return function () {
        video.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (video) {
    return function () {
      return video.height;
    };
  };

  exports.setHeight = function (height) {
    return function (video) {
      return function () {
        video.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.videoWidth = function (video) {
    return function () {
      return video.videoWidth;
    };
  };

  // ----------------------------------------------------------------------------

  exports.videoHeight = function (video) {
    return function () {
      return video.videoHeight;
    };
  };

  // ----------------------------------------------------------------------------

  exports.poster = function (video) {
    return function () {
      return video.poster;
    };
  };

  exports.setPoster = function (poster) {
    return function (video) {
      return function () {
        video.poster = poster;
      };
    };
  };
})(PS["Web.HTML.HTMLVideoElement"] = PS["Web.HTML.HTMLVideoElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLVideoElement"] = $PS["Web.HTML.HTMLVideoElement"] || {};
  var exports = $PS["Web.HTML.HTMLVideoElement"];
  var $foreign = $PS["Web.HTML.HTMLVideoElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toHTMLMediaElement = Unsafe_Coerce.unsafeCoerce;
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromHTMLMediaElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
  exports["fromHTMLMediaElement"] = fromHTMLMediaElement;
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLMediaElement"] = toHTMLMediaElement;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toElement"] = toElement;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
  exports["width"] = $foreign.width;
  exports["setWidth"] = $foreign.setWidth;
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
  exports["videoWidth"] = $foreign.videoWidth;
  exports["videoHeight"] = $foreign.videoHeight;
  exports["poster"] = $foreign.poster;
  exports["setPoster"] = $foreign.setPoster;
})(PS);
(function(exports) {
  "use strict";

  exports.back = function(history) {
    return function() {
      return history.back();
    };
  };
  exports.forward = function(history) {
    return function() {
      return history.forward();
    };
  };
  exports.go = function(delta) {
    return function(history) {
      return function() {
        return history.go(delta);
      };
    };
  };
  exports.pushState = function(a) {
    return function(docTitle) {
      return function(url) {
        return function(history) {
          return function() {
            return history.pushState(a, docTitle, url);
          };
        };
      };
    };
  };
  exports.replaceState = function(a) {
    return function(docTitle) {
      return function(url) {
        return function(history) {
          return function() {
            return history.replaceState(a, docTitle, url);
          };
        };
      };
    };
  };
  exports.state = function(history) {
    return function() {
      return history.state;
    };
  };
})(PS["Web.HTML.History"] = PS["Web.HTML.History"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.History"] = $PS["Web.HTML.History"] || {};
  var exports = $PS["Web.HTML.History"];
  var $foreign = $PS["Web.HTML.History"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];                
  var URL = function (x) {
      return x;
  };
  var DocumentTitle = function (x) {
      return x;
  };
  var Delta = function (x) {
      return x;
  };
  var newtypeURL = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeDocumentTitle = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeDelta = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eqURL = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordURL = new Data_Ord.Ord(function () {
      return eqURL;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqDocumentTitle = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordDocumentTitle = new Data_Ord.Ord(function () {
      return eqDocumentTitle;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqDelta = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordDelta = new Data_Ord.Ord(function () {
      return eqDelta;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  exports["DocumentTitle"] = DocumentTitle;
  exports["Delta"] = Delta;
  exports["URL"] = URL;
  exports["eqDocumentTitle"] = eqDocumentTitle;
  exports["ordDocumentTitle"] = ordDocumentTitle;
  exports["newtypeDocumentTitle"] = newtypeDocumentTitle;
  exports["eqDelta"] = eqDelta;
  exports["ordDelta"] = ordDelta;
  exports["newtypeDelta"] = newtypeDelta;
  exports["eqURL"] = eqURL;
  exports["ordURL"] = ordURL;
  exports["newtypeURL"] = newtypeURL;
  exports["back"] = $foreign.back;
  exports["forward"] = $foreign.forward;
  exports["go"] = $foreign.go;
  exports["pushState"] = $foreign.pushState;
  exports["replaceState"] = $foreign.replaceState;
  exports["state"] = $foreign.state;
})(PS);
(function(exports) {
  "use strict";

  exports.hash = function (location) {
    return function () {
      return location.hash;
    };
  };

  exports.setHash = function (hash) {
    return function (location) {
      return function () {
        location.hash = hash;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.host = function (location) {
    return function () {
      return location.host;
    };
  };

  exports.setHost = function (host) {
    return function (location) {
      return function () {
        location.host = host;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hostname = function (location) {
    return function () {
      return location.hostname;
    };
  };

  exports.setHostname = function (hostname) {
    return function (location) {
      return function () {
        location.hostname = hostname;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.href = function (location) {
    return function () {
      return location.href;
    };
  };

  exports.setHref = function (href) {
    return function (location) {
      return function () {
        location.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.origin = function (location) {
    return function () {
      return location.origin;
    };
  };

  exports.setOrigin = function (origin) {
    return function (location) {
      return function () {
        location.origin = origin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.pathname = function (location) {
    return function () {
      return location.pathname;
    };
  };

  exports.setPathname = function (pathname) {
    return function (location) {
      return function () {
        location.pathname = pathname;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.port = function (location) {
    return function () {
      return location.port;
    };
  };

  exports.setPort = function (port) {
    return function (location) {
      return function () {
        location.port = port;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.protocol = function (location) {
    return function () {
      return location.protocol;
    };
  };

  exports.setProtocol = function (protocol) {
    return function (location) {
      return function () {
        location.protocol = protocol;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.search = function (location) {
    return function () {
      return location.search;
    };
  };

  exports.setSearch = function (search) {
    return function (location) {
      return function () {
        location.search = search;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.assign = function (url) {
    return function (location) {
      return function () {
        location.assign(url);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.replace = function (url) {
    return function (location) {
      return function () {
        location.replace(url);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.reload = function (location) {
    return function () {
      location.reload();
    };
  };
})(PS["Web.HTML.Location"] = PS["Web.HTML.Location"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Location"] = $PS["Web.HTML.Location"] || {};
  var exports = $PS["Web.HTML.Location"];
  var $foreign = $PS["Web.HTML.Location"];
  exports["hash"] = $foreign.hash;
  exports["setHash"] = $foreign.setHash;
  exports["host"] = $foreign.host;
  exports["setHost"] = $foreign.setHost;
  exports["hostname"] = $foreign.hostname;
  exports["setHostname"] = $foreign.setHostname;
  exports["href"] = $foreign.href;
  exports["setHref"] = $foreign.setHref;
  exports["origin"] = $foreign.origin;
  exports["setOrigin"] = $foreign.setOrigin;
  exports["pathname"] = $foreign.pathname;
  exports["setPathname"] = $foreign.setPathname;
  exports["port"] = $foreign.port;
  exports["setPort"] = $foreign.setPort;
  exports["protocol"] = $foreign.protocol;
  exports["setProtocol"] = $foreign.setProtocol;
  exports["search"] = $foreign.search;
  exports["setSearch"] = $foreign.setSearch;
  exports["assign"] = $foreign.assign;
  exports["replace"] = $foreign.replace;
  exports["reload"] = $foreign.reload;
})(PS);
(function(exports) {
  "use strict";

  exports.language = function (navigator) {
    return function () {
      return navigator.language;
    };
  };

  exports.platform = function (navigator) {
    return function () {
      return navigator.platform;
    };
  };

  exports.userAgent = function (navigator) {
    return function () {
      return navigator.userAgent;
    };
  };
})(PS["Web.HTML.Navigator"] = PS["Web.HTML.Navigator"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Navigator"] = $PS["Web.HTML.Navigator"] || {};
  var exports = $PS["Web.HTML.Navigator"];
  var $foreign = $PS["Web.HTML.Navigator"];
  exports["language"] = $foreign.language;
  exports["platform"] = $foreign.platform;
  exports["userAgent"] = $foreign.userAgent;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.navigator = function (window) {
    return function () {
      return window.navigator;
    };
  };

  exports.location = function (window) {
    return function () {
      return window.location;
    };
  };

  exports.history = function(window) {
    return function() {
      return window.history;
    };
  };

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };

  exports.alert = function (str) {
    return function (window) {
      return function () {
        window.alert(str);
      };
    };
  };

  exports.confirm = function (str) {
    return function (window) {
      return function () {
        return window.confirm(str);
      };
    };
  };

  exports.moveBy = function (xDelta) {
    return function (yDelta) {
      return function (window) {
        return function () {
          window.moveBy(xDelta, yDelta);
        };
      };
    };
  };

  exports.moveTo = function (width) {
    return function (height) {
      return function (window) {
        return function () {
          window.moveTo(width, height);
        };
      };
    };
  };

  exports._open = function (url) {
    return function (name) {
      return function (features) {
        return function (window) {
          return function () {
            return window.open(url, name, features);
          };
        };
      };
    };
  };

  exports.outerHeight = function (window) {
    return function () {
      return window.outerHeight;
    };
  };

  exports.outerWidth = function (window) {
    return function () {
      return window.outerWidth;
    };
  };

  exports.print = function (window) {
    return function () {
      window.print();
    };
  };

  exports._prompt = function (str) {
    return function (defaultText) {
      return function (window) {
        return function () {
          return window.prompt(str, defaultText);
        };
      };
    };
  };

  exports.resizeBy = function (xDelta) {
    return function (yDelta) {
      return function (window) {
        return function () {
          window.resizeBy(xDelta, yDelta);
        };
      };
    };
  };

  exports.resizeTo = function (width) {
    return function (height) {
      return function (window) {
        return function () {
          window.resizeTo(width, height);
        };
      };
    };
  };

  exports.screenX = function (window) {
    return function () {
      return window.screenX;
    };
  };

  exports.screenY = function (window) {
    return function () {
      return window.screenY;
    };
  };

  exports.scroll = function (xCoord) {
    return function (yCoord) {
      return function (window) {
        return function () {
          window.scroll(xCoord, yCoord);
        };
      };
    };
  };

  exports.scrollBy = function (xCoord) {
    return function (yCoord) {
      return function (window) {
        return function () {
          window.scrollBy(xCoord, yCoord);
        };
      };
    };
  };

  exports.scrollX = function (window) {
    return function () {
      return window.scrollX;
    };
  };

  exports.scrollY = function (window) {
    return function () {
      return window.scrollY;
    };
  };

  exports.localStorage = function (window) {
    return function () {
      return window.localStorage;
    };
  };

  exports.sessionStorage = function (window) {
    return function () {
      return window.sessionStorage;
    };
  };

  exports.requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };

  exports.cancelAnimationFrame = function(id) {
    return function(window) {
      return function() {
        return window.cancelAnimationFrame(id);
      };
    };
  };

  exports.requestIdleCallback = function(opts) {
    return function(fn) {
      return function(window) {
        return function() {
          return window.requestIdleCallback(fn, opts);
        };
      };
    };
  };

  exports.cancelIdleCallback = function(id) {
    return function(window) {
      return function() {
        return window.cancelIdleCallback(id);
      };
    };
  };

  exports.parent = function(window) {
    return function() {
      return window.parent;
    };
  };

  exports._opener = function(window) {
    return function() {
      return window.opener;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var RequestIdleCallbackId = function (x) {
      return x;
  };
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var promptDefault = function (msg) {
      return function (defaultText) {
          return function (window) {
              return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window));
          };
      };
  };
  var prompt = function (msg) {
      return function (window) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window));
      };
  };
  var opener = function (window) {
      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window));
  };
  var open = function (url$prime) {
      return function (name) {
          return function (features) {
              return function (window) {
                  return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window));
              };
          };
      };
  };
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Window");
  var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
      return eqRequestIdleCallbackId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
      return eqRequestAnimationFrameId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  exports["toEventTarget"] = toEventTarget;
  exports["fromEventTarget"] = fromEventTarget;
  exports["open"] = open;
  exports["prompt"] = prompt;
  exports["promptDefault"] = promptDefault;
  exports["opener"] = opener;
  exports["eqRequestAnimationFrameId"] = eqRequestAnimationFrameId;
  exports["ordRequestAnimationFrameId"] = ordRequestAnimationFrameId;
  exports["eqRequestIdleCallbackId"] = eqRequestIdleCallbackId;
  exports["ordRequestIdleCallbackId"] = ordRequestIdleCallbackId;
  exports["document"] = $foreign.document;
  exports["navigator"] = $foreign.navigator;
  exports["location"] = $foreign.location;
  exports["history"] = $foreign.history;
  exports["innerWidth"] = $foreign.innerWidth;
  exports["innerHeight"] = $foreign.innerHeight;
  exports["alert"] = $foreign.alert;
  exports["confirm"] = $foreign.confirm;
  exports["moveBy"] = $foreign.moveBy;
  exports["moveTo"] = $foreign.moveTo;
  exports["outerHeight"] = $foreign.outerHeight;
  exports["outerWidth"] = $foreign.outerWidth;
  exports["print"] = $foreign.print;
  exports["resizeBy"] = $foreign.resizeBy;
  exports["resizeTo"] = $foreign.resizeTo;
  exports["screenX"] = $foreign.screenX;
  exports["screenY"] = $foreign.screenY;
  exports["scroll"] = $foreign.scroll;
  exports["scrollBy"] = $foreign.scrollBy;
  exports["scrollX"] = $foreign.scrollX;
  exports["scrollY"] = $foreign.scrollY;
  exports["localStorage"] = $foreign.localStorage;
  exports["sessionStorage"] = $foreign.sessionStorage;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
  exports["cancelAnimationFrame"] = $foreign.cancelAnimationFrame;
  exports["requestIdleCallback"] = $foreign.requestIdleCallback;
  exports["cancelIdleCallback"] = $foreign.cancelIdleCallback;
  exports["parent"] = $foreign.parent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];
  var Web_HTML_HTMLAnchorElement = $PS["Web.HTML.HTMLAnchorElement"];
  var Web_HTML_HTMLAreaElement = $PS["Web.HTML.HTMLAreaElement"];
  var Web_HTML_HTMLAudioElement = $PS["Web.HTML.HTMLAudioElement"];
  var Web_HTML_HTMLBRElement = $PS["Web.HTML.HTMLBRElement"];
  var Web_HTML_HTMLBaseElement = $PS["Web.HTML.HTMLBaseElement"];
  var Web_HTML_HTMLBodyElement = $PS["Web.HTML.HTMLBodyElement"];
  var Web_HTML_HTMLButtonElement = $PS["Web.HTML.HTMLButtonElement"];
  var Web_HTML_HTMLCanvasElement = $PS["Web.HTML.HTMLCanvasElement"];
  var Web_HTML_HTMLDListElement = $PS["Web.HTML.HTMLDListElement"];
  var Web_HTML_HTMLDataElement = $PS["Web.HTML.HTMLDataElement"];
  var Web_HTML_HTMLDataListElement = $PS["Web.HTML.HTMLDataListElement"];
  var Web_HTML_HTMLDivElement = $PS["Web.HTML.HTMLDivElement"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLEmbedElement = $PS["Web.HTML.HTMLEmbedElement"];
  var Web_HTML_HTMLFieldSetElement = $PS["Web.HTML.HTMLFieldSetElement"];
  var Web_HTML_HTMLFormElement = $PS["Web.HTML.HTMLFormElement"];
  var Web_HTML_HTMLHRElement = $PS["Web.HTML.HTMLHRElement"];
  var Web_HTML_HTMLHeadElement = $PS["Web.HTML.HTMLHeadElement"];
  var Web_HTML_HTMLHeadingElement = $PS["Web.HTML.HTMLHeadingElement"];
  var Web_HTML_HTMLIFrameElement = $PS["Web.HTML.HTMLIFrameElement"];
  var Web_HTML_HTMLImageElement = $PS["Web.HTML.HTMLImageElement"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_HTMLKeygenElement = $PS["Web.HTML.HTMLKeygenElement"];
  var Web_HTML_HTMLLIElement = $PS["Web.HTML.HTMLLIElement"];
  var Web_HTML_HTMLLabelElement = $PS["Web.HTML.HTMLLabelElement"];
  var Web_HTML_HTMLLegendElement = $PS["Web.HTML.HTMLLegendElement"];
  var Web_HTML_HTMLLinkElement = $PS["Web.HTML.HTMLLinkElement"];
  var Web_HTML_HTMLMapElement = $PS["Web.HTML.HTMLMapElement"];
  var Web_HTML_HTMLMediaElement = $PS["Web.HTML.HTMLMediaElement"];
  var Web_HTML_HTMLMetaElement = $PS["Web.HTML.HTMLMetaElement"];
  var Web_HTML_HTMLMeterElement = $PS["Web.HTML.HTMLMeterElement"];
  var Web_HTML_HTMLModElement = $PS["Web.HTML.HTMLModElement"];
  var Web_HTML_HTMLOListElement = $PS["Web.HTML.HTMLOListElement"];
  var Web_HTML_HTMLObjectElement = $PS["Web.HTML.HTMLObjectElement"];
  var Web_HTML_HTMLOptGroupElement = $PS["Web.HTML.HTMLOptGroupElement"];
  var Web_HTML_HTMLOptionElement = $PS["Web.HTML.HTMLOptionElement"];
  var Web_HTML_HTMLOutputElement = $PS["Web.HTML.HTMLOutputElement"];
  var Web_HTML_HTMLParagraphElement = $PS["Web.HTML.HTMLParagraphElement"];
  var Web_HTML_HTMLParamElement = $PS["Web.HTML.HTMLParamElement"];
  var Web_HTML_HTMLPreElement = $PS["Web.HTML.HTMLPreElement"];
  var Web_HTML_HTMLProgressElement = $PS["Web.HTML.HTMLProgressElement"];
  var Web_HTML_HTMLQuoteElement = $PS["Web.HTML.HTMLQuoteElement"];
  var Web_HTML_HTMLScriptElement = $PS["Web.HTML.HTMLScriptElement"];
  var Web_HTML_HTMLSelectElement = $PS["Web.HTML.HTMLSelectElement"];
  var Web_HTML_HTMLSourceElement = $PS["Web.HTML.HTMLSourceElement"];
  var Web_HTML_HTMLSpanElement = $PS["Web.HTML.HTMLSpanElement"];
  var Web_HTML_HTMLStyleElement = $PS["Web.HTML.HTMLStyleElement"];
  var Web_HTML_HTMLTableCaptionElement = $PS["Web.HTML.HTMLTableCaptionElement"];
  var Web_HTML_HTMLTableCellElement = $PS["Web.HTML.HTMLTableCellElement"];
  var Web_HTML_HTMLTableColElement = $PS["Web.HTML.HTMLTableColElement"];
  var Web_HTML_HTMLTableDataCellElement = $PS["Web.HTML.HTMLTableDataCellElement"];
  var Web_HTML_HTMLTableElement = $PS["Web.HTML.HTMLTableElement"];
  var Web_HTML_HTMLTableHeaderCellElement = $PS["Web.HTML.HTMLTableHeaderCellElement"];
  var Web_HTML_HTMLTableRowElement = $PS["Web.HTML.HTMLTableRowElement"];
  var Web_HTML_HTMLTableSectionElement = $PS["Web.HTML.HTMLTableSectionElement"];
  var Web_HTML_HTMLTemplateElement = $PS["Web.HTML.HTMLTemplateElement"];
  var Web_HTML_HTMLTextAreaElement = $PS["Web.HTML.HTMLTextAreaElement"];
  var Web_HTML_HTMLTimeElement = $PS["Web.HTML.HTMLTimeElement"];
  var Web_HTML_HTMLTitleElement = $PS["Web.HTML.HTMLTitleElement"];
  var Web_HTML_HTMLTrackElement = $PS["Web.HTML.HTMLTrackElement"];
  var Web_HTML_HTMLUListElement = $PS["Web.HTML.HTMLUListElement"];
  var Web_HTML_HTMLVideoElement = $PS["Web.HTML.HTMLVideoElement"];
  var Web_HTML_History = $PS["Web.HTML.History"];
  var Web_HTML_Location = $PS["Web.HTML.Location"];
  var Web_HTML_Navigator = $PS["Web.HTML.Navigator"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Markup"] = $PS["Markup"] || {};
  var exports = $PS["Markup"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Web_DOM_DOMParser = $PS["Web.DOM.DOMParser"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
  var Web_DOM_Text = $PS["Web.DOM.Text"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var MarkupM = function (x) {
      return x;
  };
  var text = function (str) {
      return MarkupM(function (doc) {
          return Control_Monad_Writer_Trans.WriterT(Data_Functor.map(Effect.functorEffect)((function () {
              var $20 = Data_Tuple.Tuple.create(Data_Unit.unit);
              var $21 = Control_Applicative.pure(Control_Applicative.applicativeArray);
              return function ($22) {
                  return $20($21(Web_DOM_Text.toNode($22)));
              };
          })())(Web_DOM_Document.createTextNode(str)(doc)));
      });
  };
  var semigroupMarkupM = function (dictSemigroup) {
      return Control_Monad_Reader_Trans.semigroupReaderT(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Effect.applyEffect))(dictSemigroup);
  };
  var runMarkupOn = function (doc) {
      return function (v) {
          return Control_Monad_Writer_Trans.runWriterT(Control_Monad_Reader_Trans.runReaderT(v)(doc));
      };
  };
  var onElements = function (c) {
      return function (f) {
          return MarkupM(function (doc) {
              return function __do() {
                  var v = runMarkupOn(doc)(c)();
                  var newElements = f(v.value1)();
                  return new Data_Tuple.Tuple(v.value0, newElements);
              };
          });
      };
  };
  var withModifier = function (f) {
      return function (g) {
          return function (c) {
              return onElements(f(c))(function (elements) {
                  return Data_Functor.voidRight(Effect.functorEffect)(elements)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(g)(elements));
              });
          };
      };
  };
  var monoidadMarkupM = function (dictMonoid) {
      return Control_Monad_Reader_Trans.monoidReaderT(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Effect.applicativeEffect))(dictMonoid);
  };
  var monadMarkupM = Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Effect.monadEffect));
  var monadEffectMarkupM = Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Writer_Trans.monadEffectWriter(Data_Monoid.monoidArray)(Effect_Class.monadEffectEffect));
  var functorMarkupM = Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Writer_Trans.functorWriterT(Effect.functorEffect));
  var bindMarkupM = Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Effect.bindEffect));
  var htmlText = function (str) {
      return Control_Bind.bindFlipped(bindMarkupM)(text)(Effect_Class.liftEffect(monadEffectMarkupM)(function __do() {
          var edoc = Control_Bind.bindFlipped(Effect.bindEffect)(Web_DOM_DOMParser.parseHTMLFromString(str))(Web_DOM_DOMParser.makeDOMParser)();
          var getText = Control_Bind.composeKleisliFlipped(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(function ($23) {
              return Web_DOM_Node.textContent(Web_DOM_Element.toNode($23));
          }))(Web_DOM_Document.documentElement);
          return Data_Functor.map(Effect.functorEffect)((function () {
              var $24 = Data_Maybe.fromMaybe(str);
              var $25 = Control_Bind.join(Data_Maybe.bindMaybe);
              return function ($26) {
                  return $24($25($26));
              };
          })())(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(getText)(Data_Either.hush(edoc)))();
      }));
  };
  var attach = function (dictMonadEffect) {
      return function (parent) {
          return function (c) {
              return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
                  var mdoc = Web_DOM_Node.ownerDocument(parent)();
                  if (mdoc instanceof Data_Maybe.Just) {
                      var v = runMarkupOn(mdoc.value0)(c)();
                      Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Data_Function.flip(Web_DOM_Node.appendChild)(parent))(v.value1)();
                      return v.value0;
                  };
                  if (mdoc instanceof Data_Maybe.Nothing) {
                      return Effect_Exception["throw"]("Cannot attach Markup block to a document")();
                  };
                  throw new Error("Failed pattern match at Markup (line 114, column 3 - line 119, column 64): " + [ mdoc.constructor.name ]);
              });
          };
      };
  };
  var attachId = function (dictMonadEffect) {
      return function (id) {
          return function (c) {
              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window)))(function (doc) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Web_DOM_NonElementParentNode.getElementById(id)(Web_HTML_HTMLDocument.toNonElementParentNode(doc))))(function (melement) {
                      return Data_Traversable["for"]((dictMonadEffect.Monad0()).Applicative0())(Data_Traversable.traversableMaybe)(melement)(function (element) {
                          return attach(dictMonadEffect)(Web_DOM_Element.toNode(element))(c);
                      });
                  });
              });
          };
      };
  };
  var attachId_ = function (dictMonadEffect) {
      return function (id) {
          return function (c) {
              return Data_Functor.voidRight((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Unit.unit)(attachId(dictMonadEffect)(id)(c));
          };
      };
  };
  var askDoc = MarkupM(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Effect.applicativeEffect)));
  var applyMarkupM = Control_Monad_Reader_Trans.applyReaderT(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Effect.applyEffect));
  var applicativeMarkupM = Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Effect.applicativeEffect));
  var blank = Control_Applicative.pure(applicativeMarkupM)(Data_Unit.unit);
  var bare = function (v) {
      return v(blank);
  };
  var el$prime = function (name) {
      return function (c) {
          return Control_Bind.bind(bindMarkupM)(askDoc)(function (doc) {
              return Control_Bind.bind(bindMarkupM)(Effect_Class.liftEffect(monadEffectMarkupM)(Data_Functor.map(Effect.functorEffect)(Web_DOM_Element.toNode)(Web_DOM_Document.createElement(name)(doc))))(function (parent) {
                  return Control_Bind.bind(bindMarkupM)(onElements(c)((function () {
                      var $27 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Data_Function.flip(Web_DOM_Node.appendChild)(parent));
                      return function ($28) {
                          return (function (v) {
                              return Data_Functor.voidRight(Effect.functorEffect)([ parent ])(v);
                          })($27($28));
                      };
                  })()))(function (x) {
                      return Control_Applicative.pure(applicativeMarkupM)(new Data_Tuple.Tuple(x, parent));
                  });
              });
          });
      };
  };
  var el = function (name) {
      return function (c) {
          return Data_Functor.map(functorMarkupM)(Data_Tuple.fst)(el$prime(name)(c));
      };
  };
  var addListener = function (evType) {
      return function (g) {
          return function (node) {
              return function __do() {
                  var listener = Web_Event_EventTarget.eventListener(g)();
                  return Web_Event_EventTarget.addEventListener(evType)(listener)(false)(Web_DOM_Node.toEventTarget(node))();
              };
          };
      };
  };
  var addAttr = function (name) {
      return function (val) {
          var $29 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Web_DOM_Element.setAttribute(name)(val));
          return function ($30) {
              return $29(Web_DOM_Element.fromNode($30));
          };
      };
  };
  exports["MarkupM"] = MarkupM;
  exports["runMarkupOn"] = runMarkupOn;
  exports["onElements"] = onElements;
  exports["askDoc"] = askDoc;
  exports["el"] = el;
  exports["el'"] = el$prime;
  exports["text"] = text;
  exports["htmlText"] = htmlText;
  exports["blank"] = blank;
  exports["bare"] = bare;
  exports["withModifier"] = withModifier;
  exports["addAttr"] = addAttr;
  exports["addListener"] = addListener;
  exports["attach"] = attach;
  exports["attachId"] = attachId;
  exports["attachId_"] = attachId_;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["monadEffectMarkupM"] = monadEffectMarkupM;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidadMarkupM"] = monoidadMarkupM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Recipe"] = $PS["Recipe"] || {};
  var exports = $PS["Recipe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Decode_Parser = $PS["Data.Argonaut.Decode.Parser"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Combinators = $PS["Data.Argonaut.Encode.Combinators"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Duration = $PS["Duration"];                
  var StringYield = (function () {
      function StringYield(value0) {
          this.value0 = value0;
      };
      StringYield.create = function (value0) {
          return new StringYield(value0);
      };
      return StringYield;
  })();
  var IntYield = (function () {
      function IntYield(value0) {
          this.value0 = value0;
      };
      IntYield.create = function (value0) {
          return new IntYield(value0);
      };
      return IntYield;
  })();
  var InstructionStep = (function () {
      function InstructionStep(value0) {
          this.value0 = value0;
      };
      InstructionStep.create = function (value0) {
          return new InstructionStep(value0);
      };
      return InstructionStep;
  })();
  var InstructionSection = (function () {
      function InstructionSection(value0) {
          this.value0 = value0;
      };
      InstructionSection.create = function (value0) {
          return new InstructionSection(value0);
      };
      return InstructionSection;
  })();
  var Recipe = function (x) {
      return x;
  };
  var pluralField = function (dictDecodeJson) {
      return function (obj) {
          return function (fld) {
              return Control_Alt.alt(Data_Either.altEither)(Data_Argonaut_Decode_Combinators.defaultField(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeArray(dictDecodeJson))(obj)(fld))([  ]))(Data_Functor.mapFlipped(Data_Either.functorEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson)(obj)(fld))(Control_Applicative.pure(Control_Applicative.applicativeArray)));
          };
      };
  };
  var fixedField = function (dictEq) {
      return function (field) {
          return function (expected) {
              return Control_Bind.bind(Data_Either.bindEither)(field)(function (actual) {
                  var $14 = Data_Eq.eq(dictEq)(actual)(expected);
                  if ($14) {
                      return new Data_Either.Right(Data_Unit.unit);
                  };
                  return new Data_Either.Left(Data_Argonaut_Decode_Error.MissingValue.value);
              });
          };
      };
  };
  var extendPlural = function (dictEncodeJson) {
      return function (v) {
          if (v.value1.length === 0) {
              return Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson);
          };
          if (v.value1.length === 1) {
              return function (v1) {
                  return Data_Argonaut_Encode_Combinators.extend(dictEncodeJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)(v.value0)(v["value1"][0]))(v1);
              };
          };
          return function (v1) {
              return Data_Argonaut_Encode_Combinators.extend(dictEncodeJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJson))(v.value0)(v.value1))(v1);
          };
      };
  };
  var encodeYield = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof StringYield) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0);
      };
      if (v instanceof IntYield) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value0);
      };
      throw new Error("Failed pattern match at Recipe (line 132, column 1 - line 134, column 55): " + [ v.constructor.name ]);
  });
  var displayYield = function (v) {
      if (v instanceof StringYield) {
          return v.value0;
      };
      if (v instanceof IntYield) {
          return Data_Show.show(Data_Show.showInt)(v.value0) + " servings";
      };
      throw new Error("Failed pattern match at Recipe (line 136, column 1 - line 136, column 32): " + [ v.constructor.name ]);
  };
  var decodeYield = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(StringYield.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(json)))(Data_Functor.map(Data_Either.functorEither)(IntYield.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonInt)(json)));
  });
  var decodeInstruction = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      return Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(json))(function (text) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(new InstructionStep({
              name: Data_Maybe.Nothing.value,
              text: text
          }));
      }))(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (name) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("text"))(function (text) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new InstructionStep({
                      name: name,
                      text: text
                  }));
              });
          });
      })))(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (name) {
              return Control_Bind.bind(Data_Either.bindEither)(pluralField(decodeInstruction)(obj)("itemListElement"))(function (itemListElement) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new InstructionSection({
                      name: name,
                      itemListElement: itemListElement
                  }));
              });
          });
      }));
  });
  var decodeRecipeObj = function (obj) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(fixedField(Data_Eq.eqString)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("@type"))("Recipe"))(function () {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (name) {
              return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(pluralField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("author"))(Control_Bind.bind(Data_Either.bindEither)(pluralField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(obj)("author"))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(function (v) {
                  return Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v)("name");
              }))))(function (author) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonString)(obj)("@id"))(function (id) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Duration.decodeDuration)(obj)("cookTime"))(function (cookTime) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Duration.decodeDuration)(obj)("prepTime"))(function (prepTime) {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Duration.decodeDuration)(obj)("totalTime"))(function (totalTime) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonString)(obj)("description"))(function (description) {
                                      return Control_Bind.bind(Data_Either.bindEither)(pluralField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("recipeIngredient"))(function (ingredients) {
                                          return Control_Bind.bind(Data_Either.bindEither)(pluralField(decodeInstruction)(obj)("recipeInstructions"))(function (instructions) {
                                              return Control_Bind.bind(Data_Either.bindEither)(pluralField(decodeYield)(obj)("recipeYield"))(function ($$yield) {
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                      name: name,
                                                      author: author,
                                                      id: id,
                                                      cookTime: cookTime,
                                                      prepTime: prepTime,
                                                      totalTime: totalTime,
                                                      description: description,
                                                      ingredients: ingredients,
                                                      instructions: instructions,
                                                      "yield": $$yield
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var decodeRecipe = new Data_Argonaut_Decode_Class.DecodeJson(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(decodeRecipeObj)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))));
  var extractRecipe = function (strs) {
      var res0 = Data_Filterable.partitionMap(Data_Filterable.filterableArray)(Data_Argonaut_Decode_Parser.parseJson)(strs);
      var res1 = Data_Filterable.partitionMap(Data_Filterable.filterableArray)(Data_Argonaut_Decode_Class.decodeJson(decodeRecipe))(res0.right);
      var res2 = Data_Filterable.partitionMap(Data_Filterable.filterableArray)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))))(res0.right);
      var res3 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
          return "left";
      }))(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
          return "right";
      }))(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordNil))))(Data_Filterable.partitionMap(Data_Filterable.filterableArray)(decodeRecipeObj))(res2.right);
      return Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
          return "left";
      }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
          return "right";
      }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))({
          right: [  ],
          left: res0.left
      })(Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
          return "left";
      }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
          return "right";
      }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(res1)(Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
          return "left";
      }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
          return "right";
      }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))({
          right: [  ],
          left: res2.left
      })(res3)));
  };
  var assocPlural = function (dictEncodeJson) {
      return function (field) {
          var $41 = Data_Tuple.Tuple.create(field);
          var $42 = Data_Functor.map(Data_Functor.functorArray)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
          return function ($43) {
              return $41($42($43));
          };
      };
  };
  var encodeInstruction = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof InstructionStep && v.value0.name instanceof Data_Maybe.Nothing) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0.text);
      };
      if (v instanceof InstructionStep && v.value0.name instanceof Data_Maybe.Just) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("name")(v.value0.name.value0))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("text")(v.value0.text))(Data_Argonaut_Core.jsonEmptyObject));
      };
      if (v instanceof InstructionSection) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("name")(v.value0.name))(extendPlural(Data_Argonaut_Encode_Class.encodeJsonJson)(assocPlural(encodeInstruction)("itemListElement")(v.value0.itemListElement))(Data_Argonaut_Core.jsonEmptyObject));
      };
      throw new Error("Failed pattern match at Recipe (line 111, column 1 - line 120, column 24): " + [ v.constructor.name ]);
  });
  var encodeRecipe = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("@type")("Recipe"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("name")(v.name))(extendPlural(Data_Argonaut_Encode_Class.encodeJsonJson)(assocPlural(Data_Argonaut_Encode_Class.encodeJsonJString)("author")(v.author))(Data_Argonaut_Encode_Combinators.extendOptional(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assocOptional(Data_Argonaut_Encode_Class.encodeJsonJString)("@id")(v.id))(Data_Argonaut_Encode_Combinators.extendOptional(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assocOptional(Duration.encodeDuration)("cookTime")(v.cookTime))(Data_Argonaut_Encode_Combinators.extendOptional(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assocOptional(Duration.encodeDuration)("prepTime")(v.prepTime))(Data_Argonaut_Encode_Combinators.extendOptional(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assocOptional(Duration.encodeDuration)("totalTime")(v.totalTime))(Data_Argonaut_Encode_Combinators.extendOptional(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assocOptional(Data_Argonaut_Encode_Class.encodeJsonJString)("description")(v.description))(extendPlural(Data_Argonaut_Encode_Class.encodeJsonJson)(assocPlural(Data_Argonaut_Encode_Class.encodeJsonJString)("recipeIngredient")(v.ingredients))(extendPlural(Data_Argonaut_Encode_Class.encodeJsonJson)(assocPlural(encodeInstruction)("recipeInstructions")(v.instructions))(extendPlural(Data_Argonaut_Encode_Class.encodeJsonJson)(assocPlural(encodeYield)("recipeYield")(v["yield"]))(Data_Argonaut_Core.jsonEmptyObject)))))))))));
  });
  exports["Recipe"] = Recipe;
  exports["extractRecipe"] = extractRecipe;
  exports["decodeRecipeObj"] = decodeRecipeObj;
  exports["InstructionStep"] = InstructionStep;
  exports["InstructionSection"] = InstructionSection;
  exports["StringYield"] = StringYield;
  exports["IntYield"] = IntYield;
  exports["displayYield"] = displayYield;
  exports["pluralField"] = pluralField;
  exports["fixedField"] = fixedField;
  exports["assocPlural"] = assocPlural;
  exports["extendPlural"] = extendPlural;
  exports["decodeRecipe"] = decodeRecipe;
  exports["encodeRecipe"] = encodeRecipe;
  exports["decodeInstruction"] = decodeInstruction;
  exports["encodeInstruction"] = encodeInstruction;
  exports["decodeYield"] = decodeYield;
  exports["encodeYield"] = encodeYield;
})(PS);
(function(exports) {
  "use strict";

  exports.length = function (list) {
    return function () {
      return list.length;
    };
  };

  exports.toArray = function (list) {
    return function () {
      return [].slice.call(list);
    };
  };

  exports._item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };
})(PS["Web.DOM.NodeList"] = PS["Web.DOM.NodeList"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.NodeList"] = $PS["Web.DOM.NodeList"] || {};
  var exports = $PS["Web.DOM.NodeList"];
  var $foreign = $PS["Web.DOM.NodeList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Web_DOM_Internal_Types = $PS["Web.DOM.Internal.Types"];                
  var item = function (i) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_item"](i);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["item"] = item;
  exports["length"] = $foreign.length;
  exports["toArray"] = $foreign.toArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Duration = $PS["Duration"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Markup = $PS["Markup"];
  var Recipe = $PS["Recipe"];
  var Web_DOM_DOMParser = $PS["Web.DOM.DOMParser"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_NodeList = $PS["Web.DOM.NodeList"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_Location = $PS["Web.HTML.Location"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var time = function (label) {
      return function (value) {
          return Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableMaybe)(value)(function (t) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.el("dt")(Markup.text(label + ":")))(function () {
                  return Markup.el("dd")(Markup.text(Duration.showDuration(t)));
              });
          });
      };
  };
  var setTitleFor = function (v) {
      return Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.setTitle("\ud83d\udd16 " + v.name))(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window));
  };
  var reloadOnHashChange = function __do() {
      var win = Web_HTML.window();
      var listener = Web_Event_EventTarget.eventListener(function (v) {
          return Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Location.reload)(Web_HTML_Window.location(win));
      })();
      return Web_Event_EventTarget.addEventListener("hashchange")(listener)(false)(Web_HTML_Window.toEventTarget(win))();
  };
  var preloaded = function (r) {
      return function __do() {
          var loc = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window)();
          Web_HTML_Location.setSearch("")(loc)();
          return Web_HTML_Location.setHash("data:application/ld+json," + Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(Recipe.encodeRecipe)(r)))(loc)();
      };
  };
  var landing = Markup.el("form")(Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.el("h1")(Markup.text("Recipe Bookmarks")))(function () {
      return Control_Bind.bind(Markup.bindMarkupM)(Markup.bare(Markup.withModifier(Markup.withModifier(Markup["el'"]("input"))(Markup.addAttr("type")("text")))(Markup.addAttr("placeholder")("Paste recipe URL here"))))(function (v) {
          return Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableMaybe)(Web_HTML_HTMLInputElement.fromNode(v.value1))(function (input) {
              return Markup.bare(Markup.withModifier(Markup.withModifier(Markup.withModifier(Markup.el("input"))(Markup.addAttr("type")("submit")))(Markup.addAttr("value")("View")))(Markup.addListener("click")(function (_event) {
                  return function __do() {
                      var url = Web_HTML_HTMLInputElement.value(input)();
                      return Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Location.setHash(url))(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window))();
                  };
              })));
          });
      });
  }));
  var instruction = function (v) {
      if (v instanceof Recipe.InstructionStep && v.value0.name instanceof Data_Maybe.Nothing) {
          return Markup.htmlText(v.value0.text);
      };
      if (v instanceof Recipe.InstructionStep && (v.value0.name instanceof Data_Maybe.Just && v.value0.name.value0 === v.value0.text)) {
          return Markup.htmlText(v.value0.text);
      };
      if (v instanceof Recipe.InstructionStep && v.value0.name instanceof Data_Maybe.Just) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.withModifier(Markup.el("h4"))(Markup.addAttr("class")("instruction-step-name"))(Markup.htmlText(v.value0.name.value0)))(function () {
              return Markup.el("span")(Markup.htmlText(v.value0.text));
          });
      };
      if (v instanceof Recipe.InstructionSection) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.withModifier(Markup.el("h4"))(Markup.addAttr("class")("instruction-section-name"))(Markup.htmlText(v.value0.name)))(function () {
              return Markup.el("ol")(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.value0.itemListElement)((function () {
                  var $41 = Markup.el("li");
                  return function ($42) {
                      return $41(instruction($42));
                  };
              })()));
          });
      };
      throw new Error("Failed pattern match at Main (line 152, column 1 - line 152, column 37): " + [ v.constructor.name ]);
  };
  var recipe = function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.el("h1")(Markup.htmlText(v.name)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.author)((function () {
              var $43 = Markup.withModifier(Markup.el("h3"))(Markup.addAttr("class")("author"));
              return function ($44) {
                  return $43(Markup.htmlText($44));
              };
          })()))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableMaybe)(v.id)(function (id) {
                  return Markup.withModifier(Markup.withModifier(Markup.el("a"))(Markup.addAttr("id")(id)))(Markup.addAttr("href")(id))(Markup.text(id));
              }))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.withModifier(Markup.el("dl"))(Markup.addAttr("id")("times"))(Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(time("Cook")(v.cookTime))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(time("Prep")(v.prepTime))(function () {
                          return time("Total")(v.totalTime);
                      });
                  })))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Control_Applicative.unless(Markup.applicativeMarkupM)(Data_Foldable["null"](Data_Foldable.foldableArray)(v["yield"]))(Markup.withModifier(Markup.el("div"))(Markup.addAttr("id")("yield"))(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v["yield"])((function () {
                          var $45 = Markup.el("div");
                          return function ($46) {
                              return $45(Markup.htmlText(Recipe.displayYield($46)));
                          };
                      })()))))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableMaybe)(v.description)((function () {
                              var $47 = Markup.withModifier(Markup.el("div"))(Markup.addAttr("id")("description"));
                              return function ($48) {
                                  return $47(Markup.htmlText($48));
                              };
                          })()))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Control_Applicative.unless(Markup.applicativeMarkupM)(Data_Foldable["null"](Data_Foldable.foldableArray)(v.ingredients))(Markup.withModifier(Markup.el("div"))(Markup.addAttr("id")("ingredients"))(Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.el("h2")(Markup.text("Ingredients")))(function () {
                                  return Markup.el("ul")(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.ingredients)((function () {
                                      var $49 = Markup.el("li");
                                      return function ($50) {
                                          return $49(Markup.htmlText($50));
                                      };
                                  })()));
                              }))))(function () {
                                  return Control_Applicative.unless(Markup.applicativeMarkupM)(Data_Foldable["null"](Data_Foldable.foldableArray)(v.instructions))(Markup.withModifier(Markup.el("div"))(Markup.addAttr("id")("instructions"))(Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.el("h2")(Markup.text("Instructions")))(function () {
                                      return Markup.el("ol")(Data_Foldable.for_(Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.instructions)((function () {
                                          var $51 = Markup.el("li");
                                          return function ($52) {
                                              return $51(instruction($52));
                                          };
                                      })()));
                                  })));
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var hasContentType = function (ctype) {
      return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return Data_String_Common.toLower(v.value0) === "content-type" && Data_String_CodePoints.take(Data_String_CodePoints.length(ctype))(v.value1) === ctype;
      });
  };
  var scrape = function (v) {
      if (hasContentType("application/ld+json")(v.headers)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))([ v.body ]);
      };
      if (Data_Boolean.otherwise) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_DOM_DOMParser.parseHTMLFromString(v.body))(Web_DOM_DOMParser.makeDOMParser))))(function (doc) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Control_Bind.bindFlipped(Effect.bindEffect)(Web_DOM_NodeList.toArray)(Web_DOM_ParentNode.querySelectorAll("script[type='application/ld+json']")(Web_DOM_Document.toParentNode(doc)))))(function (nodes) {
                  return Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Web_DOM_Node.textContent)(nodes));
              });
          });
      };
      throw new Error("Failed pattern match at Main (line 84, column 1 - line 84, column 63): " + [ v.constructor.name ]);
  };
  var getSearch = Control_Bind.bindFlipped(Effect.bindEffect)((function () {
      var $53 = Data_Functor.map(Effect.functorEffect)(Data_String_CodePoints.drop(1));
      return function ($54) {
          return $53(Web_HTML_Location.search($54));
      };
  })())(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window));
  var getHash = Control_Bind.bindFlipped(Effect.bindEffect)((function () {
      var $55 = Data_Functor.map(Effect.functorEffect)(Data_String_CodePoints.drop(1));
      return function ($56) {
          return $55(Web_HTML_Location.hash($56));
      };
  })())(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window));
  var fetchPage = function (url) {
      var proxy = (function () {
          var $35 = Data_String_CodePoints.take(5)(url) === "data:";
          if ($35) {
              return "";
          };
          return "https://proxy.elderephemera.workers.dev?url=";
      })();
      return Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Affjax.printError))(Affjax.get(Affjax_ResponseFormat.string)(proxy + url)));
  };
  var error = function (errs) {
      return Markup.withModifier(Markup.el("div"))(Markup.addAttr("id")("error"))(Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Effect_Class.liftEffect(Markup.monadEffectMarkupM)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)((function () {
          var $57 = Effect_Class_Console.log(Effect_Class.monadEffectEffect);
          return function ($58) {
              return $57(Data_Argonaut_Decode_Error.printJsonDecodeError($58));
          };
      })())(errs)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Markup.bindMarkupM)(Markup.el("div")(Markup.text((function () {
              var $36 = Data_Foldable["null"](Data_Foldable.foldableArray)(errs);
              if ($36) {
                  return "No recipe data found on the provided page";
              };
              return "Could not parse recipe data from the provided page";
          })())))(function () {
              return Markup.withModifier(Markup.el("button"))(Markup.addListener("click")(function (_event) {
                  return Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Location.setHash(""))(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window));
              }))(Markup.text("Go Back"));
          });
      }));
  };
  var addListenerToWindow = function (ev) {
      return function (e) {
          return function __do() {
              var win = Web_HTML.window();
              var listener = Web_Event_EventTarget.eventListener(Data_Function["const"](e))();
              return Web_Event_EventTarget.addEventListener(ev)(listener)(false)(Web_HTML_Window.toEventTarget(win))();
          };
      };
  };
  var app = Effect_Aff.launchAff_((function (v) {
      return Control_Bind.bindFlipped(Effect_Aff.bindAff)(Data_Either.either(Effect_Class_Console.log(Effect_Aff.monadEffectAff))(Control_Applicative.pure(Effect_Aff.applicativeAff)))(v);
  })(Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(addListenerToWindow("hashchange")(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Location.reload)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window)))))(function () {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(getHash))(function (url) {
          var $37 = url === "";
          if ($37) {
              return Markup.attachId_(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))("contents")(landing);
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(fetchPage(url))(function (resp) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Effect_Aff.functorAff))(Recipe.extractRecipe)(scrape(resp)))(function (result) {
                  var v = Data_Array.head(result.right);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Markup.attachId_(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))("contents")(error(result.left));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(setTitleFor(v.value0)))(function () {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(getSearch))(function (param) {
                              var $39 = param === "preload";
                              if ($39) {
                                  return Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(preloaded(v.value0));
                              };
                              return Markup.attachId_(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))("contents")(recipe(v.value0));
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Main (line 58, column 5 - line 65, column 45): " + [ v.constructor.name ]);
              });
          });
      });
  }))));
  var main = addListenerToWindow("load")(app);
  exports["main"] = main;
  exports["app"] = app;
  exports["reloadOnHashChange"] = reloadOnHashChange;
  exports["getHash"] = getHash;
  exports["getSearch"] = getSearch;
  exports["fetchPage"] = fetchPage;
  exports["scrape"] = scrape;
  exports["hasContentType"] = hasContentType;
  exports["setTitleFor"] = setTitleFor;
  exports["preloaded"] = preloaded;
  exports["landing"] = landing;
  exports["error"] = error;
  exports["recipe"] = recipe;
  exports["time"] = time;
  exports["instruction"] = instruction;
  exports["addListenerToWindow"] = addListenerToWindow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["PSCI.Support"] = $PS["PSCI.Support"] || {};
  var exports = $PS["PSCI.Support"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];                
  var Eval = function ($$eval) {
      this["eval"] = $$eval;
  };
  var evalShow = function (dictShow) {
      return new Eval(Effect_Console.logShow(dictShow));
  };
  var evalEffectUnit = new Eval(Control_Category.identity(Control_Category.categoryFn));
  var $$eval = function (dict) {
      return dict["eval"];
  };
  var evalEffect = function (dictEval) {
      return new Eval(function (x) {
          return Control_Bind.bind(Effect.bindEffect)(x)($$eval(dictEval));
      });
  };
  exports["eval"] = $$eval;
  exports["Eval"] = Eval;
  exports["evalEffectUnit"] = evalEffectUnit;
  exports["evalEffect"] = evalEffect;
  exports["evalShow"] = evalShow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Prelude"] = $PS["Prelude"] || {};
  var exports = $PS["Prelude"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_BooleanAlgebra = $PS["Data.BooleanAlgebra"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_DivisionRing = $PS["Data.DivisionRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Field = $PS["Data.Field"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NaturalTransformation = $PS["Data.NaturalTransformation"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Void = $PS["Data.Void"];
  exports["Applicative"] = Control_Applicative.Applicative;
  exports["liftA1"] = Control_Applicative.liftA1;
  exports["pure"] = Control_Applicative.pure;
  exports["unless"] = Control_Applicative.unless;
  exports["when"] = Control_Applicative.when;
  exports["Apply"] = Control_Apply.Apply;
  exports["apply"] = Control_Apply.apply;
  exports["Bind"] = Control_Bind.Bind;
  exports["Discard"] = Control_Bind.Discard;
  exports["bind"] = Control_Bind.bind;
  exports["discard"] = Control_Bind.discard;
  exports["ifM"] = Control_Bind.ifM;
  exports["join"] = Control_Bind.join;
  exports["Category"] = Control_Category.Category;
  exports["identity"] = Control_Category.identity;
  exports["Monad"] = Control_Monad.Monad;
  exports["ap"] = Control_Monad.ap;
  exports["liftM1"] = Control_Monad.liftM1;
  exports["unlessM"] = Control_Monad.unlessM;
  exports["whenM"] = Control_Monad.whenM;
  exports["Semigroupoid"] = Control_Semigroupoid.Semigroupoid;
  exports["compose"] = Control_Semigroupoid.compose;
  exports["otherwise"] = Data_Boolean.otherwise;
  exports["BooleanAlgebra"] = Data_BooleanAlgebra.BooleanAlgebra;
  exports["Bounded"] = Data_Bounded.Bounded;
  exports["bottom"] = Data_Bounded.bottom;
  exports["top"] = Data_Bounded.top;
  exports["CommutativeRing"] = Data_CommutativeRing.CommutativeRing;
  exports["DivisionRing"] = Data_DivisionRing.DivisionRing;
  exports["recip"] = Data_DivisionRing.recip;
  exports["Eq"] = Data_Eq.Eq;
  exports["eq"] = Data_Eq.eq;
  exports["notEq"] = Data_Eq.notEq;
  exports["EuclideanRing"] = Data_EuclideanRing.EuclideanRing;
  exports["degree"] = Data_EuclideanRing.degree;
  exports["div"] = Data_EuclideanRing.div;
  exports["gcd"] = Data_EuclideanRing.gcd;
  exports["lcm"] = Data_EuclideanRing.lcm;
  exports["mod"] = Data_EuclideanRing.mod;
  exports["Field"] = Data_Field.Field;
  exports["const"] = Data_Function["const"];
  exports["flip"] = Data_Function.flip;
  exports["Functor"] = Data_Functor.Functor;
  exports["flap"] = Data_Functor.flap;
  exports["map"] = Data_Functor.map;
  exports["void"] = Data_Functor["void"];
  exports["HeytingAlgebra"] = Data_HeytingAlgebra.HeytingAlgebra;
  exports["conj"] = Data_HeytingAlgebra.conj;
  exports["disj"] = Data_HeytingAlgebra.disj;
  exports["not"] = Data_HeytingAlgebra.not;
  exports["Monoid"] = Data_Monoid.Monoid;
  exports["mempty"] = Data_Monoid.mempty;
  exports["Ord"] = Data_Ord.Ord;
  exports["between"] = Data_Ord.between;
  exports["clamp"] = Data_Ord.clamp;
  exports["compare"] = Data_Ord.compare;
  exports["comparing"] = Data_Ord.comparing;
  exports["max"] = Data_Ord.max;
  exports["min"] = Data_Ord.min;
  exports["EQ"] = Data_Ordering.EQ;
  exports["GT"] = Data_Ordering.GT;
  exports["LT"] = Data_Ordering.LT;
  exports["Ring"] = Data_Ring.Ring;
  exports["negate"] = Data_Ring.negate;
  exports["sub"] = Data_Ring.sub;
  exports["Semigroup"] = Data_Semigroup.Semigroup;
  exports["append"] = Data_Semigroup.append;
  exports["Semiring"] = Data_Semiring.Semiring;
  exports["add"] = Data_Semiring.add;
  exports["mul"] = Data_Semiring.mul;
  exports["one"] = Data_Semiring.one;
  exports["zero"] = Data_Semiring.zero;
  exports["Show"] = Data_Show.Show;
  exports["show"] = Data_Show.show;
  exports["unit"] = Data_Unit.unit;
  exports["absurd"] = Data_Void.absurd;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };

  exports.unsafeModify = function(l) {
    return function (f) {
      return function(rec) {
        rec[l] = f(rec[l]);
        return rec;
      };
    };
  };

  exports.unsafeDelete = function(l) {
    return function(rec) {
      delete rec[l];
      return rec;
    };
  };

  exports.unsafeRename = function(l1) {
    return function (l2) {
      return function (rec) {
        rec[l2] = rec[l1];
        delete rec[l1];
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Builder = function (x) {
      return x;
  };
  var union = function (dictUnion) {
      return function (r1) {
          return function (r2) {
              return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
          };
      };
  };
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var rename = function (dictIsSymbol) {
      return function (dictIsSymbol1) {
          return function (dictCons) {
              return function (dictLacks) {
                  return function (dictCons1) {
                      return function (dictLacks1) {
                          return function (l1) {
                              return function (l2) {
                                  return function (r1) {
                                      return $foreign.unsafeRename(Data_Symbol.reflectSymbol(dictIsSymbol)(l1))(Data_Symbol.reflectSymbol(dictIsSymbol1)(l2))(r1);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var nub = function (dictNub) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var modify = function (dictCons) {
      return function (dictCons1) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (f) {
                      return function (r1) {
                          return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(f)(r1);
                      };
                  };
              };
          };
      };
  };
  var merge = function (dictUnion) {
      return function (dictNub) {
          return function (r1) {
              return function (r2) {
                  return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
              };
          };
      };
  };
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var disjointUnion = function (dictUnion) {
      return function (dictNub) {
          return function (r1) {
              return function (r2) {
                  return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
              };
          };
      };
  };
  var $$delete = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (r2) {
                      return $foreign.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r2);
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  var buildFromScratch = Data_Function.flip(build)({});
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return build(f(a))(b);
          };
      };
  };
  exports["build"] = build;
  exports["buildFromScratch"] = buildFromScratch;
  exports["flip"] = flip;
  exports["insert"] = insert;
  exports["modify"] = modify;
  exports["delete"] = $$delete;
  exports["rename"] = rename;
  exports["merge"] = merge;
  exports["union"] = union;
  exports["disjointUnion"] = disjointUnion;
  exports["nub"] = nub;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Data.Boolean"] = $PS["Type.Data.Boolean"] || {};
  var exports = $PS["Type.Data.Boolean"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Or = {};
  var Not = {};
  var IsBoolean = function (reflectBoolean) {
      this.reflectBoolean = reflectBoolean;
  };
  var If = {};
  var BProxy = (function () {
      function BProxy() {

      };
      BProxy.value = new BProxy();
      return BProxy;
  })();
  var And = {};
  var reflectBoolean = function (dict) {
      return dict.reflectBoolean;
  };
  var orTrue = Or;
  var orFalse = Or;
  var or = function (dictOr) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  var notTrue = Not;
  var notFalse = Not;
  var not = function (dictNot) {
      return function (v) {
          return Type_Proxy["Proxy"].value;
      };
  };
  var isBooleanTrue = new IsBoolean(function (v) {
      return true;
  });
  var isBooleanFalse = new IsBoolean(function (v) {
      return false;
  });
  var reifyBoolean = function (v) {
      return function (f) {
          if (v) {
              return f(isBooleanTrue)(Type_Proxy["Proxy"].value);
          };
          if (!v) {
              return f(isBooleanFalse)(Type_Proxy["Proxy"].value);
          };
          throw new Error("Failed pattern match at Type.Data.Boolean (line 34, column 1 - line 34, column 88): " + [ v.constructor.name, f.constructor.name ]);
      };
  };
  var if_ = function (dictIf) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  return Type_Proxy["Proxy"].value;
              };
          };
      };
  };
  var ifTrue = If;
  var ifFalse = If;
  var andTrue = And;
  var andFalse = And;
  var and = function (dictAnd) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  exports["BProxy"] = BProxy;
  exports["IsBoolean"] = IsBoolean;
  exports["reflectBoolean"] = reflectBoolean;
  exports["reifyBoolean"] = reifyBoolean;
  exports["And"] = And;
  exports["and"] = and;
  exports["Or"] = Or;
  exports["or"] = or;
  exports["Not"] = Not;
  exports["not"] = not;
  exports["If"] = If;
  exports["if_"] = if_;
  exports["isBooleanTrue"] = isBooleanTrue;
  exports["isBooleanFalse"] = isBooleanFalse;
  exports["andTrue"] = andTrue;
  exports["andFalse"] = andFalse;
  exports["orTrue"] = orTrue;
  exports["orFalse"] = orFalse;
  exports["notTrue"] = notTrue;
  exports["notFalse"] = notFalse;
  exports["ifTrue"] = ifTrue;
  exports["ifFalse"] = ifFalse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Data.Ordering"] = $PS["Type.Data.Ordering"] || {};
  var exports = $PS["Type.Data.Ordering"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var OProxy = (function () {
      function OProxy() {

      };
      OProxy.value = new OProxy();
      return OProxy;
  })();
  var IsOrdering = function (reflectOrdering) {
      this.reflectOrdering = reflectOrdering;
  };
  var Invert = {};
  var Equals = {};
  var Append = {};
  var reflectOrdering = function (dict) {
      return dict.reflectOrdering;
  };
  var isOrderingLT = new IsOrdering(function (v) {
      return Data_Ordering.LT.value;
  });
  var isOrderingGT = new IsOrdering(function (v) {
      return Data_Ordering.GT.value;
  });
  var isOrderingEQ = new IsOrdering(function (v) {
      return Data_Ordering.EQ.value;
  });
  var reifyOrdering = function (v) {
      return function (f) {
          if (v instanceof Data_Ordering.LT) {
              return f(isOrderingLT)(Type_Proxy["Proxy"].value);
          };
          if (v instanceof Data_Ordering.EQ) {
              return f(isOrderingEQ)(Type_Proxy["Proxy"].value);
          };
          if (v instanceof Data_Ordering.GT) {
              return f(isOrderingGT)(Type_Proxy["Proxy"].value);
          };
          throw new Error("Failed pattern match at Type.Data.Ordering (line 35, column 1 - line 35, column 91): " + [ v.constructor.name, f.constructor.name ]);
      };
  };
  var invertOrderingLT = Invert;
  var invertOrderingGT = Invert;
  var invertOrderingEQ = Invert;
  var invert = function (dictInvert) {
      return function (v) {
          return Type_Proxy["Proxy"].value;
      };
  };
  var equalsLTLT = Equals;
  var equalsLTGT = Equals;
  var equalsLTEQ = Equals;
  var equalsGTLT = Equals;
  var equalsGTGT = Equals;
  var equalsGTEQ = Equals;
  var equalsEQLT = Equals;
  var equalsEQGT = Equals;
  var equalsEQEQ = Equals;
  var equals = function (dictEquals) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  var appendOrderingLT = Append;
  var appendOrderingGT = Append;
  var appendOrderingEQ = Append;
  var append = function (dictAppend) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  exports["OProxy"] = OProxy;
  exports["IsOrdering"] = IsOrdering;
  exports["reflectOrdering"] = reflectOrdering;
  exports["reifyOrdering"] = reifyOrdering;
  exports["Append"] = Append;
  exports["append"] = append;
  exports["Invert"] = Invert;
  exports["invert"] = invert;
  exports["Equals"] = Equals;
  exports["equals"] = equals;
  exports["isOrderingLT"] = isOrderingLT;
  exports["isOrderingEQ"] = isOrderingEQ;
  exports["isOrderingGT"] = isOrderingGT;
  exports["appendOrderingLT"] = appendOrderingLT;
  exports["appendOrderingEQ"] = appendOrderingEQ;
  exports["appendOrderingGT"] = appendOrderingGT;
  exports["invertOrderingLT"] = invertOrderingLT;
  exports["invertOrderingEQ"] = invertOrderingEQ;
  exports["invertOrderingGT"] = invertOrderingGT;
  exports["equalsEQEQ"] = equalsEQEQ;
  exports["equalsLTLT"] = equalsLTLT;
  exports["equalsGTGT"] = equalsGTGT;
  exports["equalsEQLT"] = equalsEQLT;
  exports["equalsEQGT"] = equalsEQGT;
  exports["equalsLTEQ"] = equalsLTEQ;
  exports["equalsLTGT"] = equalsLTGT;
  exports["equalsGTLT"] = equalsGTLT;
  exports["equalsGTEQ"] = equalsGTEQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Data.Row"] = $PS["Type.Data.Row"] || {};
  var exports = $PS["Type.Data.Row"];
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Data.Symbol"] = $PS["Type.Data.Symbol"] || {};
  var exports = $PS["Type.Data.Symbol"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Equals = {};
  var uncons = function (dictCons) {
      return function (v) {
          return {
              head: Type_Proxy["Proxy"].value,
              tail: Type_Proxy["Proxy"].value
          };
      };
  };
  var equalsSymbol = function (dictCompare) {
      return function (dictEquals) {
          return Equals;
      };
  };
  var equals = function (dictEquals) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  var compare = function (dictCompare) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  var append = function (dictAppend) {
      return function (v) {
          return function (v1) {
              return Type_Proxy["Proxy"].value;
          };
      };
  };
  exports["append"] = append;
  exports["compare"] = compare;
  exports["uncons"] = uncons;
  exports["Equals"] = Equals;
  exports["equals"] = equals;
  exports["equalsSymbol"] = equalsSymbol;
  exports["SProxy"] = Data_Symbol.SProxy;
  exports["IsSymbol"] = Data_Symbol.IsSymbol;
  exports["reflectSymbol"] = Data_Symbol.reflectSymbol;
  exports["reifySymbol"] = Data_Symbol.reifySymbol;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Row"] = $PS["Type.Row"] || {};
  var exports = $PS["Type.Row"];
  var Type_Data_Row = $PS["Type.Data.Row"];
  exports["RProxy"] = Type_Data_Row.RProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.RowList"] = $PS["Type.RowList"] || {};
  var exports = $PS["Type.RowList"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var RowListSet = {};
  var RowListRemove = {};
  var RowListNub = {};
  var RowListAppend = {};
  var ListToRow = {};
  var rowListSetImpl = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return function (dictRowListRemove) {
              return RowListSet;
          };
      };
  };
  var rowListRemoveNil = RowListRemove;
  var rowListRemoveCons = function (dictRowListRemove) {
      return function (dictEquals) {
          return function (dictIf) {
              return RowListRemove;
          };
      };
  };
  var rowListNubNil = RowListNub;
  var rowListNubCons = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return function (dictTypeEquals2) {
              return function (dictRowListRemove) {
                  return function (dictRowListNub) {
                      return RowListNub;
                  };
              };
          };
      };
  };
  var rowListAppendNil = function (dictTypeEquals) {
      return RowListAppend;
  };
  var rowListAppendCons = function (dictRowListAppend) {
      return function (dictTypeEquals) {
          return RowListAppend;
      };
  };
  var listToRowNil = ListToRow;
  var listToRowCons = function (dictListToRow) {
      return function (dictCons) {
          return ListToRow;
      };
  };
  exports["ListToRow"] = ListToRow;
  exports["RowListRemove"] = RowListRemove;
  exports["RowListSet"] = RowListSet;
  exports["RowListNub"] = RowListNub;
  exports["RowListAppend"] = RowListAppend;
  exports["listToRowNil"] = listToRowNil;
  exports["listToRowCons"] = listToRowCons;
  exports["rowListRemoveNil"] = rowListRemoveNil;
  exports["rowListRemoveCons"] = rowListRemoveCons;
  exports["rowListSetImpl"] = rowListSetImpl;
  exports["rowListNubNil"] = rowListNubNil;
  exports["rowListNubCons"] = rowListNubCons;
  exports["rowListAppendNil"] = rowListAppendNil;
  exports["rowListAppendCons"] = rowListAppendCons;
  exports["RLProxy"] = Type_Data_RowList.RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Prelude"] = $PS["Type.Prelude"] || {};
  var exports = $PS["Type.Prelude"];
  var Type_Data_Boolean = $PS["Type.Data.Boolean"];
  var Type_Data_Ordering = $PS["Type.Data.Ordering"];
  var Type_Data_Symbol = $PS["Type.Data.Symbol"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Type_Row = $PS["Type.Row"];
  var Type_RowList = $PS["Type.RowList"];
  exports["BProxy"] = Type_Data_Boolean.BProxy;
  exports["IsBoolean"] = Type_Data_Boolean.IsBoolean;
  exports["reflectBoolean"] = Type_Data_Boolean.reflectBoolean;
  exports["reifyBoolean"] = Type_Data_Boolean.reifyBoolean;
  exports["OProxy"] = Type_Data_Ordering.OProxy;
  exports["IsOrdering"] = Type_Data_Ordering.IsOrdering;
  exports["reflectOrdering"] = Type_Data_Ordering.reflectOrdering;
  exports["reifyOrdering"] = Type_Data_Ordering.reifyOrdering;
  exports["SProxy"] = Type_Data_Symbol.SProxy;
  exports["Append"] = Type_Data_Symbol.Append;
  exports["Compare"] = Type_Data_Symbol.Compare;
  exports["IsSymbol"] = Type_Data_Symbol.IsSymbol;
  exports["append"] = Type_Data_Symbol.append;
  exports["compare"] = Type_Data_Symbol.compare;
  exports["reflectSymbol"] = Type_Data_Symbol.reflectSymbol;
  exports["reifySymbol"] = Type_Data_Symbol.reifySymbol;
  exports["TypeEquals"] = Type_Equality.TypeEquals;
  exports["from"] = Type_Equality.from;
  exports["to"] = Type_Equality.to;
  exports["Proxy"] = Type_Proxy["Proxy"];
  exports["RProxy"] = Type_Row.RProxy;
  exports["Lacks"] = Type_Row.Lacks;
  exports["Union"] = Type_Row.Union;
  exports["RLProxy"] = Type_RowList.RLProxy;
  exports["ListToRow"] = Type_RowList.ListToRow;
  exports["RowToList"] = Type_RowList.RowToList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Row.Homogeneous"] = $PS["Type.Row.Homogeneous"] || {};
  var exports = $PS["Type.Row.Homogeneous"];
  var HomogeneousRowList = {};
  var Homogeneous = {};
  var homogeneousRowListNil = HomogeneousRowList;
  var homogeneousRowListCons = function (dictHomogeneousRowList) {
      return function (dictTypeEquals) {
          return HomogeneousRowList;
      };
  };
  var homogeneous = function (dictRowToList) {
      return function (dictHomogeneousRowList) {
          return Homogeneous;
      };
  };
  exports["Homogeneous"] = Homogeneous;
  exports["HomogeneousRowList"] = HomogeneousRowList;
  exports["homogeneous"] = homogeneous;
  exports["homogeneousRowListCons"] = homogeneousRowListCons;
  exports["homogeneousRowListNil"] = homogeneousRowListNil;
})(PS);
(function(exports) {
  "use strict";

  exports.data_ = function (t) {
    return function () {
      return t.data;
    };
  };

  exports.length = function (t) {
    return function () {
      return t.length;
    };
  };

  exports.substringData = function (offset) {
    return function (count) {
      return function (cd) {
        return function () {
          cd.substringData(offset, count);
        };
      };
    };
  };

  exports.appendData = function (data) {
    return function (cd) {
      return function () {
        cd.appendData(data);
      };
    };
  };

  exports.insertData = function (offset) {
    return function (data) {
      return function (cd) {
        return function () {
          cd.insertData(offset, data);
        };
      };
    };
  };

  exports.deleteData = function (offset) {
    return function (count) {
      return function (cd) {
        return function () {
          cd.deleteData(offset, count);
        };
      };
    };
  };

  exports.replaceData = function (offset) {
    return function (count) {
      return function (data) {
        return function (cd) {
          return function () {
            cd.replaceData(offset, count, data);
          };
        };
      };
    };
  };
})(PS["Web.DOM.CharacterData"] = PS["Web.DOM.CharacterData"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.CharacterData"] = $PS["Web.DOM.CharacterData"] || {};
  var exports = $PS["Web.DOM.CharacterData"];
  var $foreign = $PS["Web.DOM.CharacterData"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("CharacterData");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("CharacterData");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("CharacterData");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("CharacterData");
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toEventTarget"] = toEventTarget;
  exports["data_"] = $foreign.data_;
  exports["length"] = $foreign.length;
  exports["substringData"] = $foreign.substringData;
  exports["appendData"] = $foreign.appendData;
  exports["insertData"] = $foreign.insertData;
  exports["deleteData"] = $foreign.deleteData;
  exports["replaceData"] = $foreign.replaceData;
})(PS);
(function(exports) {
  "use strict";

  exports.remove = function (node) {
    return function () {
      return node.remove();
    };
  };
})(PS["Web.DOM.ChildNode"] = PS["Web.DOM.ChildNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.ChildNode"] = $PS["Web.DOM.ChildNode"] || {};
  var exports = $PS["Web.DOM.ChildNode"];
  var $foreign = $PS["Web.DOM.ChildNode"];
  exports["remove"] = $foreign.remove;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Comment"] = $PS["Web.DOM.Comment"] || {};
  var exports = $PS["Web.DOM.Comment"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var toCharacterData = Unsafe_Coerce.unsafeCoerce;
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Comment");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Comment");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Comment");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Comment");
  var fromCharacterData = Web_Internal_FFI.unsafeReadProtoTagged("Comment");
  exports["fromCharacterData"] = fromCharacterData;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toCharacterData"] = toCharacterData;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.add = function(list) {
    return function(token) {
      return function() {
        return list.add(token);
      };
    };
  };

  exports.remove = function(list) {
    return function(token) {
      return function() {
        return list.remove(token);
      };
    };
  };

  exports.contains = function(list) {
    return function(token) {
      return function() {
        return list.contains(token);
      };
    };
  };

  exports.toggle = function(list) {
    return function(token) {
      return function() {
        return list.toggle(token);
      };
    };
  };

  exports.toggleForce = function(list) {
    return function(token) {
      return function(force) {
        return function() {
          return list.toggle(token, force);
        };
      };
    };
  };

  exports._item = function(list) {
    return function(index) {
      return function() {
        return list.item(index);
      };
    };
  };
})(PS["Web.DOM.DOMTokenList"] = PS["Web.DOM.DOMTokenList"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.DOMTokenList"] = $PS["Web.DOM.DOMTokenList"] || {};
  var exports = $PS["Web.DOM.DOMTokenList"];
  var $foreign = $PS["Web.DOM.DOMTokenList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var item = function (index) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_item"](index);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["item"] = item;
  exports["add"] = $foreign.add;
  exports["contains"] = $foreign.contains;
  exports["remove"] = $foreign.remove;
  exports["toggle"] = $foreign.toggle;
  exports["toggleForce"] = $foreign.toggleForce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.DocumentFragment"] = $PS["Web.DOM.DocumentFragment"] || {};
  var exports = $PS["Web.DOM.DocumentFragment"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("DocumentFragment");
  var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("DocumentFragment");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("DocumentFragment");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("DocumentFragment");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("DocumentFragment");
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromParentNode"] = fromParentNode;
  exports["fromNonElementParentNode"] = fromNonElementParentNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toParentNode"] = toParentNode;
  exports["toNonElementParentNode"] = toNonElementParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  var getProp = function (name) {
    return function (doctype) {
      return doctype[name];
    };
  };

  exports.name = getProp("name");
  exports.publicId = getProp("publicId");
  exports.systemId = getProp("systemId");
})(PS["Web.DOM.DocumentType"] = PS["Web.DOM.DocumentType"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.DocumentType"] = $PS["Web.DOM.DocumentType"] || {};
  var exports = $PS["Web.DOM.DocumentType"];
  var $foreign = $PS["Web.DOM.DocumentType"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("DocumentType");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("DocumentType");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("DocumentType");
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toChildNode"] = toChildNode;
  exports["toEventTarget"] = toEventTarget;
  exports["name"] = $foreign.name;
  exports["publicId"] = $foreign.publicId;
  exports["systemId"] = $foreign.systemId;
})(PS);
(function(exports) {
  "use strict";

  exports.mutationObserver = function (cb) {
    return function () {
      return new MutationObserver(function (mr, mo) {
        return cb(mr)(mo)();
      });
    };
  };

  exports._observe = function (node) {
    return function (config) {
      return function (mo) {
        return function () {
          return mo.observe(node, config);
        };
      };
    };
  };

  exports.disconnect = function (mo) {
    return function () {
      return mo.disconnect();
    };
  };

  exports.takeRecords = function (mo) {
    return function () {
      return mo.takeRecords();
    };
  };
})(PS["Web.DOM.MutationObserver"] = PS["Web.DOM.MutationObserver"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.MutationObserver"] = $PS["Web.DOM.MutationObserver"] || {};
  var exports = $PS["Web.DOM.MutationObserver"];
  var $foreign = $PS["Web.DOM.MutationObserver"];
  var observe = function (dictUnion) {
      return $foreign["_observe"];
  };
  exports["observe"] = observe;
  exports["mutationObserver"] = $foreign.mutationObserver;
  exports["disconnect"] = $foreign.disconnect;
  exports["takeRecords"] = $foreign.takeRecords;
})(PS);
(function(exports) {
  "use strict";

  exports.typeString = function (mr) {
    return function () {
      return mr.type;
    };
  };

  exports.target = function (mr) {
    return function () {
      return mr.target;
    };
  };

  exports.addedNodes = function (mr) {
    return function () {
      return mr.addedNodes;
    };
  };

  exports.removedNodes = function (mr) {
    return function () {
      return mr.removedNodes;
    };
  };

  exports._nextSibling = function (mr) {
    return function () {
      return mr.nextSibling;
    };
  };

  exports._previousSibling = function (mr) {
    return function () {
      return mr.previousSibling;
    };
  };

  exports._attributeName = function (mr) {
    return function () {
      return mr.attributeName;
    };
  };

  exports._attributeNamespace = function (mr) {
    return function () {
      return mr.attributeNamespace;
    };
  };

  exports._oldValue = function (mr) {
    return function () {
      return mr.oldValue;
    };
  };
})(PS["Web.DOM.MutationRecord"] = PS["Web.DOM.MutationRecord"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.MutationRecord"] = $PS["Web.DOM.MutationRecord"] || {};
  var exports = $PS["Web.DOM.MutationRecord"];
  var $foreign = $PS["Web.DOM.MutationRecord"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var MutationRecordAttributes = (function () {
      function MutationRecordAttributes() {

      };
      MutationRecordAttributes.value = new MutationRecordAttributes();
      return MutationRecordAttributes;
  })();
  var MutationRecordCharacterData = (function () {
      function MutationRecordCharacterData() {

      };
      MutationRecordCharacterData.value = new MutationRecordCharacterData();
      return MutationRecordCharacterData;
  })();
  var MutationRecordChildList = (function () {
      function MutationRecordChildList() {

      };
      MutationRecordChildList.value = new MutationRecordChildList();
      return MutationRecordChildList;
  })();
  var type_ = function (dictPartial) {
      var stringToType = function (v) {
          if (v === "attributes") {
              return MutationRecordAttributes.value;
          };
          if (v === "characterData") {
              return MutationRecordCharacterData.value;
          };
          if (v === "childList") {
              return MutationRecordChildList.value;
          };
          throw new Error("Failed pattern match at Web.DOM.MutationRecord (line 36, column 18 - line 39, column 43): " + [ v.constructor.name ]);
      };
      var $6 = Data_Functor.map(Effect.functorEffect)(stringToType);
      return function ($7) {
          return $6($foreign.typeString($7));
      };
  };
  var previousSibling = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_previousSibling"]($9));
      };
  })();
  var oldValue = (function () {
      var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($11) {
          return $10($foreign["_oldValue"]($11));
      };
  })();
  var nextSibling = (function () {
      var $12 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($13) {
          return $12($foreign["_nextSibling"]($13));
      };
  })();
  var attributeNamespace = (function () {
      var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($15) {
          return $14($foreign["_attributeNamespace"]($15));
      };
  })();
  var attributeName = (function () {
      var $16 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($17) {
          return $16($foreign["_attributeName"]($17));
      };
  })();
  exports["MutationRecordAttributes"] = MutationRecordAttributes;
  exports["MutationRecordCharacterData"] = MutationRecordCharacterData;
  exports["MutationRecordChildList"] = MutationRecordChildList;
  exports["type_"] = type_;
  exports["nextSibling"] = nextSibling;
  exports["previousSibling"] = previousSibling;
  exports["attributeName"] = attributeName;
  exports["attributeNamespace"] = attributeNamespace;
  exports["oldValue"] = oldValue;
  exports["typeString"] = $foreign.typeString;
  exports["target"] = $foreign.target;
  exports["addedNodes"] = $foreign.addedNodes;
  exports["removedNodes"] = $foreign.removedNodes;
})(PS);
(function(exports) {
  "use strict";

  exports._previousElementSibling = function (node) {
    return function () {
      return node.previousElementSibling;
    };
  };

  exports._nextElementSibling = function (node) {
    return function () {
      return node.nextElementSibling;
    };
  };
})(PS["Web.DOM.NonDocumentTypeChildNode"] = PS["Web.DOM.NonDocumentTypeChildNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.NonDocumentTypeChildNode"] = $PS["Web.DOM.NonDocumentTypeChildNode"] || {};
  var exports = $PS["Web.DOM.NonDocumentTypeChildNode"];
  var $foreign = $PS["Web.DOM.NonDocumentTypeChildNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var previousElementSibling = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($1) {
          return $0($foreign["_previousElementSibling"]($1));
      };
  })();
  var nextElementSibling = (function () {
      var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($3) {
          return $2($foreign["_nextElementSibling"]($3));
      };
  })();
  exports["previousElementSibling"] = previousElementSibling;
  exports["nextElementSibling"] = nextElementSibling;
})(PS);
(function(exports) {
  "use strict";

  exports.target = function (pi) {
    return function () {
      return pi.target;
    };
  };
})(PS["Web.DOM.ProcessingInstruction"] = PS["Web.DOM.ProcessingInstruction"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.ProcessingInstruction"] = $PS["Web.DOM.ProcessingInstruction"] || {};
  var exports = $PS["Web.DOM.ProcessingInstruction"];
  var $foreign = $PS["Web.DOM.ProcessingInstruction"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toChildNode = Unsafe_Coerce.unsafeCoerce;
  var toCharacterData = Unsafe_Coerce.unsafeCoerce;
  var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("ProcessingInstruction");
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("ProcessingInstruction");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("ProcessingInstruction");
  var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("ProcessingInstruction");
  var fromCharacterData = Web_Internal_FFI.unsafeReadProtoTagged("ProcessingInstruction");
  exports["fromCharacterData"] = fromCharacterData;
  exports["fromNode"] = fromNode;
  exports["fromChildNode"] = fromChildNode;
  exports["fromNonDocumentTypeChildNode"] = fromNonDocumentTypeChildNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toCharacterData"] = toCharacterData;
  exports["toChildNode"] = toChildNode;
  exports["toNonDocumentTypeChildNode"] = toNonDocumentTypeChildNode;
  exports["toEventTarget"] = toEventTarget;
  exports["target"] = $foreign.target;
})(PS);
(function(exports) {
  /* Web.DOM.XMLSerializer */
  "use strict";

  exports.makeXMLSerializer = function () {
    return new XMLSerializer();
  };

  exports.serializeToString =  function (doc) {
    return function (xmlSerializer) {
      return function () { // Effect thunk
        return xmlSerializer.serializeToString(doc);
      };
    };
  };
})(PS["Web.DOM.XMLSerializer"] = PS["Web.DOM.XMLSerializer"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.XMLSerializer"] = $PS["Web.DOM.XMLSerializer"] || {};
  var exports = $PS["Web.DOM.XMLSerializer"];
  var $foreign = $PS["Web.DOM.XMLSerializer"];
  exports["makeXMLSerializer"] = $foreign.makeXMLSerializer;
  exports["serializeToString"] = $foreign.serializeToString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Event.CustomEvent"] = $PS["Web.Event.CustomEvent"] || {};
  var exports = $PS["Web.Event.CustomEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("CustomEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
})(PS);
(function(exports) {
  "use strict";

  exports.bubbles = function (e) {
    return e.bubbles;
  };

  exports.cancelable = function (e) {
    return e.cancelable;
  };

  exports._currentTarget = function (e) {
    return e.currentTarget;
  };

  exports.defaultPrevented = function (e) {
    return function() {
      return e.defaultPrevented;
    };
  };

  exports.eventPhaseIndex = function (e) {
    return e.eventPhase;
  };

  exports._target = function (e) {
    return e.target;
  };

  exports.timeStamp = function (e) {
    return e.timeStamp;
  };

  exports.type_ = function (e) {
    return e.type;
  };

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };

  exports.stopImmediatePropagation = function (e) {
    return function () {
      return e.stopImmediatePropagation();
    };
  };

  exports.stopPropagation = function (e) {
    return function () {
      return e.stopPropagation();
    };
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Event.EventPhase"] = $PS["Web.Event.EventPhase"] || {};
  var exports = $PS["Web.Event.EventPhase"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Capturing = (function () {
      function Capturing() {

      };
      Capturing.value = new Capturing();
      return Capturing;
  })();
  var AtTarget = (function () {
      function AtTarget() {

      };
      AtTarget.value = new AtTarget();
      return AtTarget;
  })();
  var Bubbling = (function () {
      function Bubbling() {

      };
      Bubbling.value = new Bubbling();
      return Bubbling;
  })();
  var toEnumEventPhase = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(None.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Capturing.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AtTarget.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Bubbling.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumEventPhase = function (v) {
      if (v instanceof None) {
          return 0;
      };
      if (v instanceof Capturing) {
          return 1;
      };
      if (v instanceof AtTarget) {
          return 2;
      };
      if (v instanceof Bubbling) {
          return 3;
      };
      throw new Error("Failed pattern match at Web.Event.EventPhase (line 40, column 3 - line 44, column 18): " + [ v.constructor.name ]);
  };
  var eqEventPhase = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return true;
          };
          if (x instanceof Capturing && y instanceof Capturing) {
              return true;
          };
          if (x instanceof AtTarget && y instanceof AtTarget) {
              return true;
          };
          if (x instanceof Bubbling && y instanceof Bubbling) {
              return true;
          };
          return false;
      };
  });
  var ordEventPhase = new Data_Ord.Ord(function () {
      return eqEventPhase;
  }, function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof None) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof None) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Capturing && y instanceof Capturing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Capturing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Capturing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AtTarget && y instanceof AtTarget) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof AtTarget) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AtTarget) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Bubbling && y instanceof Bubbling) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.Event.EventPhase (line 14, column 1 - line 14, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumEventPhase = new Data_Enum.Enum(function () {
      return ordEventPhase;
  }, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase));
  var boundedEventPhase = new Data_Bounded.Bounded(function () {
      return ordEventPhase;
  }, None.value, Bubbling.value);
  var boundedEnumEventPhase = new Data_Enum.BoundedEnum(function () {
      return boundedEventPhase;
  }, function () {
      return enumEventPhase;
  }, 4, fromEnumEventPhase, toEnumEventPhase);
  exports["None"] = None;
  exports["Capturing"] = Capturing;
  exports["AtTarget"] = AtTarget;
  exports["Bubbling"] = Bubbling;
  exports["toEnumEventPhase"] = toEnumEventPhase;
  exports["fromEnumEventPhase"] = fromEnumEventPhase;
  exports["eqEventPhase"] = eqEventPhase;
  exports["ordEventPhase"] = ordEventPhase;
  exports["boundedEventPhase"] = boundedEventPhase;
  exports["enumEventPhase"] = enumEventPhase;
  exports["boundedEnumEventPhase"] = boundedEnumEventPhase;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Web_Event_EventPhase = $PS["Web.Event.EventPhase"];
  var Web_Event_Internal_Types = $PS["Web.Event.Internal.Types"];                
  var EventType = function (x) {
      return x;
  };
  var target = function ($1) {
      return Data_Nullable.toMaybe($foreign["_target"]($1));
  };
  var ordEventType = Data_Ord.ordString;
  var newtypeEventType = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var eventPhase = function (dictPartial) {
      var $2 = Data_Maybe.fromJust();
      var $3 = Data_Enum.toEnum(Web_Event_EventPhase.boundedEnumEventPhase);
      return function ($4) {
          return $2($3($foreign.eventPhaseIndex($4)));
      };
  };
  var eqEventType = Data_Eq.eqString;
  var currentTarget = function ($5) {
      return Data_Nullable.toMaybe($foreign["_currentTarget"]($5));
  };
  exports["EventType"] = EventType;
  exports["target"] = target;
  exports["currentTarget"] = currentTarget;
  exports["eventPhase"] = eventPhase;
  exports["newtypeEventType"] = newtypeEventType;
  exports["eqEventType"] = eqEventType;
  exports["ordEventType"] = ordEventType;
  exports["type_"] = $foreign.type_;
  exports["stopPropagation"] = $foreign.stopPropagation;
  exports["stopImmediatePropagation"] = $foreign.stopImmediatePropagation;
  exports["bubbles"] = $foreign.bubbles;
  exports["cancelable"] = $foreign.cancelable;
  exports["preventDefault"] = $foreign.preventDefault;
  exports["defaultPrevented"] = $foreign.defaultPrevented;
  exports["timeStamp"] = $foreign.timeStamp;
})(PS);
(function(exports) {
  "use strict";

  exports.typeImpl = function (blob) { return blob.type; };

  exports.blobImpl = function (args) {
    return function (mediaType) {
      return new Blob(args, {type: mediaType});
    };
  };

  exports.size = function (blob) { return blob.size; };

  exports.slice = function (contentType) {
    return function (start) {
      return function (end) {
        return function (blob) {
          return blob.slice(start, end, contentType);
        };
      };
    };
  };
})(PS["Web.File.Blob"] = PS["Web.File.Blob"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.File.Blob"] = $PS["Web.File.Blob"] || {};
  var exports = $PS["Web.File.Blob"];
  var $foreign = $PS["Web.File.Blob"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var $$Math = $PS["Math"];                
  var EndByte = function (x) {
      return x;
  };
  var StartByte = function (x) {
      return x;
  };
  var type_ = function (blob) {
      var blobType = $foreign.typeImpl(blob);
      var $0 = blobType === "";
      if ($0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(blobType);
  };
  var slice$prime = $foreign.slice("");
  var idxFromNumber = function ($1) {
      return $$Math.round($1);
  };
  var idxFromInt = function ($2) {
      return Data_Int.toNumber($2);
  };
  var fromString = function (str) {
      return function (ct) {
          return $foreign.blobImpl([ str ])(ct);
      };
  };
  var fromArray = function (args) {
      return function (opts) {
          return $foreign.blobImpl(args)(opts);
      };
  };
  exports["fromString"] = fromString;
  exports["fromArray"] = fromArray;
  exports["type_"] = type_;
  exports["StartByte"] = StartByte;
  exports["EndByte"] = EndByte;
  exports["idxFromInt"] = idxFromInt;
  exports["idxFromNumber"] = idxFromNumber;
  exports["slice'"] = slice$prime;
  exports["size"] = $foreign.size;
  exports["slice"] = $foreign.slice;
})(PS);
(function(exports) {
  "use strict";

  exports.name = function (file) { return file.name; };

  exports.lastModified = function (file) { return file.lastModified; };
})(PS["Web.File.File"] = PS["Web.File.File"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.File.File"] = $PS["Web.File.File"] || {};
  var exports = $PS["Web.File.File"];
  var $foreign = $PS["Web.File.File"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_File_Blob = $PS["Web.File.Blob"];                
  var type_ = function ($0) {
      return Web_File_Blob.type_($0);
  };
  var toBlob = Unsafe_Coerce.unsafeCoerce;
  var size = function ($1) {
      return Web_File_Blob.size($1);
  };
  exports["toBlob"] = toBlob;
  exports["type_"] = type_;
  exports["size"] = size;
  exports["name"] = $foreign.name;
  exports["lastModified"] = $foreign.lastModified;
})(PS);
(function(exports) {
  "use strict";

  exports.length = function (fileList) { return fileList.length; };

  exports._item = function (index) {
    return function (fileList) {
      return fileList.item(index);
    };
  };
})(PS["Web.File.FileList"] = PS["Web.File.FileList"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.File.FileList"] = $PS["Web.File.FileList"] || {};
  var exports = $PS["Web.File.FileList"];
  var $foreign = $PS["Web.File.FileList"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var item = function (i) {
      var $1 = $foreign["_item"](i);
      return function ($2) {
          return Data_Nullable.toMaybe($1($2));
      };
  };
  var items = function (dictUnfoldable) {
      return function (fl) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (i) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(i + 1 | 0))(item(i)(fl));
          })(0);
      };
  };
  exports["item"] = item;
  exports["items"] = items;
  exports["length"] = $foreign.length;
})(PS);
(function(exports) {
  "use strict";

  exports.fileReader = function () {
    return new FileReader();
  };

  exports.error = function (fr) {
    return function () {
      return fr.error;
    };
  };

  exports.readyStateImpl = function (fr) {
    return function () {
      return fr.readyState;
    };
  };

  exports.result = function (fr) {
    return function () {
      return fr.result;
    };
  };

  exports.abort = function (fr) {
    return function () {
      fr.abort();
    };
  };

  exports.readAsText = function (blob) {
    return function (fr) {
      return function () {
        fr.readAsText(blob);
      };
    };
  };

  exports.readAsArrayBuffer = function (blob) {
    return function (fr) {
      return function () {
        fr.readAsArrayBuffer(blob);
      };
    };
  };

  exports.readAsDataURL = function (blob) {
    return function (fr) {
      return function () {
        fr.readAsDataURL(blob);
      };
    };
  };
})(PS["Web.File.FileReader"] = PS["Web.File.FileReader"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.File.FileReader.ReadyState"] = $PS["Web.File.FileReader.ReadyState"] || {};
  var exports = $PS["Web.File.FileReader.ReadyState"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];                
  var EMPTY = (function () {
      function EMPTY() {

      };
      EMPTY.value = new EMPTY();
      return EMPTY;
  })();
  var LOADING = (function () {
      function LOADING() {

      };
      LOADING.value = new LOADING();
      return LOADING;
  })();
  var DONE = (function () {
      function DONE() {

      };
      DONE.value = new DONE();
      return DONE;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(EMPTY.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(LOADING.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(DONE.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof EMPTY) {
          return "EMPTY";
      };
      if (v instanceof LOADING) {
          return "LOADING";
      };
      if (v instanceof DONE) {
          return "DONE";
      };
      throw new Error("Failed pattern match at Web.File.FileReader.ReadyState (line 28, column 1 - line 31, column 21): " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof EMPTY) {
          return 0;
      };
      if (v instanceof LOADING) {
          return 1;
      };
      if (v instanceof DONE) {
          return 2;
      };
      throw new Error("Failed pattern match at Web.File.FileReader.ReadyState (line 43, column 3 - line 46, column 14): " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof EMPTY && y instanceof EMPTY) {
              return true;
          };
          if (x instanceof LOADING && y instanceof LOADING) {
              return true;
          };
          if (x instanceof DONE && y instanceof DONE) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof EMPTY && y instanceof EMPTY) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof EMPTY) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof EMPTY) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof LOADING && y instanceof LOADING) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof LOADING) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof LOADING) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DONE && y instanceof DONE) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.File.FileReader.ReadyState (line 13, column 1 - line 13, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, EMPTY.value, DONE.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 3, fromEnumReadyState, toEnumReadyState);
  exports["EMPTY"] = EMPTY;
  exports["LOADING"] = LOADING;
  exports["DONE"] = DONE;
  exports["toEnumReadyState"] = toEnumReadyState;
  exports["fromEnumReadyState"] = fromEnumReadyState;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.File.FileReader"] = $PS["Web.File.FileReader"] || {};
  var exports = $PS["Web.File.FileReader"];
  var $foreign = $PS["Web.File.FileReader"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_File_FileReader_ReadyState = $PS["Web.File.FileReader.ReadyState"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var readyState = function (fr) {
      return function __do() {
          var rs = $foreign.readyStateImpl(fr)();
          return Data_Maybe.fromJust()(Web_File_FileReader_ReadyState.toEnumReadyState(rs));
      };
  };
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("FileReader");
  exports["fromEventTarget"] = fromEventTarget;
  exports["toEventTarget"] = toEventTarget;
  exports["readyState"] = readyState;
  exports["fileReader"] = $foreign.fileReader;
  exports["error"] = $foreign.error;
  exports["result"] = $foreign.result;
  exports["abort"] = $foreign.abort;
  exports["readAsText"] = $foreign.readAsText;
  exports["readAsArrayBuffer"] = $foreign.readAsArrayBuffer;
  exports["readAsDataURL"] = $foreign.readAsDataURL;
})(PS);
(function(exports) {
  "use strict";

  exports.createObjectURL = function (blob) {
    return function () {
      return URL.createObjectURL(blob);
    };
  };

  exports.revokeObjectURL = function (url) {
    return function () {
      URL.revokeObjectURL(url);
    };
  };
})(PS["Web.File.Url"] = PS["Web.File.Url"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.File.Url"] = $PS["Web.File.Url"] || {};
  var exports = $PS["Web.File.Url"];
  var $foreign = $PS["Web.File.Url"];
  exports["createObjectURL"] = $foreign.createObjectURL;
  exports["revokeObjectURL"] = $foreign.revokeObjectURL;
})(PS);
(function(exports) {
  "use strict";

  exports.returnValue = function (e) {
    return function () {
      return e.returnValue;
    };
  };

  exports.setReturnValue = function (v) {
    return function (e) {
      return function () {
        e.returnValue = v;
      };
    };
  };
})(PS["Web.HTML.Event.BeforeUnloadEvent"] = PS["Web.HTML.Event.BeforeUnloadEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.BeforeUnloadEvent"] = $PS["Web.HTML.Event.BeforeUnloadEvent"] || {};
  var exports = $PS["Web.HTML.Event.BeforeUnloadEvent"];
  var $foreign = $PS["Web.HTML.Event.BeforeUnloadEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("BeforeUnloadEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["returnValue"] = $foreign.returnValue;
  exports["setReturnValue"] = $foreign.setReturnValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.BeforeUnloadEvent.EventTypes"] = $PS["Web.HTML.Event.BeforeUnloadEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.BeforeUnloadEvent.EventTypes"];
  var beforeunload = "beforeunload";
  exports["beforeunload"] = beforeunload;
})(PS);
(function(exports) {
  "use strict";

  exports._files = function (dataTransfer) {
    return dataTransfer.files;
  };

  exports.types = function (dataTransfer) {
    return dataTransfer.types;
  };

  exports._getData = function (format) {
    return function (dataTransfer) {
      return function () {
        return dataTransfer.getData(format);
      };
    };
  };

  exports._setData = function (format) {
    return function (data) {
      return function (dataTransfer) {
        return function () {
          return dataTransfer.setData(format, data);
        };
      };
    };
  };

  exports._dropEffect = function (dataTransfer) {
    return function () {
      return dataTransfer.dropEffect;
    };
  };

  exports._setDropEffect = function (e) {
    return function (dataTransfer) {
      return function () {
        dataTransfer.dropEffect = e;
      };
    };
  };
})(PS["Web.HTML.Event.DataTransfer"] = PS["Web.HTML.Event.DataTransfer"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.DataTransfer"] = $PS["Web.HTML.Event.DataTransfer"] || {};
  var exports = $PS["Web.HTML.Event.DataTransfer"];
  var $foreign = $PS["Web.HTML.Event.DataTransfer"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Effect = $PS["Effect"];                
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Link = (function () {
      function Link() {

      };
      Link.value = new Link();
      return Link;
  })();
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var setDropEffect = function (de) {
      return $foreign["_setDropEffect"]((function () {
          if (de instanceof Copy) {
              return "copy";
          };
          if (de instanceof Link) {
              return "link";
          };
          if (de instanceof Move) {
              return "move";
          };
          if (de instanceof None) {
              return "none";
          };
          throw new Error("Failed pattern match at Web.HTML.Event.DataTransfer (line 81, column 35 - line 85, column 17): " + [ de.constructor.name ]);
      })());
  };
  var setData = function (v) {
      return function (dat) {
          return function (dt) {
              return $foreign["_setData"](v)(dat)(dt);
          };
      };
  };
  var getData = function (v) {
      return function (dt) {
          return $foreign["_getData"](v)(dt);
      };
  };
  var files = Data_Functor.map(Data_Functor.functorFn)(Data_Nullable.toMaybe)($foreign["_files"]);
  var eqDropEffect = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Copy && y instanceof Copy) {
              return true;
          };
          if (x instanceof Link && y instanceof Link) {
              return true;
          };
          if (x instanceof Move && y instanceof Move) {
              return true;
          };
          if (x instanceof None && y instanceof None) {
              return true;
          };
          return false;
      };
  });
  var ordDropEffect = new Data_Ord.Ord(function () {
      return eqDropEffect;
  }, function (x) {
      return function (y) {
          if (x instanceof Copy && y instanceof Copy) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Copy) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Copy) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Link && y instanceof Link) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Link) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Link) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Move && y instanceof Move) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Move) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Move) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof None && y instanceof None) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.HTML.Event.DataTransfer (line 65, column 1 - line 65, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var dropEffect = function (dt) {
      return Data_Functor.mapFlipped(Effect.functorEffect)($foreign["_dropEffect"](dt))(function (v) {
          if (v === "copy") {
              return Copy.value;
          };
          if (v === "link") {
              return Link.value;
          };
          if (v === "move") {
              return Move.value;
          };
          if (v === "none") {
              return None.value;
          };
          return None.value;
      });
  };
  exports["files"] = files;
  exports["getData"] = getData;
  exports["setData"] = setData;
  exports["Copy"] = Copy;
  exports["Link"] = Link;
  exports["Move"] = Move;
  exports["None"] = None;
  exports["dropEffect"] = dropEffect;
  exports["setDropEffect"] = setDropEffect;
  exports["eqDropEffect"] = eqDropEffect;
  exports["ordDropEffect"] = ordDropEffect;
  exports["types"] = $foreign.types;
})(PS);
(function(exports) {
  "use strict";

  exports.dataTransfer = function (e) {
    return e.dataTransfer;
  };
})(PS["Web.HTML.Event.DragEvent"] = PS["Web.HTML.Event.DragEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.DragEvent"] = $PS["Web.HTML.Event.DragEvent"] || {};
  var exports = $PS["Web.HTML.Event.DragEvent"];
  var $foreign = $PS["Web.HTML.Event.DragEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("DragEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["dataTransfer"] = $foreign.dataTransfer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.DragEvent.EventTypes"] = $PS["Web.HTML.Event.DragEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.DragEvent.EventTypes"];
  var drop = "drop";
  var dragstart = "dragstart";
  var dragover = "dragover";
  var dragleave = "dragleave";
  var dragexit = "dragexit";
  var dragenter = "dragenter";
  var dragend = "dragend";
  var drag = "drag";
  exports["dragstart"] = dragstart;
  exports["drag"] = drag;
  exports["dragenter"] = dragenter;
  exports["dragexit"] = dragexit;
  exports["dragleave"] = dragleave;
  exports["dragover"] = dragover;
  exports["drop"] = drop;
  exports["dragend"] = dragend;
})(PS);
(function(exports) {
  "use strict";

  exports.message = function (e) {
    return e.message;
  };

  exports.fileName = function (e) {
    return e.filename;
  };

  exports.lineNo = function (e) {
    return e.lineno;
  };

  exports.colNo = function (e) {
    return e.colno;
  };
})(PS["Web.HTML.Event.ErrorEvent"] = PS["Web.HTML.Event.ErrorEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.ErrorEvent"] = $PS["Web.HTML.Event.ErrorEvent"] || {};
  var exports = $PS["Web.HTML.Event.ErrorEvent"];
  var $foreign = $PS["Web.HTML.Event.ErrorEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("ErrorEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["message"] = $foreign.message;
  exports["fileName"] = $foreign.fileName;
  exports["lineNo"] = $foreign.lineNo;
  exports["colNo"] = $foreign.colNo;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var unload = "unload";
  var toggle = "toggle";
  var submit = "submit";
  var storage = "storage";
  var select = "select";
  var reset = "reset";
  var readystatechange = "readystatechange";
  var progress = "progress";
  var paste = "paste";
  var online = "online";
  var offline = "offline";
  var message = "message";
  var loadstart = "loadstart";
  var loadend = "loadend";
  var load = "load";
  var languagechange = "languagechange";
  var invalid = "invalid";
  var input = "input";
  var focus = "focus";
  var error = "error";
  var domcontentloaded = "DOMContentLoaded";
  var cut = "cut";
  var copy = "copy";
  var close = "close";
  var click = "click";
  var change = "change";
  var cancel = "cancel";
  var blur = "blur";
  var beforescriptexecute = "beforescriptexecute";
  var beforeprint = "beforeprint";
  var afterscriptexecute = "afterscriptexecute";
  var afterprint = "afterprint";
  var abort = "abort";
  exports["abort"] = abort;
  exports["afterprint"] = afterprint;
  exports["afterscriptexecute"] = afterscriptexecute;
  exports["beforeprint"] = beforeprint;
  exports["beforescriptexecute"] = beforescriptexecute;
  exports["blur"] = blur;
  exports["cancel"] = cancel;
  exports["change"] = change;
  exports["click"] = click;
  exports["close"] = close;
  exports["copy"] = copy;
  exports["cut"] = cut;
  exports["domcontentloaded"] = domcontentloaded;
  exports["error"] = error;
  exports["focus"] = focus;
  exports["input"] = input;
  exports["invalid"] = invalid;
  exports["languagechange"] = languagechange;
  exports["load"] = load;
  exports["loadend"] = loadend;
  exports["loadstart"] = loadstart;
  exports["message"] = message;
  exports["offline"] = offline;
  exports["online"] = online;
  exports["paste"] = paste;
  exports["progress"] = progress;
  exports["readystatechange"] = readystatechange;
  exports["reset"] = reset;
  exports["select"] = select;
  exports["storage"] = storage;
  exports["submit"] = submit;
  exports["toggle"] = toggle;
  exports["unload"] = unload;
})(PS);
(function(exports) {
  "use strict";

  exports.oldURL = function (e) {
    return e.oldURL;
  };

  exports.newURL = function (e) {
    return e.newURL;
  };
})(PS["Web.HTML.Event.HashChangeEvent"] = PS["Web.HTML.Event.HashChangeEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.HashChangeEvent"] = $PS["Web.HTML.Event.HashChangeEvent"] || {};
  var exports = $PS["Web.HTML.Event.HashChangeEvent"];
  var $foreign = $PS["Web.HTML.Event.HashChangeEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("HashChangeEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["oldURL"] = $foreign.oldURL;
  exports["newURL"] = $foreign.newURL;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.HashChangeEvent.EventTypes"] = $PS["Web.HTML.Event.HashChangeEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.HashChangeEvent.EventTypes"];
  var hashchange = "hashchange";
  exports["hashchange"] = hashchange;
})(PS);
(function(exports) {
  "use strict";

  exports.persisted = function (e) {
    return e.persisted;
  };
})(PS["Web.HTML.Event.PageTransitionEvent"] = PS["Web.HTML.Event.PageTransitionEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.PageTransitionEvent"] = $PS["Web.HTML.Event.PageTransitionEvent"] || {};
  var exports = $PS["Web.HTML.Event.PageTransitionEvent"];
  var $foreign = $PS["Web.HTML.Event.PageTransitionEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("PageTransitionEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["persisted"] = $foreign.persisted;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.PageTransitionEvent.EventTypes"] = $PS["Web.HTML.Event.PageTransitionEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.PageTransitionEvent.EventTypes"];
  var pageshow = "pageshow";
  var pagehide = "pagehide";
  exports["pagehide"] = pagehide;
  exports["pageshow"] = pageshow;
})(PS);
(function(exports) {
  "use strict";

  exports.state = function (e) {
    return e.state;
  };
})(PS["Web.HTML.Event.PopStateEvent"] = PS["Web.HTML.Event.PopStateEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.PopStateEvent"] = $PS["Web.HTML.Event.PopStateEvent"] || {};
  var exports = $PS["Web.HTML.Event.PopStateEvent"];
  var $foreign = $PS["Web.HTML.Event.PopStateEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("PopStateEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["state"] = $foreign.state;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.PopStateEvent.EventTypes"] = $PS["Web.HTML.Event.PopStateEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.PopStateEvent.EventTypes"];
  var popstate = "popstate";
  exports["popstate"] = popstate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.TrackEvent"] = $PS["Web.HTML.Event.TrackEvent"] || {};
  var exports = $PS["Web.HTML.Event.TrackEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("TrackEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.TrackEvent.EventTypes"] = $PS["Web.HTML.Event.TrackEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.TrackEvent.EventTypes"];
  var removetrack = "removetrack";
  var addtrack = "addtrack";
  exports["addtrack"] = addtrack;
  exports["removetrack"] = removetrack;
})(PS);
(function(exports) {
  "use strict";

  exports.href = function (u) {
    return function () {
      return u.href;
    };
  };

  exports.setHref = function (href) {
    return function (u) {
      return function () {
        u.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.origin = function (u) {
    return function () {
      return u.origin;
    };
  };

  // ----------------------------------------------------------------------------

  exports.protocol = function (u) {
    return function () {
      return u.protocol;
    };
  };

  exports.setProtocol = function (protocol) {
    return function (u) {
      return function () {
        u.protocol = protocol;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.username = function (u) {
    return function () {
      return u.username;
    };
  };

  exports.setUsername = function (username) {
    return function (u) {
      return function () {
        u.username = username;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.password = function (u) {
    return function () {
      return u.password;
    };
  };

  exports.setPassword = function (password) {
    return function (u) {
      return function () {
        u.password = password;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.host = function (u) {
    return function () {
      return u.host;
    };
  };

  exports.setHost = function (host) {
    return function (u) {
      return function () {
        u.host = host;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hostname = function (u) {
    return function () {
      return u.hostname;
    };
  };

  exports.setHostname = function (hostname) {
    return function (u) {
      return function () {
        u.hostname = hostname;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.port = function (u) {
    return function () {
      return u.port;
    };
  };

  exports.setPort = function (port) {
    return function (u) {
      return function () {
        u.port = port;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.pathname = function (u) {
    return function () {
      return u.pathname;
    };
  };

  exports.setPathname = function (pathname) {
    return function (u) {
      return function () {
        u.pathname = pathname;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.search = function (u) {
    return function () {
      return u.search;
    };
  };

  exports.setSearch = function (search) {
    return function (u) {
      return function () {
        u.search = search;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hash = function (u) {
    return function () {
      return u.hash;
    };
  };

  exports.setHash = function (hash) {
    return function (u) {
      return function () {
        u.hash = hash;
      };
    };
  };
})(PS["Web.HTML.HTMLHyperlinkElementUtils"] = PS["Web.HTML.HTMLHyperlinkElementUtils"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLHyperlinkElementUtils"] = $PS["Web.HTML.HTMLHyperlinkElementUtils"] || {};
  var exports = $PS["Web.HTML.HTMLHyperlinkElementUtils"];
  var $foreign = $PS["Web.HTML.HTMLHyperlinkElementUtils"];
  exports["href"] = $foreign.href;
  exports["setHref"] = $foreign.setHref;
  exports["origin"] = $foreign.origin;
  exports["protocol"] = $foreign.protocol;
  exports["setProtocol"] = $foreign.setProtocol;
  exports["username"] = $foreign.username;
  exports["setUsername"] = $foreign.setUsername;
  exports["password"] = $foreign.password;
  exports["setPassword"] = $foreign.setPassword;
  exports["host"] = $foreign.host;
  exports["setHost"] = $foreign.setHost;
  exports["hostname"] = $foreign.hostname;
  exports["setHostname"] = $foreign.setHostname;
  exports["port"] = $foreign.port;
  exports["setPort"] = $foreign.setPort;
  exports["pathname"] = $foreign.pathname;
  exports["setPathname"] = $foreign.setPathname;
  exports["search"] = $foreign.search;
  exports["setSearch"] = $foreign.setSearch;
  exports["hash"] = $foreign.hash;
  exports["setHash"] = $foreign.setHash;
})(PS);
(function(exports) {
  "use strict";

  exports.readProp = function (prop, vs) {
    return vs[prop];
  };
})(PS["Web.HTML.ValidityState"] = PS["Web.HTML.ValidityState"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.ValidityState"] = $PS["Web.HTML.ValidityState"] || {};
  var exports = $PS["Web.HTML.ValidityState"];
  var $foreign = $PS["Web.HTML.ValidityState"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var valueMissing = Effect_Uncurried.runEffectFn2($foreign.readProp)("valueMissing");
  var valid = Effect_Uncurried.runEffectFn2($foreign.readProp)("valid");
  var typeMismatch = Effect_Uncurried.runEffectFn2($foreign.readProp)("typeMismatch");
  var tooShort = Effect_Uncurried.runEffectFn2($foreign.readProp)("tooShort");
  var tooLong = Effect_Uncurried.runEffectFn2($foreign.readProp)("tooLong");
  var stepMismatch = Effect_Uncurried.runEffectFn2($foreign.readProp)("stepMismatch");
  var rangeUnderflow = Effect_Uncurried.runEffectFn2($foreign.readProp)("rangeUnderflow");
  var rangeOverflow = Effect_Uncurried.runEffectFn2($foreign.readProp)("rangeOverflow");
  var patternMismatch = Effect_Uncurried.runEffectFn2($foreign.readProp)("patternMismatch");
  var customError = Effect_Uncurried.runEffectFn2($foreign.readProp)("customError");
  var badInput = Effect_Uncurried.runEffectFn2($foreign.readProp)("badInput");
  exports["valueMissing"] = valueMissing;
  exports["typeMismatch"] = typeMismatch;
  exports["patternMismatch"] = patternMismatch;
  exports["tooLong"] = tooLong;
  exports["tooShort"] = tooShort;
  exports["rangeUnderflow"] = rangeUnderflow;
  exports["rangeOverflow"] = rangeOverflow;
  exports["stepMismatch"] = stepMismatch;
  exports["badInput"] = badInput;
  exports["customError"] = customError;
  exports["valid"] = valid;
})(PS);
(function(exports) {
  "use strict";

  exports._key = function (storage) {
    return storage.key;
  };

  exports._oldValue = function (storage) {
    return storage.oldValue;
  };

  exports._newValue = function (storage) {
    return storage.newValue;
  };

  exports.url = function (storage) {
    return storage.url;
  };

  exports._storageArea = function (storage) {
    return storage.storageArea;
  };
})(PS["Web.Storage.Event.StorageEvent"] = PS["Web.Storage.Event.StorageEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Storage.Event.StorageEvent"] = $PS["Web.Storage.Event.StorageEvent"] || {};
  var exports = $PS["Web.Storage.Event.StorageEvent"];
  var $foreign = $PS["Web.Storage.Event.StorageEvent"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var storageArea = function ($0) {
      return Data_Nullable.toMaybe($foreign["_storageArea"]($0));
  };
  var oldValue = function ($1) {
      return Data_Nullable.toMaybe($foreign["_oldValue"]($1));
  };
  var newValue = function ($2) {
      return Data_Nullable.toMaybe($foreign["_newValue"]($2));
  };
  var key = function ($3) {
      return Data_Nullable.toMaybe($foreign["_key"]($3));
  };
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("StorageEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["key"] = key;
  exports["oldValue"] = oldValue;
  exports["newValue"] = newValue;
  exports["storageArea"] = storageArea;
  exports["url"] = $foreign.url;
})(PS);
(function(exports) {
  "use strict";

  exports.length = function (storage) {
    return function () {
      return storage.length;
    };
  };

  exports._key = function (index) {
    return function (storage) {
      return function () {
        return storage.key(index);
      };
    };
  };

  exports._getItem = function (key) {
    return function (storage) {
      return function () {
        return storage.getItem(key);
      };
    };
  };

  exports.setItem = function (key) {
    return function (value) {
      return function (storage) {
        return function () {
          storage.setItem(key, value);
        };
      };
    };
  };

  exports.removeItem = function (key) {
    return function (storage) {
      return function () {
        storage.removeItem(key);
      };
    };
  };

  exports.clear = function (storage) {
    return function () {
      storage.clear();
    };
  };
})(PS["Web.Storage.Storage"] = PS["Web.Storage.Storage"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Storage.Storage"] = $PS["Web.Storage.Storage"] || {};
  var exports = $PS["Web.Storage.Storage"];
  var $foreign = $PS["Web.Storage.Storage"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var key = function (i) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_key"](i);
      return function ($2) {
          return $0($1($2));
      };
  };
  var getItem = function (s) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_getItem"](s);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["key"] = key;
  exports["getItem"] = getItem;
  exports["length"] = $foreign.length;
  exports["setItem"] = $foreign.setItem;
  exports["removeItem"] = $foreign.removeItem;
  exports["clear"] = $foreign.clear;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.EventTypes"] = $PS["Web.XHR.EventTypes"] || {};
  var exports = $PS["Web.XHR.EventTypes"];
  var timeout = "timeout";
  var progress = "progress";
  var loadstart = "loadstart";
  var loadend = "loadend";
  var load = "load";
  var error = "error";
  var abort = "abort";
  exports["loadstart"] = loadstart;
  exports["progress"] = progress;
  exports["abort"] = abort;
  exports["error"] = error;
  exports["load"] = load;
  exports["timeout"] = timeout;
  exports["loadend"] = loadend;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return new FormData();
  };

  exports._fromFormElement = function(form) {
    return new FormData(form);
  };

  exports._append = function (name, value, fd) {
    fd.append(name, value);
  };

  exports._appendBlob = function (name, value, filename, fd) {
    fd.append(name, value, filename);
  };

  exports._delete = function (name, fd) {
    fd.delete(name);
  };

  exports._has = function (name, fd) {
    return fd.has(name);
  };

  exports._set = function (name, value, fd) {
    fd.set(name, value);
  };

  exports._setBlob = function (name, value, filename, fd) {
    fd.set(name, value, filename);
  };
})(PS["Web.XHR.FormData"] = PS["Web.XHR.FormData"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.FormData"] = $PS["Web.XHR.FormData"] || {};
  var exports = $PS["Web.XHR.FormData"];
  var $foreign = $PS["Web.XHR.FormData"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];                
  var FileName = function (x) {
      return x;
  };
  var EntryName = function (x) {
      return x;
  };
  var setBlob = function (name) {
      return function (value) {
          return function (filename) {
              return function (fd) {
                  return function () {
                      return $foreign["_setBlob"](name, value, Data_Nullable.toNullable(filename), fd);
                  };
              };
          };
      };
  };
  var set = function (name) {
      return function (value) {
          return function (fd) {
              return function () {
                  return $foreign["_set"](name, value, fd);
              };
          };
      };
  };
  var ordFileName = Data_Ord.ordString;
  var ordEntryName = Data_Ord.ordString;
  var newtypeFileName = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var newtypeEntryName = new Data_Newtype.Newtype(function () {
      return undefined;
  });
  var has = function (name) {
      return function (fd) {
          return function () {
              return $foreign["_has"](name, fd);
          };
      };
  };
  var fromFormElement = function (formElement) {
      return function () {
          return $foreign["_fromFormElement"](formElement);
      };
  };
  var eqFileName = Data_Eq.eqString;
  var eqEntryName = Data_Eq.eqString;
  var $$delete = function (name) {
      return function (fd) {
          return function () {
              return $foreign["_delete"](name, fd);
          };
      };
  };
  var appendBlob = function (name) {
      return function (value) {
          return function (filename) {
              return function (fd) {
                  return function () {
                      return $foreign["_appendBlob"](name, value, Data_Nullable.toNullable(filename), fd);
                  };
              };
          };
      };
  };
  var append = function (name) {
      return function (value) {
          return function (fd) {
              return function () {
                  return $foreign["_append"](name, value, fd);
              };
          };
      };
  };
  exports["EntryName"] = EntryName;
  exports["FileName"] = FileName;
  exports["append"] = append;
  exports["appendBlob"] = appendBlob;
  exports["delete"] = $$delete;
  exports["has"] = has;
  exports["set"] = set;
  exports["setBlob"] = setBlob;
  exports["eqEntryName"] = eqEntryName;
  exports["ordEntryName"] = ordEntryName;
  exports["newtypeEntryName"] = newtypeEntryName;
  exports["eqFileName"] = eqFileName;
  exports["ordFileName"] = ordFileName;
  exports["newtypeFileName"] = newtypeFileName;
  exports["new"] = $foreign["new"];
})(PS);
(function(exports) {
  "use strict";

  exports.lengthComputable = function (ev) {
    return ev.lengthComputable;
  };

  exports.loaded = function (ev) {
    return ev.loaded;
  };

  exports.total = function (ev) {
    return ev.total;
  };
})(PS["Web.XHR.ProgressEvent"] = PS["Web.XHR.ProgressEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.ProgressEvent"] = $PS["Web.XHR.ProgressEvent"] || {};
  var exports = $PS["Web.XHR.ProgressEvent"];
  var $foreign = $PS["Web.XHR.ProgressEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("ProgressEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["lengthComputable"] = $foreign.lengthComputable;
  exports["loaded"] = $foreign.loaded;
  exports["total"] = $foreign.total;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.ReadyState"] = $PS["Web.XHR.ReadyState"] || {};
  var exports = $PS["Web.XHR.ReadyState"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Unsent = (function () {
      function Unsent() {

      };
      Unsent.value = new Unsent();
      return Unsent;
  })();
  var Opened = (function () {
      function Opened() {

      };
      Opened.value = new Opened();
      return Opened;
  })();
  var HeadersReceived = (function () {
      function HeadersReceived() {

      };
      HeadersReceived.value = new HeadersReceived();
      return HeadersReceived;
  })();
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var toEnum = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Unsent.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Opened.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(HeadersReceived.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(Done.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnum = function (v) {
      if (v instanceof Unsent) {
          return 0;
      };
      if (v instanceof Opened) {
          return 1;
      };
      if (v instanceof HeadersReceived) {
          return 2;
      };
      if (v instanceof Loading) {
          return 3;
      };
      if (v instanceof Done) {
          return 4;
      };
      throw new Error("Failed pattern match at Web.XHR.ReadyState (line 41, column 12 - line 46, column 12): " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Unsent && y instanceof Unsent) {
              return true;
          };
          if (x instanceof Opened && y instanceof Opened) {
              return true;
          };
          if (x instanceof HeadersReceived && y instanceof HeadersReceived) {
              return true;
          };
          if (x instanceof Loading && y instanceof Loading) {
              return true;
          };
          if (x instanceof Done && y instanceof Done) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof Unsent && y instanceof Unsent) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Unsent) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Unsent) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Opened && y instanceof Opened) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Opened) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Opened) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HeadersReceived && y instanceof HeadersReceived) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HeadersReceived) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HeadersReceived) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Loading) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Loading) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Done && y instanceof Done) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Web.XHR.ReadyState (line 16, column 1 - line 16, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnum)(fromEnum), Data_Enum.defaultSucc(toEnum)(fromEnum));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, Unsent.value, Done.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 5, fromEnum, toEnum);
  exports["Unsent"] = Unsent;
  exports["Opened"] = Opened;
  exports["HeadersReceived"] = HeadersReceived;
  exports["Loading"] = Loading;
  exports["Done"] = Done;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.ResponseType"] = $PS["Web.XHR.ResponseType"] || {};
  var exports = $PS["Web.XHR.ResponseType"];
  var ResponseType = function (x) {
      return x;
  };
  var string = "";
  var document = "document";
  var blob = "blob";
  var arrayBuffer = "arraybuffer";
  exports["arrayBuffer"] = arrayBuffer;
  exports["blob"] = blob;
  exports["document"] = document;
  exports["string"] = string;
})(PS);
(function(exports) {
  "use strict";

  exports._xmlHttpRequest = function (respType) {
    var xhr = new XMLHttpRequest();
    xhr.responseType = respType;
    return xhr;
  };

  exports._abort = function (xhr) {
    xhr.abort();
  };

  exports._getAllResponseHeaders = function (xhr) {
    return xhr.getAllResponseHeaders();
  };

  exports._getResponseHeader = function (header, xhr) {
    return xhr.getResponseHeader(header);
  };

  exports._open = function (method, url, username, password, xhr) {
    xhr.open(method, url, true, username, password);
  };

  exports._overrideMimeType = function (mimeType, xhr) {
    xhr.overrideMimeType(mimeType);
  };

  exports._send = function (payload, xhr) {
    xhr.send(payload);
  };

  exports._setRequestHeader = function (header, value, xhr) {
    xhr.setRequestHeader(header, value);
  };

  exports._setProperty = function (prop, value, xhr) {
    xhr[prop] = value;
  };

  exports._getProperty = function (prop, xhr) {
    return xhr[prop];
  };
})(PS["Web.XHR.XMLHttpRequest"] = PS["Web.XHR.XMLHttpRequest"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.XMLHttpRequest"] = $PS["Web.XHR.XMLHttpRequest"] || {};
  var exports = $PS["Web.XHR.XMLHttpRequest"];
  var $foreign = $PS["Web.XHR.XMLHttpRequest"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType = $PS["Data.MediaType"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_XHR_ReadyState = $PS["Web.XHR.ReadyState"];                
  var xmlHttpRequest = Effect_Uncurried.runEffectFn1($foreign["_xmlHttpRequest"]);
  var withCredentials = function (xhr) {
      return function () {
          return $foreign["_getProperty"]("withCredentials", xhr);
      };
  };
  var upload = function (xhr) {
      return function () {
          return $foreign["_getProperty"]("upload", xhr);
      };
  };
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var timeout = function (xhr) {
      return function () {
          return $foreign["_getProperty"]("timeout", xhr);
      };
  };
  var statusText = function (xhr) {
      return function () {
          return $foreign["_getProperty"]("statusText", xhr);
      };
  };
  var status = function (xhr) {
      return function () {
          return $foreign["_getProperty"]("status", xhr);
      };
  };
  var setWithCredentials = function (wc) {
      return function (xhr) {
          return function () {
              return $foreign["_setProperty"]("withCredentials", wc, xhr);
          };
      };
  };
  var setTimeout = function (ms) {
      return function (xhr) {
          return function () {
              return $foreign["_setProperty"]("timeout", ms, xhr);
          };
      };
  };
  var setRequestHeader = function (header) {
      return function (value) {
          return function (xhr) {
              return function () {
                  return $foreign["_setRequestHeader"](header, value, xhr);
              };
          };
      };
  };
  var sendString = function (payload) {
      return function (xhr) {
          return function () {
              return $foreign["_send"](payload, xhr);
          };
      };
  };
  var sendFormData = function (payload) {
      return function (xhr) {
          return function () {
              return $foreign["_send"](payload, xhr);
          };
      };
  };
  var sendDocument = function (payload) {
      return function (xhr) {
          return function () {
              return $foreign["_send"](payload, xhr);
          };
      };
  };
  var sendBlob = function (payload) {
      return function (xhr) {
          return function () {
              return $foreign["_send"](payload, xhr);
          };
      };
  };
  var sendArrayView = function (payload) {
      return function (xhr) {
          return function () {
              return $foreign["_send"](payload, xhr);
          };
      };
  };
  var send = function (xhr) {
      return function () {
          return $foreign["_send"](Data_Nullable.toNullable(Data_Maybe.Nothing.value), xhr);
      };
  };
  var responseURL = function (xhr) {
      return function () {
          return $foreign["_getProperty"]("responseURL", xhr);
      };
  };
  var response = function (xhr) {
      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
          return $foreign["_getProperty"]("response", xhr);
      });
  };
  var readyState = function (xhr) {
      var toReadyState = function (rs) {
          return Data_Maybe.fromMaybe(Web_XHR_ReadyState.Unsent.value)(Data_Enum.toEnum(Web_XHR_ReadyState.boundedEnumReadyState)(rs));
      };
      return Data_Functor.map(Effect.functorEffect)(toReadyState)(function () {
          return $foreign["_getProperty"]("readyState", xhr);
      });
  };
  var overrideMimeType = function (ty) {
      return function (req) {
          return function () {
              return $foreign["_overrideMimeType"](Data_Newtype.un()(Data_MediaType.MediaType)(ty), req);
          };
      };
  };
  var open$prime = function (options) {
      return function (xhr) {
          return function () {
              return $foreign["_open"](Data_HTTP_Method.print(options.method), options.url, Data_Nullable.toNullable(options.username), Data_Nullable.toNullable(options.password), xhr);
          };
      };
  };
  var open = function (method) {
      return function (url) {
          return function (xhr) {
              return function () {
                  return $foreign["_open"](Data_HTTP_Method.print(method), url, Data_Nullable.toNullable(Data_Maybe.Nothing.value), Data_Nullable.toNullable(Data_Maybe.Nothing.value), xhr);
              };
          };
      };
  };
  var getResponseHeader = function (header) {
      return function (xhr) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
              return $foreign["_getResponseHeader"](header, xhr);
          });
      };
  };
  var getAllResponseHeaders = function (xhr) {
      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
          return $foreign["_getAllResponseHeaders"](xhr);
      });
  };
  var abort = Effect_Uncurried.runEffectFn1($foreign["_abort"]);
  exports["toEventTarget"] = toEventTarget;
  exports["xmlHttpRequest"] = xmlHttpRequest;
  exports["abort"] = abort;
  exports["getAllResponseHeaders"] = getAllResponseHeaders;
  exports["getResponseHeader"] = getResponseHeader;
  exports["open"] = open;
  exports["open'"] = open$prime;
  exports["overrideMimeType"] = overrideMimeType;
  exports["send"] = send;
  exports["sendString"] = sendString;
  exports["sendDocument"] = sendDocument;
  exports["sendBlob"] = sendBlob;
  exports["sendArrayView"] = sendArrayView;
  exports["sendFormData"] = sendFormData;
  exports["setRequestHeader"] = setRequestHeader;
  exports["readyState"] = readyState;
  exports["response"] = response;
  exports["responseURL"] = responseURL;
  exports["status"] = status;
  exports["statusText"] = statusText;
  exports["timeout"] = timeout;
  exports["setTimeout"] = setTimeout;
  exports["upload"] = upload;
  exports["withCredentials"] = withCredentials;
  exports["setWithCredentials"] = setWithCredentials;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.XHR.XMLHttpRequestUpload"] = $PS["Web.XHR.XMLHttpRequestUpload"] || {};
  var exports = $PS["Web.XHR.XMLHttpRequestUpload"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
})(PS);
PS["Main"].main();